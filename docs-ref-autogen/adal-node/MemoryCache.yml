### YamlMime:UniversalReference
ms.openlocfilehash: f506a0924f3f3b5f4088429dc8a673f55815c690
ms.sourcegitcommit: 286f52ea38c9eff2ec9d4f8cabeb86f62fd9c406
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 08/22/2018
ms.locfileid: "41684332"
items:
- uid: adal-node.MemoryCache
  name: MemoryCache
  fullName: MemoryCache
  children:
  - adal-node.MemoryCache.add
  - adal-node.MemoryCache.find
  - adal-node.MemoryCache.constructor
  - adal-node.MemoryCache.remove
  langs:
  - typeScript
  type: class
  summary: ''
  package: adal-node
- uid: adal-node.MemoryCache.add
  name: add
  children: []
  type: method
  langs:
  - typeScript
  summary: Fügt eine Auflistung von Einträgen in den Cache in einem Batchvorgang.
  syntax:
    content: 'function add(entries: TokenResponse[], callback: (err: Error, result: boolean) => void)'
    parameters:
    - id: entries
      type:
      - adal-node.TokenResponse[]
      description: Ein Array von Einträgen, die dem Cache hinzufügen.
    - id: callback
      type:
      - '(err: Error, result: boolean) => void'
      description: >
        Diese Funktion wird aufgerufen, wenn der Vorgang abgeschlossen ist.  Jeder Fehler wird als erster Parameter bereitgestellt.
  package: adal-node
- uid: adal-node.MemoryCache.find
  name: find
  children: []
  type: method
  langs:
  - typeScript
  summary: Sucht alle Einträge im Cache, die alle übergebenen Werte entsprechen.
  syntax:
    content: 'function find(query: any, callback: (err: Error, results: any[]) => void)'
    parameters:
    - id: query
      type:
      - any
      description: Dieses Objekt wird mit jeder Eintrag im Cache verglichen werden.  Alle Einträge, die alle Werte in diesem Objekt entsprechen, werden zurückgegeben.  Alle Werte in das übergebene Objekt müssen die Werte in einem potenziell zurückgegebene Objekt genau übereinstimmen.  Das zurückgegebene Objekt möglicherweise mehr Werte als der übergebene in Query-Objekt. Bitte sehen Sie sich http://underscorejs.org/#where ein Beispiel zum Bereitstellen der Abfrage.
    - id: callback
      type:
      - '(err: Error, results: any[]) => void'
      description: "\n"
  package: adal-node
- uid: adal-node.MemoryCache.constructor
  name: MemoryCache
  children: []
  type: constructor
  langs:
  - typeScript
  summary: ''
  syntax:
    content: new MemoryCache()
    parameters: []
  package: adal-node
- uid: adal-node.MemoryCache.remove
  name: remove
  children: []
  type: method
  langs:
  - typeScript
  summary: Entfernt eine Auflistung von Einträgen aus dem Cache in einem Batchvorgang.
  syntax:
    content: 'function remove(entires: TokenResponse[], callback: (err: Error, result: null) => void)'
    parameters:
    - id: entires
      type:
      - adal-node.TokenResponse[]
      description: ''
    - id: callback
      type:
      - '(err: Error, result: null) => void'
      description: >
        Diese Funktion wird aufgerufen, wenn der Vorgang abgeschlossen ist.  Jeder Fehler wird als erster Parameter bereitgestellt.
  package: adal-node
references:
- uid: adal-node.TokenResponse[]
  spec.typeScript:
  - name: TokenResponse
    fullName: TokenResponse
    uid: adal-node.TokenResponse
  - name: '[]'
    fullName: '[]'
