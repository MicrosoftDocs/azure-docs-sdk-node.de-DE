### YamlMime:UniversalReference
ms.openlocfilehash: b689168bdbe39b7bbe6c1af6f526770fde446576
ms.sourcegitcommit: ce76ec3eda83746ef9a765165173b5c00b5b7df6
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 12/20/2018
ms.locfileid: "53663014"
items:
- uid: azure-batch.JobManagerTask
  name: JobManagerTask
  fullName: JobManagerTask
  children:
  - azure-batch.JobManagerTask.allowLowPriorityNode
  - azure-batch.JobManagerTask.applicationPackageReferences
  - azure-batch.JobManagerTask.authenticationTokenSettings
  - azure-batch.JobManagerTask.commandLine
  - azure-batch.JobManagerTask.constraints
  - azure-batch.JobManagerTask.containerSettings
  - azure-batch.JobManagerTask.displayName
  - azure-batch.JobManagerTask.environmentSettings
  - azure-batch.JobManagerTask.id
  - azure-batch.JobManagerTask.killJobOnCompletion
  - azure-batch.JobManagerTask.outputFiles
  - azure-batch.JobManagerTask.resourceFiles
  - azure-batch.JobManagerTask.runExclusive
  - azure-batch.JobManagerTask.userIdentity
  langs:
  - typeScript
  type: interface
  summary: Die Auftrags-Manager-Aufgabe wird automatisch gestartet, wenn der Auftrag erstellt wird. Der Batch-Dienst versucht, die die Auftrags-Manager-Aufgabe, bevor andere Aufgaben im Auftrag zu planen. Wenn ein Pool verkleinert wird, versucht der Batch-Dienst Computeknoten zu erhalten, in dem Auftrags-Manager-Aufgaben ausgeführt werden, so lange wie möglich (d. h. Knoten ausgeführt 'normale' Aufgaben vor dem Ausführen von Auftrags-Manager-Tasks Knoten entfernt werden). Wenn eine Auftrags-Manager-Aufgabe fehlschlägt und neu gestartet werden muss, versucht das System, um ihn mit der höchsten Priorität zu planen. Wenn keine Knoten im Leerlauf verfügbar sind, kann das System eine der ausgeführten Aufgaben im Pool zu beenden und es an die Warteschlange zurückgegeben, um Platz für den Auftrags-Manager-Task neu starten zu machen. Beachten Sie, dass eine Auftrags-Manager-Aufgabe in einem Auftrag keine Priorität über Aufgaben in anderen Aufträgen verfügt. Auftragsübergreifend werden nur Prioritäten auf Auftragsebene berücksichtigt. Z. B. wenn ein Auftrags-Manager in einem Auftrag für die Priorität 0 neu gestartet werden muss, wird es nicht Tasks eines Auftrags Priorität 1 ersetzt. Batch wiederholt Tasks aus, wenn ein Wiederherstellungsvorgang auf einem Computeknoten ausgelöst wird. Beispiele für die Recovery-Vorgänge enthalten (aber Sie sind nicht darauf beschränkt) bei einem fehlerhaften Computeknoten neu gestartet wird oder Compute-Knoten aufgrund eines hostfehlers verschwunden. Wiederholungen aufgrund von Recovery-Vorgänge werden unabhängig von, und werden nicht anhand der "maxtaskretrycount" gezählt. Auch wenn der "maxtaskretrycount" auf 0 (null) eine interne Wiederholung aufgrund eines Wiederherstellungsvorgangs auftreten ist. Aus diesem Grund sollten alle Vorgänge Idempotent sein. Dies bedeutet, dass Aufgaben tolerieren kann unterbrochen und neu gestartet, ohne dass Beschädigung oder doppelter Daten. Die am besten für lang andauernde Aufgaben besteht darin, verwenden Sie eine Form von Prüfpunkten zu üben.
  package: azure-batch
- uid: azure-batch.JobManagerTask.allowLowPriorityNode
  name: allowLowPriorityNode
  fullName: allowLowPriorityNode
  children: []
  langs:
  - typeScript
  type: property
  summary: Der Standardwert lautet „true“.
  optional: true
  syntax:
    content: 'allowLowPriorityNode?: boolean'
    return:
      type:
      - boolean
  package: azure-batch
- uid: azure-batch.JobManagerTask.applicationPackageReferences
  name: applicationPackageReferences
  fullName: applicationPackageReferences
  children: []
  langs:
  - typeScript
  type: property
  summary: Anwendungspakete werden heruntergeladen und auf einem freigegebenen Verzeichnis, nicht die Aufgabe, die Arbeitsverzeichnis bereitgestellt. Aus diesem Grund Wenn ein Referenziertes Paket bereits auf dem Computeknoten ist und auf dem neuesten Stand ist, wird dann sie nicht erneut heruntergeladen. Es wird die vorhandene Kopie auf dem Computeknoten verwendet. Wenn ein Paket auf die verwiesen wird, z. B. installiert werden kann, da das Paket gelöscht wurde oder da Fehler beim Herunterladen der Task fehlschlägt.
  optional: true
  syntax:
    content: 'applicationPackageReferences?: ApplicationPackageReference[]'
    return:
      type:
      - azure-batch.ApplicationPackageReference[]
  package: azure-batch
- uid: azure-batch.JobManagerTask.authenticationTokenSettings
  name: authenticationTokenSettings
  fullName: authenticationTokenSettings
  children: []
  langs:
  - typeScript
  type: property
  summary: Wenn diese Eigenschaft festgelegt ist, enthält der Batch-Dienst den Task mit dem ein Authentifizierungstoken, die verwendet werden kann, um Batch-Dienst-Vorgänge zu authentifizieren, ohne einen kontozugriffsschlüssel. Das Token wird über die Umgebungsvariable AZ_BATCH_AUTHENTICATION_TOKEN bereitgestellt. Die Vorgänge, die mit dem Token die Aufgabe ausführen kann, hängen von den Einstellungen ab. Ein Task kann z. B. Auftrags verfügen, um andere Aufgaben zum Auftrag hinzufügen oder Überprüfen Sie den Status des Auftrags oder andere Aufgaben unter dem Auftrag anfordern.
  optional: true
  syntax:
    content: 'authenticationTokenSettings?: AuthenticationTokenSettings'
    return:
      type:
      - azure-batch.AuthenticationTokenSettings
  package: azure-batch
- uid: azure-batch.JobManagerTask.commandLine
  name: commandLine
  fullName: commandLine
  children: []
  langs:
  - typeScript
  type: property
  summary: Die Befehlszeile wird nicht unter einer Shell ausgeführt, und daher nicht nutzen Shellfeatures wie die Erweiterung von Umgebungsvariablen. Wenn Sie solche Features nutzen möchten, Sie sollten die Shell Aufrufen in der Befehlszeile, z. B. mit "Cmd/c MyCommand" in Windows oder "/ Bin/sh - C MyCommand" unter Linux. Bezieht sich die Befehlszeile auf Dateipfade, sollten sie einen relativen Pfad (relativ zum Arbeitsverzeichnis Aufgabe), oder verwenden Sie die angegebene Batch-Umgebungsvariable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).
  syntax:
    content: 'commandLine: string'
    return:
      type:
      - string
  package: azure-batch
- uid: azure-batch.JobManagerTask.constraints
  name: constraints
  fullName: constraints
  children: []
  langs:
  - typeScript
  type: property
  summary: ''
  optional: true
  syntax:
    content: 'constraints?: TaskConstraints'
    return:
      type:
      - azure-batch.TaskConstraints
  package: azure-batch
- uid: azure-batch.JobManagerTask.containerSettings
  name: containerSettings
  fullName: containerSettings
  children: []
  langs:
  - typeScript
  type: property
  summary: Wenn der Pool, der diese Aufgabe ausgeführt wird ContainerConfiguration festgelegt hat, muss dies ebenfalls festgelegt werden. Wenn der Pool, der diese Aufgabe ausgeführt wird ContainerConfiguration festgelegt hat, muss dies nicht festgelegt werden. Wenn dies angegeben ist, werden alle Verzeichnisse rekursiv unter dem AZ_BATCH_NODE_ROOT_DIR (der Stamm der Azure Batch-Verzeichnisse auf dem Knoten) in den Container zugeordnet, werden alle Variablen in den Container zugeordnet und wird von der Befehlszeile des Tasks in den Container ausgeführt.
  optional: true
  syntax:
    content: 'containerSettings?: TaskContainerSettings'
    return:
      type:
      - azure-batch.TaskContainerSettings
  package: azure-batch
- uid: azure-batch.JobManagerTask.displayName
  name: displayName
  fullName: displayName
  children: []
  langs:
  - typeScript
  type: property
  summary: Es muss nicht eindeutig sein und kann bis zu einer maximalen Länge von 1024 beliebigen Unicode-Zeichen enthalten.
  optional: true
  syntax:
    content: 'displayName?: string'
    return:
      type:
      - string
  package: azure-batch
- uid: azure-batch.JobManagerTask.environmentSettings
  name: environmentSettings
  fullName: environmentSettings
  children: []
  langs:
  - typeScript
  type: property
  summary: ''
  optional: true
  syntax:
    content: 'environmentSettings?: EnvironmentSetting[]'
    return:
      type:
      - azure-batch.EnvironmentSetting[]
  package: azure-batch
- uid: azure-batch.JobManagerTask.id
  name: id
  fullName: id
  children: []
  langs:
  - typeScript
  type: property
  summary: Die ID kann eine beliebige Kombination von alphanumerischen Zeichen einschließlich Bindestriche und Unterstriche enthalten und darf nicht mehr als 64 Zeichen enthalten.
  syntax:
    content: 'id: string'
    return:
      type:
      - string
  package: azure-batch
- uid: azure-batch.JobManagerTask.killJobOnCompletion
  name: killJobOnCompletion
  fullName: killJobOnCompletion
  children: []
  langs:
  - typeScript
  type: property
  summary: True gibt an, wenn die Auftrags-Manager-Aufgabe abgeschlossen ist, den Batch-Dienst wird der Auftrag als abgeschlossen. Wenn Sie zu diesem Zeitpunkt (außer der Auftragsfreigabe) noch Aufgaben ausgeführt werden, werden diese Aufgaben beendet. False gibt an, betrifft der Abschluss des Auftrags-Manager-Tasks nicht den Status des Auftrags. In diesem Fall sollten Sie entweder verwenden Sie das OnAllTasksComplete-Attribut, um den Auftrag zu beenden oder einen Client oder Benutzer, die den Auftrag explizit beenden. Ein Beispiel hierfür ist, wenn der Auftrags-Manager einen Satz von Aufgaben erstellt, aber klicken Sie dann keine weitere Rolle ausgeführt wird. Der Standardwert lautet „true“. Bei Verwendung der Attribute OnAllTasksComplete und OnTaskFailure Lebensdauer der Steuerelement-Auftrag, und mit der Auftrags-Manager-Task nur um die Aufgaben für den Auftrag (nicht um den Fortschritt zu überwachen) zu erstellen, ist es wichtig, dass KillJobOnCompletion auf "false" festgelegt.
  optional: true
  syntax:
    content: 'killJobOnCompletion?: boolean'
    return:
      type:
      - boolean
  package: azure-batch
- uid: azure-batch.JobManagerTask.outputFiles
  name: outputFiles
  fullName: outputFiles
  children: []
  langs:
  - typeScript
  type: property
  summary: Für Tasks mit mehreren Instanzen werden die Dateien nur aus den Compute-Knoten hochgeladen werden auf denen die Aufgabe ausgeführt wird.
  optional: true
  syntax:
    content: 'outputFiles?: OutputFile[]'
    return:
      type:
      - azure-batch.OutputFile[]
  package: azure-batch
- uid: azure-batch.JobManagerTask.resourceFiles
  name: resourceFiles
  fullName: resourceFiles
  children: []
  langs:
  - typeScript
  type: property
  summary: >-
    Unter diesem Element aufgeführten Dateien befinden sich im Arbeitsverzeichnis des Tasks.

    Es ist eine maximale Größe für die Liste der Ressourcendateien.  Wenn die maximale Größe überschritten wird, die Anforderung schlägt fehl, und der Fehlercode der Antwort werden RequestEntityTooLarge. In diesem Fall muss die Auflistung der ResourceFiles Größe reduziert werden. Dies kann erreicht werden, mithilfe von ZIP-Dateien, Anwendungspakete oder Docker-Container.
  optional: true
  syntax:
    content: 'resourceFiles?: ResourceFile[]'
    return:
      type:
      - azure-batch.ResourceFile[]
  package: azure-batch
- uid: azure-batch.JobManagerTask.runExclusive
  name: runExclusive
  fullName: runExclusive
  children: []
  langs:
  - typeScript
  type: property
  summary: Wenn "true" werden auf dem gleichen Computeknoten für keine anderen Aufgaben ausgeführt, solange der Auftrags-Manager ausgeführt wird. False gibt an, können andere Tasks gleichzeitig mit der Auftrags-Manager auf einem Computeknoten ausgeführt werden. Die Auftrags-Manager-Aufgabe wird normalerweise auf gleichzeitige Taskgrenze des Knotens, auf, also nur relevant, wenn der Knoten mehrerer gleichzeitiger Tasks ermöglicht. Der Standardwert lautet „true“.
  optional: true
  syntax:
    content: 'runExclusive?: boolean'
    return:
      type:
      - boolean
  package: azure-batch
- uid: azure-batch.JobManagerTask.userIdentity
  name: userIdentity
  fullName: userIdentity
  children: []
  langs:
  - typeScript
  type: property
  summary: Wenn nicht angegeben, wird die Aufgabe als eine eindeutige Benutzer ohne Administratorrechte an die Aufgabe ausgeführt.
  optional: true
  syntax:
    content: 'userIdentity?: UserIdentity'
    return:
      type:
      - azure-batch.UserIdentity
  package: azure-batch
references:
- uid: azure-batch.ApplicationPackageReference[]
  name: ApplicationPackageReference[]
  spec.typeScript:
  - name: ApplicationPackageReference
    fullName: ApplicationPackageReference
    uid: azure-batch.ApplicationPackageReference
  - name: '[]'
    fullName: '[]'
- uid: azure-batch.AuthenticationTokenSettings
  name: AuthenticationTokenSettings
  spec.typeScript:
  - name: AuthenticationTokenSettings
    fullName: AuthenticationTokenSettings
    uid: azure-batch.AuthenticationTokenSettings
- uid: azure-batch.TaskConstraints
  name: TaskConstraints
  spec.typeScript:
  - name: TaskConstraints
    fullName: TaskConstraints
    uid: azure-batch.TaskConstraints
- uid: azure-batch.TaskContainerSettings
  name: TaskContainerSettings
  spec.typeScript:
  - name: TaskContainerSettings
    fullName: TaskContainerSettings
    uid: azure-batch.TaskContainerSettings
- uid: azure-batch.EnvironmentSetting[]
  name: EnvironmentSetting[]
  spec.typeScript:
  - name: EnvironmentSetting
    fullName: EnvironmentSetting
    uid: azure-batch.EnvironmentSetting
  - name: '[]'
    fullName: '[]'
- uid: azure-batch.OutputFile[]
  name: OutputFile[]
  spec.typeScript:
  - name: OutputFile
    fullName: OutputFile
    uid: azure-batch.OutputFile
  - name: '[]'
    fullName: '[]'
- uid: azure-batch.ResourceFile[]
  name: ResourceFile[]
  spec.typeScript:
  - name: ResourceFile
    fullName: ResourceFile
    uid: azure-batch.ResourceFile
  - name: '[]'
    fullName: '[]'
- uid: azure-batch.UserIdentity
  name: UserIdentity
  spec.typeScript:
  - name: UserIdentity
    fullName: UserIdentity
    uid: azure-batch.UserIdentity
