### YamlMime:UniversalReference
ms.openlocfilehash: a54a8d025a067a5a1f8e278ccbb96a5c55d02684
ms.sourcegitcommit: 094b6aa16c2ee9aa1418d36ce033f1d99151d913
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 09/18/2018
ms.locfileid: "45957224"
items:
- uid: azure-event-processor-host.CheckpointManager
  name: CheckpointManager
  fullName: CheckpointManager
  children:
  - azure-event-processor-host.CheckpointManager.checkpointStoreExists
  - azure-event-processor-host.CheckpointManager.createAllCheckpointsIfNotExists
  - azure-event-processor-host.CheckpointManager.createCheckpointStoreIfNotExists
  - azure-event-processor-host.CheckpointManager.deleteCheckpoint
  - azure-event-processor-host.CheckpointManager.deleteCheckpointStore
  - azure-event-processor-host.CheckpointManager.getCheckpoint
  - azure-event-processor-host.CheckpointManager.updateCheckpoint
  langs:
  - typeScript
  type: interface
  summary: ''
  package: azure-event-processor-host
- uid: azure-event-processor-host.CheckpointManager.checkpointStoreExists
  name: checkpointStoreExists
  children: []
  type: method
  langs:
  - typeScript
  summary: Existiert die Prüfpunkt-Store?
  syntax:
    content: function checkpointStoreExists()
    parameters: []
    return:
      type:
      - Promise<boolean>
  package: azure-event-processor-host
- uid: azure-event-processor-host.CheckpointManager.createAllCheckpointsIfNotExists
  name: createAllCheckpointsIfNotExists
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    Erstellt die Prüfpunkt-Platzhalter für die angegebenen Partitionen. Führt keine Aktion für alle Prüfpunkte werden, die bereits vorhanden.

    Die Semantik dieser sind kompliziert, da es möglich ist, verwenden den gleichen Speicher für Leases und Prüfpunkte (die Azure Storage-Implementierung erfolgt), und es ist erforderlich, um eine Lease für jede Partition zu erhalten, aber es ist nicht erforderlich, um einen Prüfpunkt für eine Partition zu erhalten.

    Es ist ein gültiges Szenario zum Prüfpunkte überhaupt niemals verwendet, daher es wichtig, für den Speicher ist zu unterscheiden, erstellen die Structure(s), die einen Prüfpunkt enthält, oder Erstellen eines Prüfpunkts (Speichern ein paar Offset/Sequenz, in der Struktur).
  syntax:
    content: 'function createAllCheckpointsIfNotExists(partitionIds: string[])'
    parameters:
    - id: partitionIds
      type:
      - string[]
      description: Liste der Prüfpunkt-Platzhalter für die zu erstellenden Partitionen.
    return:
      type:
      - Promise<void>
  package: azure-event-processor-host
- uid: azure-event-processor-host.CheckpointManager.createCheckpointStoreIfNotExists
  name: createCheckpointStoreIfNotExists
  children: []
  type: method
  langs:
  - typeScript
  summary: Erstellen Sie den Prüfpunkt-Speicher aus, wenn er nicht vorhanden ist. Hat keine Auswirkung, wenn es vorhanden ist.
  syntax:
    content: function createCheckpointStoreIfNotExists()
    parameters: []
    return:
      type:
      - Promise<void>
  package: azure-event-processor-host
- uid: azure-event-processor-host.CheckpointManager.deleteCheckpoint
  name: deleteCheckpoint
  children: []
  type: method
  langs:
  - typeScript
  summary: Löschen Sie die gespeicherten Prüfpunkt für die angegebene Partition. Wenn keine gespeicherten Prüfpunkt für die angegebene Partition vorhanden ist, wird, die als erfolgreich behandelt. Löschen den Prüfpunkt Inhaber ist zulässig, aber nicht erforderlich; die Implementierung kann je besser geeignet ist.
  syntax:
    content: 'function deleteCheckpoint(partitionId: string)'
    parameters:
    - id: partitionId
      type:
      - string
      description: Die PartitionId den Prüfpunkt aus dem Speicher gelöscht werden soll.
    return:
      type:
      - Promise<void>
  package: azure-event-processor-host
- uid: azure-event-processor-host.CheckpointManager.deleteCheckpointStore
  name: deleteCheckpointStore
  children: []
  type: method
  langs:
  - typeScript
  summary: Löscht den Prüfpunkt-Speicher.
  syntax:
    content: function deleteCheckpointStore()
    parameters: []
    return:
      type:
      - Promise<void>
  package: azure-event-processor-host
- uid: azure-event-processor-host.CheckpointManager.getCheckpoint
  name: getCheckpoint
  children: []
  type: method
  langs:
  - typeScript
  summary: Ruft die Prüfpunktinformationen zu einem der angegebenen Partition zugeordnet. Kann nicht definiert zurückgeben, wenn kein Prüfpunkt für die Partition erstellt wurde.
  syntax:
    content: 'function getCheckpoint(partitionId: string)'
    parameters:
    - id: partitionId
      type:
      - string
      description: Die PartitionId, für die Prüfpunktinformationen zu erhalten.
    return:
      type:
      - Promise<azure-event-processor-host.CheckpointInfo | undefined>
  package: azure-event-processor-host
- uid: azure-event-processor-host.CheckpointManager.updateCheckpoint
  name: updateCheckpoint
  children: []
  type: method
  langs:
  - typeScript
  summary: Aktualisieren Sie den Prüfpunkt im Speicher, mit der Offset/SequenceNumber im bereitgestellten Prüfpunkt.
  syntax:
    content: 'function updateCheckpoint(lease: CompleteLease, checkpoint: CheckpointInfo)'
    parameters:
    - id: lease
      type:
      - azure-event-processor-host.CompleteLease
      description: Partitionsinformationen für die Durchführung ein Prüfpunkts.
    - id: checkpoint
      type:
      - azure-event-processor-host.CheckpointInfo
      description: Offset/SequeceNumber zum Aktualisieren des Speichers mit
    return:
      type:
      - Promise<void>
  package: azure-event-processor-host
references:
- uid: Promise<azure-event-processor-host.CheckpointInfo | undefined>
  name: CheckpointInfo | undefined>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: CheckpointInfo
    fullName: CheckpointInfo
    uid: azure-event-processor-host.CheckpointInfo
  - name: " | undefined>"
    fullName: " | undefined>"
- uid: azure-event-processor-host.CompleteLease
  name: CompleteLease
  spec.typeScript:
  - name: CompleteLease
    fullName: CompleteLease
    uid: azure-event-processor-host.CompleteLease
- uid: azure-event-processor-host.CheckpointInfo
  name: CheckpointInfo
  spec.typeScript:
  - name: CheckpointInfo
    fullName: CheckpointInfo
    uid: azure-event-processor-host.CheckpointInfo
