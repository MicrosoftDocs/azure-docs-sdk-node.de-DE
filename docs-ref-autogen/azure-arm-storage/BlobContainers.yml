### YamlMime:UniversalReference
ms.openlocfilehash: c801eb9f9b016119944940a10e39ea87b797030a
ms.sourcegitcommit: efa2d98deffe8a0d41a8d63f9f07aa720862e6ab
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 12/13/2018
ms.locfileid: "52145025"
items:
- uid: azure-arm-storage.BlobContainers
  name: BlobContainers
  fullName: BlobContainers
  children:
  - azure-arm-storage.BlobContainers.clearLegalHold
  - azure-arm-storage.BlobContainers.clearLegalHold_2
  - azure-arm-storage.BlobContainers.clearLegalHold_1
  - azure-arm-storage.BlobContainers.clearLegalHoldWithHttpOperationResponse
  - azure-arm-storage.BlobContainers.create
  - azure-arm-storage.BlobContainers.create_2
  - azure-arm-storage.BlobContainers.create_1
  - azure-arm-storage.BlobContainers.createOrUpdateImmutabilityPolicy
  - azure-arm-storage.BlobContainers.createOrUpdateImmutabilityPolicy_2
  - azure-arm-storage.BlobContainers.createOrUpdateImmutabilityPolicy_1
  - azure-arm-storage.BlobContainers.createOrUpdateImmutabilityPolicyWithHttpOperationResponse
  - azure-arm-storage.BlobContainers.createWithHttpOperationResponse
  - azure-arm-storage.BlobContainers.deleteImmutabilityPolicy
  - azure-arm-storage.BlobContainers.deleteImmutabilityPolicy_2
  - azure-arm-storage.BlobContainers.deleteImmutabilityPolicy_1
  - azure-arm-storage.BlobContainers.deleteImmutabilityPolicyWithHttpOperationResponse
  - azure-arm-storage.BlobContainers.deleteMethod
  - azure-arm-storage.BlobContainers.deleteMethod_2
  - azure-arm-storage.BlobContainers.deleteMethod_1
  - azure-arm-storage.BlobContainers.deleteMethodWithHttpOperationResponse
  - azure-arm-storage.BlobContainers.extendImmutabilityPolicy
  - azure-arm-storage.BlobContainers.extendImmutabilityPolicy_2
  - azure-arm-storage.BlobContainers.extendImmutabilityPolicy_1
  - azure-arm-storage.BlobContainers.extendImmutabilityPolicyWithHttpOperationResponse
  - azure-arm-storage.BlobContainers.get
  - azure-arm-storage.BlobContainers.get_2
  - azure-arm-storage.BlobContainers.get_1
  - azure-arm-storage.BlobContainers.getImmutabilityPolicy
  - azure-arm-storage.BlobContainers.getImmutabilityPolicy_2
  - azure-arm-storage.BlobContainers.getImmutabilityPolicy_1
  - azure-arm-storage.BlobContainers.getImmutabilityPolicyWithHttpOperationResponse
  - azure-arm-storage.BlobContainers.getWithHttpOperationResponse
  - azure-arm-storage.BlobContainers.list
  - azure-arm-storage.BlobContainers.list_2
  - azure-arm-storage.BlobContainers.list_1
  - azure-arm-storage.BlobContainers.listWithHttpOperationResponse
  - azure-arm-storage.BlobContainers.lockImmutabilityPolicy
  - azure-arm-storage.BlobContainers.lockImmutabilityPolicy_2
  - azure-arm-storage.BlobContainers.lockImmutabilityPolicy_1
  - azure-arm-storage.BlobContainers.lockImmutabilityPolicyWithHttpOperationResponse
  - azure-arm-storage.BlobContainers.setLegalHold
  - azure-arm-storage.BlobContainers.setLegalHold_2
  - azure-arm-storage.BlobContainers.setLegalHold_1
  - azure-arm-storage.BlobContainers.setLegalHoldWithHttpOperationResponse
  - azure-arm-storage.BlobContainers.update
  - azure-arm-storage.BlobContainers.update_2
  - azure-arm-storage.BlobContainers.update_1
  - azure-arm-storage.BlobContainers.updateWithHttpOperationResponse
  langs:
  - typeScript
  type: interface
  summary: ''
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.clearLegalHold
  name: clearLegalHold(string, string, string, string[], Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: Löscht rechtliche enthalten Tags. Deaktivieren das gleiche oder eine nicht existierende Tag führt einen idempotenten Vorgang. ClearLegalHold löscht nur den angegebenen Tags in der Anforderung.
  syntax:
    content: 'function clearLegalHold(resourceGroupName: string, accountName: string, containerName: string, tags: string[], options?: Object)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: >
        Der Name der Ressourcengruppe im Abonnement des Benutzers. Der Name ist Groß-/Kleinschreibung.
    - id: accountName
      type:
      - string
      description: >
        Der Name des Speicherkontos, das in der angegebenen Ressourcengruppe aus. Speicherkontonamen müssen zwischen 3 und 24 Zeichen lang sein und dürfen nur Zahlen und Kleinbuchstaben enthalten.
    - id: containerName
      type:
      - string
      description: >
        Der Name des Blob-Containers in das angegebene Speicherkonto an. BLOB-Containernamen müssen zwischen 3 und 63 Zeichen lang sein und Zahlen, Kleinbuchstaben und Bindestriche (-) nur.

        Jedem Bindestrich (-) muss unmittelbar vorangestellt und gefolgt von einem Buchstaben oder einer Zahl.
    - id: tags
      type:
      - string[]
      description: >
        Jedes Tag muss zwischen 3 und 23 alphanumerische Zeichen und ist in Kleinbuchstaben an Richtlinien für Softwareeinschränkung normalisiert.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-arm-storage.LegalHold>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.clearLegalHold_2
  name: clearLegalHold(string, string, string, string[], Object, ServiceCallback<LegalHold>)
  children: []
  type: method
  langs:
  - typeScript
  summary: Löscht rechtliche enthalten Tags. Deaktivieren das gleiche oder eine nicht existierende Tag führt einen idempotenten Vorgang. ClearLegalHold löscht nur den angegebenen Tags in der Anforderung.
  syntax:
    content: 'function clearLegalHold(resourceGroupName: string, accountName: string, containerName: string, tags: string[], options: Object, callback: ServiceCallback<LegalHold>)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: ''
    - id: accountName
      type:
      - string
      description: ''
    - id: containerName
      type:
      - string
      description: ''
    - id: tags
      type:
      - string[]
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-storage.LegalHold>
      description: ''
    return:
      type:
      - Promise<azure-arm-storage.LegalHold>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.clearLegalHold_1
  name: clearLegalHold(string, string, string, string[], ServiceCallback<LegalHold>)
  children: []
  type: method
  langs:
  - typeScript
  summary: Löscht rechtliche enthalten Tags. Deaktivieren das gleiche oder eine nicht existierende Tag führt einen idempotenten Vorgang. ClearLegalHold löscht nur den angegebenen Tags in der Anforderung.
  syntax:
    content: 'function clearLegalHold(resourceGroupName: string, accountName: string, containerName: string, tags: string[], callback: ServiceCallback<LegalHold>)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: ''
    - id: accountName
      type:
      - string
      description: ''
    - id: containerName
      type:
      - string
      description: ''
    - id: tags
      type:
      - string[]
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-storage.LegalHold>
      description: ''
    return:
      type:
      - Promise<azure-arm-storage.LegalHold>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.clearLegalHoldWithHttpOperationResponse
  name: clearLegalHoldWithHttpOperationResponse(string, string, string, string[], Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: Löscht rechtliche enthalten Tags. Deaktivieren das gleiche oder eine nicht existierende Tag führt einen idempotenten Vorgang. ClearLegalHold löscht nur den angegebenen Tags in der Anforderung.
  syntax:
    content: 'function clearLegalHoldWithHttpOperationResponse(resourceGroupName: string, accountName: string, containerName: string, tags: string[], options?: Object)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: >
        Der Name der Ressourcengruppe im Abonnement des Benutzers. Der Name ist Groß-/Kleinschreibung.
    - id: accountName
      type:
      - string
      description: >
        Der Name des Speicherkontos, das in der angegebenen Ressourcengruppe aus. Speicherkontonamen müssen zwischen 3 und 24 Zeichen lang sein und dürfen nur Zahlen und Kleinbuchstaben enthalten.
    - id: containerName
      type:
      - string
      description: >
        Der Name des Blob-Containers in das angegebene Speicherkonto an. BLOB-Containernamen müssen zwischen 3 und 63 Zeichen lang sein und Zahlen, Kleinbuchstaben und Bindestriche (-) nur.

        Jedem Bindestrich (-) muss unmittelbar vorangestellt und gefolgt von einem Buchstaben oder einer Zahl.
    - id: tags
      type:
      - string[]
      description: >
        Jedes Tag muss zwischen 3 und 23 alphanumerische Zeichen und ist in Kleinbuchstaben an Richtlinien für Softwareeinschränkung normalisiert.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-arm-storage.LegalHold>>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.create
  name: create(string, string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: Erstellt einen neuen Container unter dem angegebenen Konto an, wie durch den Anforderungstext beschrieben. Die containerressource enthält Metadaten und Eigenschaften für den betreffenden Container. Es enthält eine Liste der vom Container enthaltenen Blobs keine.
  syntax:
    content: 'function create(resourceGroupName: string, accountName: string, containerName: string, options?: Object)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: >
        Der Name der Ressourcengruppe im Abonnement des Benutzers. Der Name ist Groß-/Kleinschreibung.
    - id: accountName
      type:
      - string
      description: >
        Der Name des Speicherkontos, das in der angegebenen Ressourcengruppe aus. Speicherkontonamen müssen zwischen 3 und 24 Zeichen lang sein und dürfen nur Zahlen und Kleinbuchstaben enthalten.
    - id: containerName
      type:
      - string
      description: >
        Der Name des Blob-Containers in das angegebene Speicherkonto an. BLOB-Containernamen müssen zwischen 3 und 63 Zeichen lang sein und Zahlen, Kleinbuchstaben und Bindestriche (-) nur.

        Jedem Bindestrich (-) muss unmittelbar vorangestellt und gefolgt von einem Buchstaben oder einer Zahl.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-arm-storage.BlobContainer>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.create_2
  name: create(string, string, string, Object, ServiceCallback<BlobContainer>)
  children: []
  type: method
  langs:
  - typeScript
  summary: Erstellt einen neuen Container unter dem angegebenen Konto an, wie durch den Anforderungstext beschrieben. Die containerressource enthält Metadaten und Eigenschaften für den betreffenden Container. Es enthält eine Liste der vom Container enthaltenen Blobs keine.
  syntax:
    content: 'function create(resourceGroupName: string, accountName: string, containerName: string, options: Object, callback: ServiceCallback<BlobContainer>)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: ''
    - id: accountName
      type:
      - string
      description: ''
    - id: containerName
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-storage.BlobContainer>
      description: ''
    return:
      type:
      - Promise<azure-arm-storage.BlobContainer>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.create_1
  name: create(string, string, string, ServiceCallback<BlobContainer>)
  children: []
  type: method
  langs:
  - typeScript
  summary: Erstellt einen neuen Container unter dem angegebenen Konto an, wie durch den Anforderungstext beschrieben. Die containerressource enthält Metadaten und Eigenschaften für den betreffenden Container. Es enthält eine Liste der vom Container enthaltenen Blobs keine.
  syntax:
    content: 'function create(resourceGroupName: string, accountName: string, containerName: string, callback: ServiceCallback<BlobContainer>)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: ''
    - id: accountName
      type:
      - string
      description: ''
    - id: containerName
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-storage.BlobContainer>
      description: ''
    return:
      type:
      - Promise<azure-arm-storage.BlobContainer>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.createOrUpdateImmutabilityPolicy
  name: createOrUpdateImmutabilityPolicy(string, string, string, number, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: Erstellt oder aktualisiert eine nicht gesperrte unveränderlichkeitsrichtlinie. ETag im If-Match wird berücksichtigt, wenn angegeben, aber nicht für diesen Vorgang erforderlich.
  syntax:
    content: 'function createOrUpdateImmutabilityPolicy(resourceGroupName: string, accountName: string, containerName: string, immutabilityPeriodSinceCreationInDays: number, options?: Object)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: >
        Der Name der Ressourcengruppe im Abonnement des Benutzers. Der Name ist Groß-/Kleinschreibung.
    - id: accountName
      type:
      - string
      description: >
        Der Name des Speicherkontos, das in der angegebenen Ressourcengruppe aus. Speicherkontonamen müssen zwischen 3 und 24 Zeichen lang sein und dürfen nur Zahlen und Kleinbuchstaben enthalten.
    - id: containerName
      type:
      - string
      description: >
        Der Name des Blob-Containers in das angegebene Speicherkonto an. BLOB-Containernamen müssen zwischen 3 und 63 Zeichen lang sein und Zahlen, Kleinbuchstaben und Bindestriche (-) nur.

        Jedem Bindestrich (-) muss unmittelbar vorangestellt und gefolgt von einem Buchstaben oder einer Zahl.
    - id: immutabilityPeriodSinceCreationInDays
      type:
      - number
      description: >
        Der Zeitraum, für die Blobs im Container seit der richtlinienerstellung, in Tagen Unveränderlichkeit.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-arm-storage.ImmutabilityPolicy>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.createOrUpdateImmutabilityPolicy_2
  name: createOrUpdateImmutabilityPolicy(string, string, string, number, Object, ServiceCallback<ImmutabilityPolicy>)
  children: []
  type: method
  langs:
  - typeScript
  summary: Erstellt oder aktualisiert eine nicht gesperrte unveränderlichkeitsrichtlinie. ETag im If-Match wird berücksichtigt, wenn angegeben, aber nicht für diesen Vorgang erforderlich.
  syntax:
    content: 'function createOrUpdateImmutabilityPolicy(resourceGroupName: string, accountName: string, containerName: string, immutabilityPeriodSinceCreationInDays: number, options: Object, callback: ServiceCallback<ImmutabilityPolicy>)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: ''
    - id: accountName
      type:
      - string
      description: ''
    - id: containerName
      type:
      - string
      description: ''
    - id: immutabilityPeriodSinceCreationInDays
      type:
      - number
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-storage.ImmutabilityPolicy>
      description: ''
    return:
      type:
      - Promise<azure-arm-storage.ImmutabilityPolicy>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.createOrUpdateImmutabilityPolicy_1
  name: createOrUpdateImmutabilityPolicy(string, string, string, number, ServiceCallback<ImmutabilityPolicy>)
  children: []
  type: method
  langs:
  - typeScript
  summary: Erstellt oder aktualisiert eine nicht gesperrte unveränderlichkeitsrichtlinie. ETag im If-Match wird berücksichtigt, wenn angegeben, aber nicht für diesen Vorgang erforderlich.
  syntax:
    content: 'function createOrUpdateImmutabilityPolicy(resourceGroupName: string, accountName: string, containerName: string, immutabilityPeriodSinceCreationInDays: number, callback: ServiceCallback<ImmutabilityPolicy>)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: ''
    - id: accountName
      type:
      - string
      description: ''
    - id: containerName
      type:
      - string
      description: ''
    - id: immutabilityPeriodSinceCreationInDays
      type:
      - number
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-storage.ImmutabilityPolicy>
      description: ''
    return:
      type:
      - Promise<azure-arm-storage.ImmutabilityPolicy>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.createOrUpdateImmutabilityPolicyWithHttpOperationResponse
  name: createOrUpdateImmutabilityPolicyWithHttpOperationResponse(string, string, string, number, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: Erstellt oder aktualisiert eine nicht gesperrte unveränderlichkeitsrichtlinie. ETag im If-Match wird berücksichtigt, wenn angegeben, aber nicht für diesen Vorgang erforderlich.
  syntax:
    content: 'function createOrUpdateImmutabilityPolicyWithHttpOperationResponse(resourceGroupName: string, accountName: string, containerName: string, immutabilityPeriodSinceCreationInDays: number, options?: Object)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: >
        Der Name der Ressourcengruppe im Abonnement des Benutzers. Der Name ist Groß-/Kleinschreibung.
    - id: accountName
      type:
      - string
      description: >
        Der Name des Speicherkontos, das in der angegebenen Ressourcengruppe aus. Speicherkontonamen müssen zwischen 3 und 24 Zeichen lang sein und dürfen nur Zahlen und Kleinbuchstaben enthalten.
    - id: containerName
      type:
      - string
      description: >
        Der Name des Blob-Containers in das angegebene Speicherkonto an. BLOB-Containernamen müssen zwischen 3 und 63 Zeichen lang sein und Zahlen, Kleinbuchstaben und Bindestriche (-) nur.

        Jedem Bindestrich (-) muss unmittelbar vorangestellt und gefolgt von einem Buchstaben oder einer Zahl.
    - id: immutabilityPeriodSinceCreationInDays
      type:
      - number
      description: >
        Der Zeitraum, für die Blobs im Container seit der richtlinienerstellung, in Tagen Unveränderlichkeit.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-arm-storage.ImmutabilityPolicy>>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.createWithHttpOperationResponse
  name: createWithHttpOperationResponse(string, string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: Erstellt einen neuen Container unter dem angegebenen Konto an, wie durch den Anforderungstext beschrieben. Die containerressource enthält Metadaten und Eigenschaften für den betreffenden Container. Es enthält eine Liste der vom Container enthaltenen Blobs keine.
  syntax:
    content: 'function createWithHttpOperationResponse(resourceGroupName: string, accountName: string, containerName: string, options?: Object)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: >
        Der Name der Ressourcengruppe im Abonnement des Benutzers. Der Name ist Groß-/Kleinschreibung.
    - id: accountName
      type:
      - string
      description: >
        Der Name des Speicherkontos, das in der angegebenen Ressourcengruppe aus. Speicherkontonamen müssen zwischen 3 und 24 Zeichen lang sein und dürfen nur Zahlen und Kleinbuchstaben enthalten.
    - id: containerName
      type:
      - string
      description: >
        Der Name des Blob-Containers in das angegebene Speicherkonto an. BLOB-Containernamen müssen zwischen 3 und 63 Zeichen lang sein und Zahlen, Kleinbuchstaben und Bindestriche (-) nur.

        Jedem Bindestrich (-) muss unmittelbar vorangestellt und gefolgt von einem Buchstaben oder einer Zahl.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-arm-storage.BlobContainer>>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.deleteImmutabilityPolicy
  name: deleteImmutabilityPolicy(string, string, string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: Bricht eine nicht gesperrte unveränderlichkeitsrichtlinie ab. Die Reaktion des Delete hat ImmutabilityPeriodSinceCreationInDays auf 0 festgelegt. ETag im If-Match ist für diesen Vorgang erforderlich. Löschen eine gesperrte unveränderlichkeitsrichtlinie ist nicht zulässig, nur so ist zum Löschen des Containers nach dem Löschen aller Blobs im Container.
  syntax:
    content: 'function deleteImmutabilityPolicy(resourceGroupName: string, accountName: string, containerName: string, ifMatch: string, options?: Object)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: >
        Der Name der Ressourcengruppe im Abonnement des Benutzers. Der Name ist Groß-/Kleinschreibung.
    - id: accountName
      type:
      - string
      description: >
        Der Name des Speicherkontos, das in der angegebenen Ressourcengruppe aus. Speicherkontonamen müssen zwischen 3 und 24 Zeichen lang sein und dürfen nur Zahlen und Kleinbuchstaben enthalten.
    - id: containerName
      type:
      - string
      description: >
        Der Name des Blob-Containers in das angegebene Speicherkonto an. BLOB-Containernamen müssen zwischen 3 und 63 Zeichen lang sein und Zahlen, Kleinbuchstaben und Bindestriche (-) nur.

        Jedem Bindestrich (-) muss unmittelbar vorangestellt und gefolgt von einem Buchstaben oder einer Zahl.
    - id: ifMatch
      type:
      - string
      description: >
        Die entitätszustandsversion (ETag) die unveränderlichkeitsrichtlinie für aktualisieren. Der Wert "*" kann verwendet werden, um die Operation angewendet werden, nur dann, wenn die unveränderlichkeitsrichtlinie für bereits vorhanden ist. Wenn nicht angegeben, wird dieser Vorgang immer angewendet werden.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-arm-storage.ImmutabilityPolicy>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.deleteImmutabilityPolicy_2
  name: deleteImmutabilityPolicy(string, string, string, string, Object, ServiceCallback<ImmutabilityPolicy>)
  children: []
  type: method
  langs:
  - typeScript
  summary: Bricht eine nicht gesperrte unveränderlichkeitsrichtlinie ab. Die Reaktion des Delete hat ImmutabilityPeriodSinceCreationInDays auf 0 festgelegt. ETag im If-Match ist für diesen Vorgang erforderlich. Löschen eine gesperrte unveränderlichkeitsrichtlinie ist nicht zulässig, nur so ist zum Löschen des Containers nach dem Löschen aller Blobs im Container.
  syntax:
    content: 'function deleteImmutabilityPolicy(resourceGroupName: string, accountName: string, containerName: string, ifMatch: string, options: Object, callback: ServiceCallback<ImmutabilityPolicy>)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: ''
    - id: accountName
      type:
      - string
      description: ''
    - id: containerName
      type:
      - string
      description: ''
    - id: ifMatch
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-storage.ImmutabilityPolicy>
      description: ''
    return:
      type:
      - Promise<azure-arm-storage.ImmutabilityPolicy>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.deleteImmutabilityPolicy_1
  name: deleteImmutabilityPolicy(string, string, string, string, ServiceCallback<ImmutabilityPolicy>)
  children: []
  type: method
  langs:
  - typeScript
  summary: Bricht eine nicht gesperrte unveränderlichkeitsrichtlinie ab. Die Reaktion des Delete hat ImmutabilityPeriodSinceCreationInDays auf 0 festgelegt. ETag im If-Match ist für diesen Vorgang erforderlich. Löschen eine gesperrte unveränderlichkeitsrichtlinie ist nicht zulässig, nur so ist zum Löschen des Containers nach dem Löschen aller Blobs im Container.
  syntax:
    content: 'function deleteImmutabilityPolicy(resourceGroupName: string, accountName: string, containerName: string, ifMatch: string, callback: ServiceCallback<ImmutabilityPolicy>)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: ''
    - id: accountName
      type:
      - string
      description: ''
    - id: containerName
      type:
      - string
      description: ''
    - id: ifMatch
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-storage.ImmutabilityPolicy>
      description: ''
    return:
      type:
      - Promise<azure-arm-storage.ImmutabilityPolicy>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.deleteImmutabilityPolicyWithHttpOperationResponse
  name: deleteImmutabilityPolicyWithHttpOperationResponse(string, string, string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: Bricht eine nicht gesperrte unveränderlichkeitsrichtlinie ab. Die Reaktion des Delete hat ImmutabilityPeriodSinceCreationInDays auf 0 festgelegt. ETag im If-Match ist für diesen Vorgang erforderlich. Löschen eine gesperrte unveränderlichkeitsrichtlinie ist nicht zulässig, nur so ist zum Löschen des Containers nach dem Löschen aller Blobs im Container.
  syntax:
    content: 'function deleteImmutabilityPolicyWithHttpOperationResponse(resourceGroupName: string, accountName: string, containerName: string, ifMatch: string, options?: Object)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: >
        Der Name der Ressourcengruppe im Abonnement des Benutzers. Der Name ist Groß-/Kleinschreibung.
    - id: accountName
      type:
      - string
      description: >
        Der Name des Speicherkontos, das in der angegebenen Ressourcengruppe aus. Speicherkontonamen müssen zwischen 3 und 24 Zeichen lang sein und dürfen nur Zahlen und Kleinbuchstaben enthalten.
    - id: containerName
      type:
      - string
      description: >
        Der Name des Blob-Containers in das angegebene Speicherkonto an. BLOB-Containernamen müssen zwischen 3 und 63 Zeichen lang sein und Zahlen, Kleinbuchstaben und Bindestriche (-) nur.

        Jedem Bindestrich (-) muss unmittelbar vorangestellt und gefolgt von einem Buchstaben oder einer Zahl.
    - id: ifMatch
      type:
      - string
      description: >
        Die entitätszustandsversion (ETag) die unveränderlichkeitsrichtlinie für aktualisieren. Der Wert "*" kann verwendet werden, um die Operation angewendet werden, nur dann, wenn die unveränderlichkeitsrichtlinie für bereits vorhanden ist. Wenn nicht angegeben, wird dieser Vorgang immer angewendet werden.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-arm-storage.ImmutabilityPolicy>>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.deleteMethod
  name: deleteMethod(string, string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: Löscht den angegebenen Container ein Konto.
  syntax:
    content: 'function deleteMethod(resourceGroupName: string, accountName: string, containerName: string, options?: Object)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: >
        Der Name der Ressourcengruppe im Abonnement des Benutzers. Der Name ist Groß-/Kleinschreibung.
    - id: accountName
      type:
      - string
      description: >
        Der Name des Speicherkontos, das in der angegebenen Ressourcengruppe aus. Speicherkontonamen müssen zwischen 3 und 24 Zeichen lang sein und dürfen nur Zahlen und Kleinbuchstaben enthalten.
    - id: containerName
      type:
      - string
      description: >
        Der Name des Blob-Containers in das angegebene Speicherkonto an. BLOB-Containernamen müssen zwischen 3 und 63 Zeichen lang sein und Zahlen, Kleinbuchstaben und Bindestriche (-) nur.

        Jedem Bindestrich (-) muss unmittelbar vorangestellt und gefolgt von einem Buchstaben oder einer Zahl.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<void>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.deleteMethod_2
  name: deleteMethod(string, string, string, Object, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: Löscht den angegebenen Container ein Konto.
  syntax:
    content: 'function deleteMethod(resourceGroupName: string, accountName: string, containerName: string, options: Object, callback: ServiceCallback<void>)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: ''
    - id: accountName
      type:
      - string
      description: ''
    - id: containerName
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.deleteMethod_1
  name: deleteMethod(string, string, string, ServiceCallback<void>)
  children: []
  type: method
  langs:
  - typeScript
  summary: Löscht den angegebenen Container ein Konto.
  syntax:
    content: 'function deleteMethod(resourceGroupName: string, accountName: string, containerName: string, callback: ServiceCallback<void>)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: ''
    - id: accountName
      type:
      - string
      description: ''
    - id: containerName
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<void>
      description: ''
    return:
      type:
      - Promise<void>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.deleteMethodWithHttpOperationResponse
  name: deleteMethodWithHttpOperationResponse(string, string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: Löscht den angegebenen Container ein Konto.
  syntax:
    content: 'function deleteMethodWithHttpOperationResponse(resourceGroupName: string, accountName: string, containerName: string, options?: Object)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: >
        Der Name der Ressourcengruppe im Abonnement des Benutzers. Der Name ist Groß-/Kleinschreibung.
    - id: accountName
      type:
      - string
      description: >
        Der Name des Speicherkontos, das in der angegebenen Ressourcengruppe aus. Speicherkontonamen müssen zwischen 3 und 24 Zeichen lang sein und dürfen nur Zahlen und Kleinbuchstaben enthalten.
    - id: containerName
      type:
      - string
      description: >
        Der Name des Blob-Containers in das angegebene Speicherkonto an. BLOB-Containernamen müssen zwischen 3 und 63 Zeichen lang sein und Zahlen, Kleinbuchstaben und Bindestriche (-) nur.

        Jedem Bindestrich (-) muss unmittelbar vorangestellt und gefolgt von einem Buchstaben oder einer Zahl.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<void>>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.extendImmutabilityPolicy
  name: extendImmutabilityPolicy(string, string, string, string, number, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: Erweitert die ImmutabilityPeriodSinceCreationInDays von einer gesperrten ImmutabilityPolicy an. Die einzige Aktion, die für eine Richtlinie gesperrt zulässig, wird diese Aktion werden. ETag im If-Match ist für diesen Vorgang erforderlich.
  syntax:
    content: 'function extendImmutabilityPolicy(resourceGroupName: string, accountName: string, containerName: string, ifMatch: string, immutabilityPeriodSinceCreationInDays: number, options?: Object)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: >
        Der Name der Ressourcengruppe im Abonnement des Benutzers. Der Name ist Groß-/Kleinschreibung.
    - id: accountName
      type:
      - string
      description: >
        Der Name des Speicherkontos, das in der angegebenen Ressourcengruppe aus. Speicherkontonamen müssen zwischen 3 und 24 Zeichen lang sein und dürfen nur Zahlen und Kleinbuchstaben enthalten.
    - id: containerName
      type:
      - string
      description: >
        Der Name des Blob-Containers in das angegebene Speicherkonto an. BLOB-Containernamen müssen zwischen 3 und 63 Zeichen lang sein und Zahlen, Kleinbuchstaben und Bindestriche (-) nur.

        Jedem Bindestrich (-) muss unmittelbar vorangestellt und gefolgt von einem Buchstaben oder einer Zahl.
    - id: ifMatch
      type:
      - string
      description: >
        Die entitätszustandsversion (ETag) die unveränderlichkeitsrichtlinie für aktualisieren. Der Wert "*" kann verwendet werden, um die Operation angewendet werden, nur dann, wenn die unveränderlichkeitsrichtlinie für bereits vorhanden ist. Wenn nicht angegeben, wird dieser Vorgang immer angewendet werden.
    - id: immutabilityPeriodSinceCreationInDays
      type:
      - number
      description: >
        Der Zeitraum, für die Blobs im Container seit der richtlinienerstellung, in Tagen Unveränderlichkeit.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-arm-storage.ImmutabilityPolicy>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.extendImmutabilityPolicy_2
  name: extendImmutabilityPolicy(string, string, string, string, number, Object, ServiceCallback<ImmutabilityPolicy>)
  children: []
  type: method
  langs:
  - typeScript
  summary: Erweitert die ImmutabilityPeriodSinceCreationInDays von einer gesperrten ImmutabilityPolicy an. Die einzige Aktion, die für eine Richtlinie gesperrt zulässig, wird diese Aktion werden. ETag im If-Match ist für diesen Vorgang erforderlich.
  syntax:
    content: 'function extendImmutabilityPolicy(resourceGroupName: string, accountName: string, containerName: string, ifMatch: string, immutabilityPeriodSinceCreationInDays: number, options: Object, callback: ServiceCallback<ImmutabilityPolicy>)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: ''
    - id: accountName
      type:
      - string
      description: ''
    - id: containerName
      type:
      - string
      description: ''
    - id: ifMatch
      type:
      - string
      description: ''
    - id: immutabilityPeriodSinceCreationInDays
      type:
      - number
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-storage.ImmutabilityPolicy>
      description: ''
    return:
      type:
      - Promise<azure-arm-storage.ImmutabilityPolicy>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.extendImmutabilityPolicy_1
  name: extendImmutabilityPolicy(string, string, string, string, number, ServiceCallback<ImmutabilityPolicy>)
  children: []
  type: method
  langs:
  - typeScript
  summary: Erweitert die ImmutabilityPeriodSinceCreationInDays von einer gesperrten ImmutabilityPolicy an. Die einzige Aktion, die für eine Richtlinie gesperrt zulässig, wird diese Aktion werden. ETag im If-Match ist für diesen Vorgang erforderlich.
  syntax:
    content: 'function extendImmutabilityPolicy(resourceGroupName: string, accountName: string, containerName: string, ifMatch: string, immutabilityPeriodSinceCreationInDays: number, callback: ServiceCallback<ImmutabilityPolicy>)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: ''
    - id: accountName
      type:
      - string
      description: ''
    - id: containerName
      type:
      - string
      description: ''
    - id: ifMatch
      type:
      - string
      description: ''
    - id: immutabilityPeriodSinceCreationInDays
      type:
      - number
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-storage.ImmutabilityPolicy>
      description: ''
    return:
      type:
      - Promise<azure-arm-storage.ImmutabilityPolicy>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.extendImmutabilityPolicyWithHttpOperationResponse
  name: extendImmutabilityPolicyWithHttpOperationResponse(string, string, string, string, number, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: Erweitert die ImmutabilityPeriodSinceCreationInDays von einer gesperrten ImmutabilityPolicy an. Die einzige Aktion, die für eine Richtlinie gesperrt zulässig, wird diese Aktion werden. ETag im If-Match ist für diesen Vorgang erforderlich.
  syntax:
    content: 'function extendImmutabilityPolicyWithHttpOperationResponse(resourceGroupName: string, accountName: string, containerName: string, ifMatch: string, immutabilityPeriodSinceCreationInDays: number, options?: Object)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: >
        Der Name der Ressourcengruppe im Abonnement des Benutzers. Der Name ist Groß-/Kleinschreibung.
    - id: accountName
      type:
      - string
      description: >
        Der Name des Speicherkontos, das in der angegebenen Ressourcengruppe aus. Speicherkontonamen müssen zwischen 3 und 24 Zeichen lang sein und dürfen nur Zahlen und Kleinbuchstaben enthalten.
    - id: containerName
      type:
      - string
      description: >
        Der Name des Blob-Containers in das angegebene Speicherkonto an. BLOB-Containernamen müssen zwischen 3 und 63 Zeichen lang sein und Zahlen, Kleinbuchstaben und Bindestriche (-) nur.

        Jedem Bindestrich (-) muss unmittelbar vorangestellt und gefolgt von einem Buchstaben oder einer Zahl.
    - id: ifMatch
      type:
      - string
      description: >
        Die entitätszustandsversion (ETag) die unveränderlichkeitsrichtlinie für aktualisieren. Der Wert "*" kann verwendet werden, um die Operation angewendet werden, nur dann, wenn die unveränderlichkeitsrichtlinie für bereits vorhanden ist. Wenn nicht angegeben, wird dieser Vorgang immer angewendet werden.
    - id: immutabilityPeriodSinceCreationInDays
      type:
      - number
      description: >
        Der Zeitraum, für die Blobs im Container seit der richtlinienerstellung, in Tagen Unveränderlichkeit.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-arm-storage.ImmutabilityPolicy>>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.get
  name: get(string, string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: Ruft die Eigenschaften von einem angegebenen Container ab.
  syntax:
    content: 'function get(resourceGroupName: string, accountName: string, containerName: string, options?: Object)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: >
        Der Name der Ressourcengruppe im Abonnement des Benutzers. Der Name ist Groß-/Kleinschreibung.
    - id: accountName
      type:
      - string
      description: >
        Der Name des Speicherkontos, das in der angegebenen Ressourcengruppe aus. Speicherkontonamen müssen zwischen 3 und 24 Zeichen lang sein und dürfen nur Zahlen und Kleinbuchstaben enthalten.
    - id: containerName
      type:
      - string
      description: >
        Der Name des Blob-Containers in das angegebene Speicherkonto an. BLOB-Containernamen müssen zwischen 3 und 63 Zeichen lang sein und Zahlen, Kleinbuchstaben und Bindestriche (-) nur.

        Jedem Bindestrich (-) muss unmittelbar vorangestellt und gefolgt von einem Buchstaben oder einer Zahl.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-arm-storage.BlobContainer>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.get_2
  name: get(string, string, string, Object, ServiceCallback<BlobContainer>)
  children: []
  type: method
  langs:
  - typeScript
  summary: Ruft die Eigenschaften von einem angegebenen Container ab.
  syntax:
    content: 'function get(resourceGroupName: string, accountName: string, containerName: string, options: Object, callback: ServiceCallback<BlobContainer>)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: ''
    - id: accountName
      type:
      - string
      description: ''
    - id: containerName
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-storage.BlobContainer>
      description: ''
    return:
      type:
      - Promise<azure-arm-storage.BlobContainer>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.get_1
  name: get(string, string, string, ServiceCallback<BlobContainer>)
  children: []
  type: method
  langs:
  - typeScript
  summary: Ruft die Eigenschaften von einem angegebenen Container ab.
  syntax:
    content: 'function get(resourceGroupName: string, accountName: string, containerName: string, callback: ServiceCallback<BlobContainer>)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: ''
    - id: accountName
      type:
      - string
      description: ''
    - id: containerName
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-storage.BlobContainer>
      description: ''
    return:
      type:
      - Promise<azure-arm-storage.BlobContainer>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.getImmutabilityPolicy
  name: getImmutabilityPolicy(string, string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: Ruft die vorhandenen unveränderlichkeitsrichtlinie zusammen mit dem entsprechenden ETag-Antwortheader und den Text ab.
  syntax:
    content: 'function getImmutabilityPolicy(resourceGroupName: string, accountName: string, containerName: string, options?: Object)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: >
        Der Name der Ressourcengruppe im Abonnement des Benutzers. Der Name ist Groß-/Kleinschreibung.
    - id: accountName
      type:
      - string
      description: >
        Der Name des Speicherkontos, das in der angegebenen Ressourcengruppe aus. Speicherkontonamen müssen zwischen 3 und 24 Zeichen lang sein und dürfen nur Zahlen und Kleinbuchstaben enthalten.
    - id: containerName
      type:
      - string
      description: >
        Der Name des Blob-Containers in das angegebene Speicherkonto an. BLOB-Containernamen müssen zwischen 3 und 63 Zeichen lang sein und Zahlen, Kleinbuchstaben und Bindestriche (-) nur.

        Jedem Bindestrich (-) muss unmittelbar vorangestellt und gefolgt von einem Buchstaben oder einer Zahl.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-arm-storage.ImmutabilityPolicy>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.getImmutabilityPolicy_2
  name: getImmutabilityPolicy(string, string, string, Object, ServiceCallback<ImmutabilityPolicy>)
  children: []
  type: method
  langs:
  - typeScript
  summary: Ruft die vorhandenen unveränderlichkeitsrichtlinie zusammen mit dem entsprechenden ETag-Antwortheader und den Text ab.
  syntax:
    content: 'function getImmutabilityPolicy(resourceGroupName: string, accountName: string, containerName: string, options: Object, callback: ServiceCallback<ImmutabilityPolicy>)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: ''
    - id: accountName
      type:
      - string
      description: ''
    - id: containerName
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-storage.ImmutabilityPolicy>
      description: ''
    return:
      type:
      - Promise<azure-arm-storage.ImmutabilityPolicy>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.getImmutabilityPolicy_1
  name: getImmutabilityPolicy(string, string, string, ServiceCallback<ImmutabilityPolicy>)
  children: []
  type: method
  langs:
  - typeScript
  summary: Ruft die vorhandenen unveränderlichkeitsrichtlinie zusammen mit dem entsprechenden ETag-Antwortheader und den Text ab.
  syntax:
    content: 'function getImmutabilityPolicy(resourceGroupName: string, accountName: string, containerName: string, callback: ServiceCallback<ImmutabilityPolicy>)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: ''
    - id: accountName
      type:
      - string
      description: ''
    - id: containerName
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-storage.ImmutabilityPolicy>
      description: ''
    return:
      type:
      - Promise<azure-arm-storage.ImmutabilityPolicy>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.getImmutabilityPolicyWithHttpOperationResponse
  name: getImmutabilityPolicyWithHttpOperationResponse(string, string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: Ruft die vorhandenen unveränderlichkeitsrichtlinie zusammen mit dem entsprechenden ETag-Antwortheader und den Text ab.
  syntax:
    content: 'function getImmutabilityPolicyWithHttpOperationResponse(resourceGroupName: string, accountName: string, containerName: string, options?: Object)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: >
        Der Name der Ressourcengruppe im Abonnement des Benutzers. Der Name ist Groß-/Kleinschreibung.
    - id: accountName
      type:
      - string
      description: >
        Der Name des Speicherkontos, das in der angegebenen Ressourcengruppe aus. Speicherkontonamen müssen zwischen 3 und 24 Zeichen lang sein und dürfen nur Zahlen und Kleinbuchstaben enthalten.
    - id: containerName
      type:
      - string
      description: >
        Der Name des Blob-Containers in das angegebene Speicherkonto an. BLOB-Containernamen müssen zwischen 3 und 63 Zeichen lang sein und Zahlen, Kleinbuchstaben und Bindestriche (-) nur.

        Jedem Bindestrich (-) muss unmittelbar vorangestellt und gefolgt von einem Buchstaben oder einer Zahl.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-arm-storage.ImmutabilityPolicy>>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.getWithHttpOperationResponse
  name: getWithHttpOperationResponse(string, string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: Ruft die Eigenschaften von einem angegebenen Container ab.
  syntax:
    content: 'function getWithHttpOperationResponse(resourceGroupName: string, accountName: string, containerName: string, options?: Object)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: >
        Der Name der Ressourcengruppe im Abonnement des Benutzers. Der Name ist Groß-/Kleinschreibung.
    - id: accountName
      type:
      - string
      description: >
        Der Name des Speicherkontos, das in der angegebenen Ressourcengruppe aus. Speicherkontonamen müssen zwischen 3 und 24 Zeichen lang sein und dürfen nur Zahlen und Kleinbuchstaben enthalten.
    - id: containerName
      type:
      - string
      description: >
        Der Name des Blob-Containers in das angegebene Speicherkonto an. BLOB-Containernamen müssen zwischen 3 und 63 Zeichen lang sein und Zahlen, Kleinbuchstaben und Bindestriche (-) nur.

        Jedem Bindestrich (-) muss unmittelbar vorangestellt und gefolgt von einem Buchstaben oder einer Zahl.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-arm-storage.BlobContainer>>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.list
  name: list(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: Listet alle Container, und ein Präfix wie die Datenebene wird nicht unterstützt. Richtlinien für Softwareeinschränkung gibt auch noch heute keine Fortsetzungstoken zurück.
  syntax:
    content: 'function list(resourceGroupName: string, accountName: string, options?: Object)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: >
        Der Name der Ressourcengruppe im Abonnement des Benutzers. Der Name ist Groß-/Kleinschreibung.
    - id: accountName
      type:
      - string
      description: >
        Der Name des Speicherkontos, das in der angegebenen Ressourcengruppe aus. Speicherkontonamen müssen zwischen 3 und 24 Zeichen lang sein und dürfen nur Zahlen und Kleinbuchstaben enthalten.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-arm-storage.ListContainerItems>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.list_2
  name: list(string, string, Object, ServiceCallback<ListContainerItems>)
  children: []
  type: method
  langs:
  - typeScript
  summary: Listet alle Container, und ein Präfix wie die Datenebene wird nicht unterstützt. Richtlinien für Softwareeinschränkung gibt auch noch heute keine Fortsetzungstoken zurück.
  syntax:
    content: 'function list(resourceGroupName: string, accountName: string, options: Object, callback: ServiceCallback<ListContainerItems>)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: ''
    - id: accountName
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-storage.ListContainerItems>
      description: ''
    return:
      type:
      - Promise<azure-arm-storage.ListContainerItems>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.list_1
  name: list(string, string, ServiceCallback<ListContainerItems>)
  children: []
  type: method
  langs:
  - typeScript
  summary: Listet alle Container, und ein Präfix wie die Datenebene wird nicht unterstützt. Richtlinien für Softwareeinschränkung gibt auch noch heute keine Fortsetzungstoken zurück.
  syntax:
    content: 'function list(resourceGroupName: string, accountName: string, callback: ServiceCallback<ListContainerItems>)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: ''
    - id: accountName
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-storage.ListContainerItems>
      description: ''
    return:
      type:
      - Promise<azure-arm-storage.ListContainerItems>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.listWithHttpOperationResponse
  name: listWithHttpOperationResponse(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: Listet alle Container, und ein Präfix wie die Datenebene wird nicht unterstützt. Richtlinien für Softwareeinschränkung gibt auch noch heute keine Fortsetzungstoken zurück.
  syntax:
    content: 'function listWithHttpOperationResponse(resourceGroupName: string, accountName: string, options?: Object)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: >
        Der Name der Ressourcengruppe im Abonnement des Benutzers. Der Name ist Groß-/Kleinschreibung.
    - id: accountName
      type:
      - string
      description: >
        Der Name des Speicherkontos, das in der angegebenen Ressourcengruppe aus. Speicherkontonamen müssen zwischen 3 und 24 Zeichen lang sein und dürfen nur Zahlen und Kleinbuchstaben enthalten.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-arm-storage.ListContainerItems>>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.lockImmutabilityPolicy
  name: lockImmutabilityPolicy(string, string, string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: Legt die immutabilitypolicy für zu gesperrten Zustand befindet. Die einzige Aktion, die für eine Richtlinie gesperrt zulässig ist ExtendImmutabilityPolicy Aktion. ETag im If-Match ist für diesen Vorgang erforderlich.
  syntax:
    content: 'function lockImmutabilityPolicy(resourceGroupName: string, accountName: string, containerName: string, ifMatch: string, options?: Object)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: >
        Der Name der Ressourcengruppe im Abonnement des Benutzers. Der Name ist Groß-/Kleinschreibung.
    - id: accountName
      type:
      - string
      description: >
        Der Name des Speicherkontos, das in der angegebenen Ressourcengruppe aus. Speicherkontonamen müssen zwischen 3 und 24 Zeichen lang sein und dürfen nur Zahlen und Kleinbuchstaben enthalten.
    - id: containerName
      type:
      - string
      description: >
        Der Name des Blob-Containers in das angegebene Speicherkonto an. BLOB-Containernamen müssen zwischen 3 und 63 Zeichen lang sein und Zahlen, Kleinbuchstaben und Bindestriche (-) nur.

        Jedem Bindestrich (-) muss unmittelbar vorangestellt und gefolgt von einem Buchstaben oder einer Zahl.
    - id: ifMatch
      type:
      - string
      description: >
        Die entitätszustandsversion (ETag) die unveränderlichkeitsrichtlinie für aktualisieren. Der Wert "*" kann verwendet werden, um die Operation angewendet werden, nur dann, wenn die unveränderlichkeitsrichtlinie für bereits vorhanden ist. Wenn nicht angegeben, wird dieser Vorgang immer angewendet werden.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-arm-storage.ImmutabilityPolicy>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.lockImmutabilityPolicy_2
  name: lockImmutabilityPolicy(string, string, string, string, Object, ServiceCallback<ImmutabilityPolicy>)
  children: []
  type: method
  langs:
  - typeScript
  summary: Legt die immutabilitypolicy für zu gesperrten Zustand befindet. Die einzige Aktion, die für eine Richtlinie gesperrt zulässig ist ExtendImmutabilityPolicy Aktion. ETag im If-Match ist für diesen Vorgang erforderlich.
  syntax:
    content: 'function lockImmutabilityPolicy(resourceGroupName: string, accountName: string, containerName: string, ifMatch: string, options: Object, callback: ServiceCallback<ImmutabilityPolicy>)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: ''
    - id: accountName
      type:
      - string
      description: ''
    - id: containerName
      type:
      - string
      description: ''
    - id: ifMatch
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-storage.ImmutabilityPolicy>
      description: ''
    return:
      type:
      - Promise<azure-arm-storage.ImmutabilityPolicy>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.lockImmutabilityPolicy_1
  name: lockImmutabilityPolicy(string, string, string, string, ServiceCallback<ImmutabilityPolicy>)
  children: []
  type: method
  langs:
  - typeScript
  summary: Legt die immutabilitypolicy für zu gesperrten Zustand befindet. Die einzige Aktion, die für eine Richtlinie gesperrt zulässig ist ExtendImmutabilityPolicy Aktion. ETag im If-Match ist für diesen Vorgang erforderlich.
  syntax:
    content: 'function lockImmutabilityPolicy(resourceGroupName: string, accountName: string, containerName: string, ifMatch: string, callback: ServiceCallback<ImmutabilityPolicy>)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: ''
    - id: accountName
      type:
      - string
      description: ''
    - id: containerName
      type:
      - string
      description: ''
    - id: ifMatch
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-storage.ImmutabilityPolicy>
      description: ''
    return:
      type:
      - Promise<azure-arm-storage.ImmutabilityPolicy>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.lockImmutabilityPolicyWithHttpOperationResponse
  name: lockImmutabilityPolicyWithHttpOperationResponse(string, string, string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: Legt die immutabilitypolicy für zu gesperrten Zustand befindet. Die einzige Aktion, die für eine Richtlinie gesperrt zulässig ist ExtendImmutabilityPolicy Aktion. ETag im If-Match ist für diesen Vorgang erforderlich.
  syntax:
    content: 'function lockImmutabilityPolicyWithHttpOperationResponse(resourceGroupName: string, accountName: string, containerName: string, ifMatch: string, options?: Object)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: >
        Der Name der Ressourcengruppe im Abonnement des Benutzers. Der Name ist Groß-/Kleinschreibung.
    - id: accountName
      type:
      - string
      description: >
        Der Name des Speicherkontos, das in der angegebenen Ressourcengruppe aus. Speicherkontonamen müssen zwischen 3 und 24 Zeichen lang sein und dürfen nur Zahlen und Kleinbuchstaben enthalten.
    - id: containerName
      type:
      - string
      description: >
        Der Name des Blob-Containers in das angegebene Speicherkonto an. BLOB-Containernamen müssen zwischen 3 und 63 Zeichen lang sein und Zahlen, Kleinbuchstaben und Bindestriche (-) nur.

        Jedem Bindestrich (-) muss unmittelbar vorangestellt und gefolgt von einem Buchstaben oder einer Zahl.
    - id: ifMatch
      type:
      - string
      description: >
        Die entitätszustandsversion (ETag) die unveränderlichkeitsrichtlinie für aktualisieren. Der Wert "*" kann verwendet werden, um die Operation angewendet werden, nur dann, wenn die unveränderlichkeitsrichtlinie für bereits vorhanden ist. Wenn nicht angegeben, wird dieser Vorgang immer angewendet werden.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-arm-storage.ImmutabilityPolicy>>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.setLegalHold
  name: setLegalHold(string, string, string, string[], Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: Zulässige Mengen enthalten Tags. Die gleichen tagergebnisse festlegen in einen idempotenten Vorgang. SetLegalHold folgt eine Muster anfügen "und" out nicht klar die vorhandenen Tags, die nicht in der Anforderung angegeben werden.
  syntax:
    content: 'function setLegalHold(resourceGroupName: string, accountName: string, containerName: string, tags: string[], options?: Object)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: >
        Der Name der Ressourcengruppe im Abonnement des Benutzers. Der Name ist Groß-/Kleinschreibung.
    - id: accountName
      type:
      - string
      description: >
        Der Name des Speicherkontos, das in der angegebenen Ressourcengruppe aus. Speicherkontonamen müssen zwischen 3 und 24 Zeichen lang sein und dürfen nur Zahlen und Kleinbuchstaben enthalten.
    - id: containerName
      type:
      - string
      description: >
        Der Name des Blob-Containers in das angegebene Speicherkonto an. BLOB-Containernamen müssen zwischen 3 und 63 Zeichen lang sein und Zahlen, Kleinbuchstaben und Bindestriche (-) nur.

        Jedem Bindestrich (-) muss unmittelbar vorangestellt und gefolgt von einem Buchstaben oder einer Zahl.
    - id: tags
      type:
      - string[]
      description: >
        Jedes Tag muss zwischen 3 und 23 alphanumerische Zeichen und ist in Kleinbuchstaben an Richtlinien für Softwareeinschränkung normalisiert.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-arm-storage.LegalHold>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.setLegalHold_2
  name: setLegalHold(string, string, string, string[], Object, ServiceCallback<LegalHold>)
  children: []
  type: method
  langs:
  - typeScript
  summary: Zulässige Mengen enthalten Tags. Die gleichen tagergebnisse festlegen in einen idempotenten Vorgang. SetLegalHold folgt eine Muster anfügen "und" out nicht klar die vorhandenen Tags, die nicht in der Anforderung angegeben werden.
  syntax:
    content: 'function setLegalHold(resourceGroupName: string, accountName: string, containerName: string, tags: string[], options: Object, callback: ServiceCallback<LegalHold>)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: ''
    - id: accountName
      type:
      - string
      description: ''
    - id: containerName
      type:
      - string
      description: ''
    - id: tags
      type:
      - string[]
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-storage.LegalHold>
      description: ''
    return:
      type:
      - Promise<azure-arm-storage.LegalHold>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.setLegalHold_1
  name: setLegalHold(string, string, string, string[], ServiceCallback<LegalHold>)
  children: []
  type: method
  langs:
  - typeScript
  summary: Zulässige Mengen enthalten Tags. Die gleichen tagergebnisse festlegen in einen idempotenten Vorgang. SetLegalHold folgt eine Muster anfügen "und" out nicht klar die vorhandenen Tags, die nicht in der Anforderung angegeben werden.
  syntax:
    content: 'function setLegalHold(resourceGroupName: string, accountName: string, containerName: string, tags: string[], callback: ServiceCallback<LegalHold>)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: ''
    - id: accountName
      type:
      - string
      description: ''
    - id: containerName
      type:
      - string
      description: ''
    - id: tags
      type:
      - string[]
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-storage.LegalHold>
      description: ''
    return:
      type:
      - Promise<azure-arm-storage.LegalHold>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.setLegalHoldWithHttpOperationResponse
  name: setLegalHoldWithHttpOperationResponse(string, string, string, string[], Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: Zulässige Mengen enthalten Tags. Die gleichen tagergebnisse festlegen in einen idempotenten Vorgang. SetLegalHold folgt eine Muster anfügen "und" out nicht klar die vorhandenen Tags, die nicht in der Anforderung angegeben werden.
  syntax:
    content: 'function setLegalHoldWithHttpOperationResponse(resourceGroupName: string, accountName: string, containerName: string, tags: string[], options?: Object)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: >
        Der Name der Ressourcengruppe im Abonnement des Benutzers. Der Name ist Groß-/Kleinschreibung.
    - id: accountName
      type:
      - string
      description: >
        Der Name des Speicherkontos, das in der angegebenen Ressourcengruppe aus. Speicherkontonamen müssen zwischen 3 und 24 Zeichen lang sein und dürfen nur Zahlen und Kleinbuchstaben enthalten.
    - id: containerName
      type:
      - string
      description: >
        Der Name des Blob-Containers in das angegebene Speicherkonto an. BLOB-Containernamen müssen zwischen 3 und 63 Zeichen lang sein und Zahlen, Kleinbuchstaben und Bindestriche (-) nur.

        Jedem Bindestrich (-) muss unmittelbar vorangestellt und gefolgt von einem Buchstaben oder einer Zahl.
    - id: tags
      type:
      - string[]
      description: >
        Jedes Tag muss zwischen 3 und 23 alphanumerische Zeichen und ist in Kleinbuchstaben an Richtlinien für Softwareeinschränkung normalisiert.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-arm-storage.LegalHold>>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.update
  name: update(string, string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: Aktualisiert die Containereigenschaften im Anforderungstext angegeben. Eigenschaften, die nicht in der Anforderung erwähnt werden nicht geändert werden. Update schlägt fehl, wenn der angegebene Container nicht bereits vorhanden ist.
  syntax:
    content: 'function update(resourceGroupName: string, accountName: string, containerName: string, options?: Object)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: >
        Der Name der Ressourcengruppe im Abonnement des Benutzers. Der Name ist Groß-/Kleinschreibung.
    - id: accountName
      type:
      - string
      description: >
        Der Name des Speicherkontos, das in der angegebenen Ressourcengruppe aus. Speicherkontonamen müssen zwischen 3 und 24 Zeichen lang sein und dürfen nur Zahlen und Kleinbuchstaben enthalten.
    - id: containerName
      type:
      - string
      description: >
        Der Name des Blob-Containers in das angegebene Speicherkonto an. BLOB-Containernamen müssen zwischen 3 und 63 Zeichen lang sein und Zahlen, Kleinbuchstaben und Bindestriche (-) nur.

        Jedem Bindestrich (-) muss unmittelbar vorangestellt und gefolgt von einem Buchstaben oder einer Zahl.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-arm-storage.BlobContainer>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.update_2
  name: update(string, string, string, Object, ServiceCallback<BlobContainer>)
  children: []
  type: method
  langs:
  - typeScript
  summary: Aktualisiert die Containereigenschaften im Anforderungstext angegeben. Eigenschaften, die nicht in der Anforderung erwähnt werden nicht geändert werden. Update schlägt fehl, wenn der angegebene Container nicht bereits vorhanden ist.
  syntax:
    content: 'function update(resourceGroupName: string, accountName: string, containerName: string, options: Object, callback: ServiceCallback<BlobContainer>)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: ''
    - id: accountName
      type:
      - string
      description: ''
    - id: containerName
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-storage.BlobContainer>
      description: ''
    return:
      type:
      - Promise<azure-arm-storage.BlobContainer>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.update_1
  name: update(string, string, string, ServiceCallback<BlobContainer>)
  children: []
  type: method
  langs:
  - typeScript
  summary: Aktualisiert die Containereigenschaften im Anforderungstext angegeben. Eigenschaften, die nicht in der Anforderung erwähnt werden nicht geändert werden. Update schlägt fehl, wenn der angegebene Container nicht bereits vorhanden ist.
  syntax:
    content: 'function update(resourceGroupName: string, accountName: string, containerName: string, callback: ServiceCallback<BlobContainer>)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: ''
    - id: accountName
      type:
      - string
      description: ''
    - id: containerName
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-arm-storage.BlobContainer>
      description: ''
    return:
      type:
      - Promise<azure-arm-storage.BlobContainer>
  package: azure-arm-storage
- uid: azure-arm-storage.BlobContainers.updateWithHttpOperationResponse
  name: updateWithHttpOperationResponse(string, string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: Aktualisiert die Containereigenschaften im Anforderungstext angegeben. Eigenschaften, die nicht in der Anforderung erwähnt werden nicht geändert werden. Update schlägt fehl, wenn der angegebene Container nicht bereits vorhanden ist.
  syntax:
    content: 'function updateWithHttpOperationResponse(resourceGroupName: string, accountName: string, containerName: string, options?: Object)'
    parameters:
    - id: resourceGroupName
      type:
      - string
      description: >
        Der Name der Ressourcengruppe im Abonnement des Benutzers. Der Name ist Groß-/Kleinschreibung.
    - id: accountName
      type:
      - string
      description: >
        Der Name des Speicherkontos, das in der angegebenen Ressourcengruppe aus. Speicherkontonamen müssen zwischen 3 und 24 Zeichen lang sein und dürfen nur Zahlen und Kleinbuchstaben enthalten.
    - id: containerName
      type:
      - string
      description: >
        Der Name des Blob-Containers in das angegebene Speicherkonto an. BLOB-Containernamen müssen zwischen 3 und 63 Zeichen lang sein und Zahlen, Kleinbuchstaben und Bindestriche (-) nur.

        Jedem Bindestrich (-) muss unmittelbar vorangestellt und gefolgt von einem Buchstaben oder einer Zahl.
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-arm-storage.BlobContainer>>
  package: azure-arm-storage
references:
- uid: Promise<azure-arm-storage.LegalHold>
  name: LegalHold>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: LegalHold
    fullName: LegalHold
    uid: azure-arm-storage.LegalHold
  - name: '>'
    fullName: '>'
- uid: ServiceCallback<azure-arm-storage.LegalHold>
  name: LegalHold>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: LegalHold
    fullName: LegalHold
    uid: azure-arm-storage.LegalHold
  - name: '>'
    fullName: '>'
- uid: Promise<HttpOperationResponse<azure-arm-storage.LegalHold>>
  name: LegalHold>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: LegalHold
    fullName: LegalHold
    uid: azure-arm-storage.LegalHold
  - name: '>>'
    fullName: '>>'
- uid: Promise<azure-arm-storage.BlobContainer>
  name: BlobContainer>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: BlobContainer
    fullName: BlobContainer
    uid: azure-arm-storage.BlobContainer
  - name: '>'
    fullName: '>'
- uid: ServiceCallback<azure-arm-storage.BlobContainer>
  name: BlobContainer>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: BlobContainer
    fullName: BlobContainer
    uid: azure-arm-storage.BlobContainer
  - name: '>'
    fullName: '>'
- uid: Promise<azure-arm-storage.ImmutabilityPolicy>
  name: ImmutabilityPolicy>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: ImmutabilityPolicy
    fullName: ImmutabilityPolicy
    uid: azure-arm-storage.ImmutabilityPolicy
  - name: '>'
    fullName: '>'
- uid: ServiceCallback<azure-arm-storage.ImmutabilityPolicy>
  name: ImmutabilityPolicy>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: ImmutabilityPolicy
    fullName: ImmutabilityPolicy
    uid: azure-arm-storage.ImmutabilityPolicy
  - name: '>'
    fullName: '>'
- uid: Promise<HttpOperationResponse<azure-arm-storage.ImmutabilityPolicy>>
  name: ImmutabilityPolicy>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: ImmutabilityPolicy
    fullName: ImmutabilityPolicy
    uid: azure-arm-storage.ImmutabilityPolicy
  - name: '>>'
    fullName: '>>'
- uid: Promise<HttpOperationResponse<azure-arm-storage.BlobContainer>>
  name: BlobContainer>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: BlobContainer
    fullName: BlobContainer
    uid: azure-arm-storage.BlobContainer
  - name: '>>'
    fullName: '>>'
- uid: Promise<azure-arm-storage.ListContainerItems>
  name: ListContainerItems>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: ListContainerItems
    fullName: ListContainerItems
    uid: azure-arm-storage.ListContainerItems
  - name: '>'
    fullName: '>'
- uid: ServiceCallback<azure-arm-storage.ListContainerItems>
  name: ListContainerItems>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: ListContainerItems
    fullName: ListContainerItems
    uid: azure-arm-storage.ListContainerItems
  - name: '>'
    fullName: '>'
- uid: Promise<HttpOperationResponse<azure-arm-storage.ListContainerItems>>
  name: ListContainerItems>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: ListContainerItems
    fullName: ListContainerItems
    uid: azure-arm-storage.ListContainerItems
  - name: '>>'
    fullName: '>>'
