### YamlMime:UniversalReference
items:
  - uid: '@azure/storage-datalake.PathOperations'
    name: PathOperations
    fullName: PathOperations
    children:
      - '@azure/storage-datalake.PathOperations.create'
      - '@azure/storage-datalake.PathOperations.create_2'
      - '@azure/storage-datalake.PathOperations.create_1'
      - '@azure/storage-datalake.PathOperations.deleteMethod'
      - '@azure/storage-datalake.PathOperations.deleteMethod_2'
      - '@azure/storage-datalake.PathOperations.deleteMethod_1'
      - '@azure/storage-datalake.PathOperations.getProperties'
      - '@azure/storage-datalake.PathOperations.getProperties_2'
      - '@azure/storage-datalake.PathOperations.getProperties_1'
      - '@azure/storage-datalake.PathOperations.lease'
      - '@azure/storage-datalake.PathOperations.lease_2'
      - '@azure/storage-datalake.PathOperations.lease_1'
      - '@azure/storage-datalake.PathOperations.list'
      - '@azure/storage-datalake.PathOperations.list_2'
      - '@azure/storage-datalake.PathOperations.list_1'
      - '@azure/storage-datalake.PathOperations.constructor'
      - '@azure/storage-datalake.PathOperations.read'
      - '@azure/storage-datalake.PathOperations.read_2'
      - '@azure/storage-datalake.PathOperations.read_1'
      - '@azure/storage-datalake.PathOperations.update'
      - '@azure/storage-datalake.PathOperations.update_2'
      - '@azure/storage-datalake.PathOperations.update_1'
    langs:
      - typeScript
    type: class
    summary: 'Klasse, die eine PathOperations darstellt.'
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.create'
    name: 'create(string, string, Models.PathCreateOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Erstellen Sie oder benennen Sie eine Datei oder ein Verzeichnis.    Standardmäßig wird das Ziel wird überschrieben, und wenn das Ziel bereits vorhanden und verfügt über eine Lease die Lease unterbrochen wird.  Dieser Vorgang unterstützt bedingte HTTP-Anforderungen.  Weitere Informationen finden Sie unter [angeben von bedingten Headern für Vorgänge des Blob-Dienst](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
      Um Fehler auftreten, wenn das Ziel bereits vorhanden ist, verwenden Sie eine bedingte Anforderung mit If-None-Match: "*".
    syntax:
      content: 'function create(filesystem: string, path: string, options?: Models.PathCreateOptionalParams)'
      parameters:
        - id: filesystem
          type:
            - string
          description: Der Dateisystem-Bezeichner.
        - id: path
          type:
            - string
          description: Die Datei- oder Verzeichnispfad.
        - id: options
          type:
            - Models.PathCreateOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.PathCreateResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.create_2'
    name: 'create(string, string, PathCreateOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function create(filesystem: string, path: string, options: PathCreateOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: filesystem
          type:
            - string
          description: Der Dateisystem-Bezeichner.
        - id: path
          type:
            - string
          description: Die Datei- oder Verzeichnispfad.
        - id: options
          type:
            - '@azure/storage-datalake.PathCreateOptionalParams'
          description: Die optionalen Parameter
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Der Rückruf
      return:
        type:
          - Promise<Models.PathCreateResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.create_1'
    name: 'create(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function create(filesystem: string, path: string, callback: ServiceCallback<void>)'
      parameters:
        - id: filesystem
          type:
            - string
          description: Der Dateisystem-Bezeichner.
        - id: path
          type:
            - string
          description: Die Datei- oder Verzeichnispfad.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Der Rückruf
      return:
        type:
          - Promise<Models.PathCreateResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.deleteMethod'
    name: 'deleteMethod(string, string, Models.PathDeleteMethodOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Löschen Sie die Datei oder das Verzeichnis an. Dieser Vorgang unterstützt bedingte HTTP-Anforderungen.  Weitere Informationen finden Sie unter [angeben von bedingten Headern für Vorgänge des Blob-Dienst](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).'
    syntax:
      content: 'function deleteMethod(filesystem: string, path: string, options?: Models.PathDeleteMethodOptionalParams)'
      parameters:
        - id: filesystem
          type:
            - string
          description: Der Dateisystem-Bezeichner.
        - id: path
          type:
            - string
          description: Die Datei- oder Verzeichnispfad.
        - id: options
          type:
            - Models.PathDeleteMethodOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.PathDeleteResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.deleteMethod_2'
    name: 'deleteMethod(string, string, PathDeleteMethodOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteMethod(filesystem: string, path: string, options: PathDeleteMethodOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: filesystem
          type:
            - string
          description: Der Dateisystem-Bezeichner.
        - id: path
          type:
            - string
          description: Die Datei- oder Verzeichnispfad.
        - id: options
          type:
            - '@azure/storage-datalake.PathDeleteMethodOptionalParams'
          description: Die optionalen Parameter
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Der Rückruf
      return:
        type:
          - Promise<Models.PathDeleteResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.deleteMethod_1'
    name: 'deleteMethod(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteMethod(filesystem: string, path: string, callback: ServiceCallback<void>)'
      parameters:
        - id: filesystem
          type:
            - string
          description: Der Dateisystem-Bezeichner.
        - id: path
          type:
            - string
          description: Die Datei- oder Verzeichnispfad.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Der Rückruf
      return:
        type:
          - Promise<Models.PathDeleteResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.getProperties'
    name: 'getProperties(string, string, Models.PathGetPropertiesOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Rufen Sie die Eigenschaften für eine Datei oder ein Verzeichnis, und optional die Zugriffssteuerungsliste.
      Dieser Vorgang unterstützt bedingte HTTP-Anforderungen.  Weitere Informationen finden Sie unter [angeben von bedingten Headern für Vorgänge des Blob-Dienst](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
    syntax:
      content: 'function getProperties(filesystem: string, path: string, options?: Models.PathGetPropertiesOptionalParams)'
      parameters:
        - id: filesystem
          type:
            - string
          description: Der Dateisystem-Bezeichner.
        - id: path
          type:
            - string
          description: Die Datei- oder Verzeichnispfad.
        - id: options
          type:
            - Models.PathGetPropertiesOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.PathGetPropertiesResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.getProperties_2'
    name: 'getProperties(string, string, PathGetPropertiesOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getProperties(filesystem: string, path: string, options: PathGetPropertiesOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: filesystem
          type:
            - string
          description: Der Dateisystem-Bezeichner.
        - id: path
          type:
            - string
          description: Die Datei- oder Verzeichnispfad.
        - id: options
          type:
            - '@azure/storage-datalake.PathGetPropertiesOptionalParams'
          description: Die optionalen Parameter
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Der Rückruf
      return:
        type:
          - Promise<Models.PathGetPropertiesResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.getProperties_1'
    name: 'getProperties(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getProperties(filesystem: string, path: string, callback: ServiceCallback<void>)'
      parameters:
        - id: filesystem
          type:
            - string
          description: Der Dateisystem-Bezeichner.
        - id: path
          type:
            - string
          description: Die Datei- oder Verzeichnispfad.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Der Rückruf
      return:
        type:
          - Promise<Models.PathGetPropertiesResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.lease'
    name: 'lease(Models.PathLeaseAction, string, string, Models.PathLeaseOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Erstellen und Verwalten einer Leases zum Einschränken von schreiben und Löschen von Zugriff auf den Pfad. Dieser Vorgang unterstützt bedingte HTTP-Anforderungen.  Weitere Informationen finden Sie unter [angeben von bedingten Headern für Vorgänge des Blob-Dienst](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).'
    syntax:
      content: 'function lease(xMsLeaseAction: Models.PathLeaseAction, filesystem: string, path: string, options?: Models.PathLeaseOptionalParams)'
      parameters:
        - id: xMsLeaseAction
          type:
            - Models.PathLeaseAction
          description: |-
            Es gibt fünf Aktionen leasen: "abrufen", "break", "ändern", "renew" und "release". Verwenden Sie "abrufen", und geben Sie den "X-ms-vorgeschlagene-Lease-Id" und "X-ms-Lease-Duration", eine neue Lease abzurufen. Verwenden Sie "break", um eine vorhandene Lease zu unterbrechen. Wenn eine Lease unterbrochen wurde, ist der Unterbrechungszeitraum Lease zulässig leaseunterbrechungszeitraums abgewartet, während dieses Zeitraums keine leasevorgänge mit Ausnahme von Break und Version, die für die Datei ausgeführt werden kann. Wenn eine Lease erfolgreich unterbrochen wurde, gibt die Antwort das Intervall in Sekunden, bis eine neue Lease abgerufen werden kann. Verwenden "ändern", und geben Sie die aktuelle Lease-ID in "X-ms-Lease-Id" und die neue Lease-ID in "X-ms-vorgeschlagene-Lease-Id", um die Lease-ID einer aktiven Lease zu ändern. Verwenden Sie "renew", und geben Sie den "X-ms-Lease-Id" um eine vorhandene Lease zu erneuern.
            Verwenden Sie "Release", und geben Sie den "X-ms-Lease-Id" zum Freigeben einer Leases. Folgende Werte sind möglich: "abrufen", "break", "ändern", "Erneuern", "release"
        - id: filesystem
          type:
            - string
          description: Der Dateisystem-Bezeichner.
        - id: path
          type:
            - string
          description: Die Datei- oder Verzeichnispfad.
        - id: options
          type:
            - Models.PathLeaseOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.PathLeaseResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.lease_2'
    name: 'lease(Models.PathLeaseAction, string, string, PathLeaseOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function lease(xMsLeaseAction: Models.PathLeaseAction, filesystem: string, path: string, options: PathLeaseOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: xMsLeaseAction
          type:
            - Models.PathLeaseAction
          description: |-
            Es gibt fünf Aktionen leasen: "abrufen", "break", "ändern", "renew" und "release". Verwenden Sie "abrufen", und geben Sie den "X-ms-vorgeschlagene-Lease-Id" und "X-ms-Lease-Duration", eine neue Lease abzurufen. Verwenden Sie "break", um eine vorhandene Lease zu unterbrechen. Wenn eine Lease unterbrochen wurde, ist der Unterbrechungszeitraum Lease zulässig leaseunterbrechungszeitraums abgewartet, während dieses Zeitraums keine leasevorgänge mit Ausnahme von Break und Version, die für die Datei ausgeführt werden kann. Wenn eine Lease erfolgreich unterbrochen wurde, gibt die Antwort das Intervall in Sekunden, bis eine neue Lease abgerufen werden kann. Verwenden "ändern", und geben Sie die aktuelle Lease-ID in "X-ms-Lease-Id" und die neue Lease-ID in "X-ms-vorgeschlagene-Lease-Id", um die Lease-ID einer aktiven Lease zu ändern. Verwenden Sie "renew", und geben Sie den "X-ms-Lease-Id" um eine vorhandene Lease zu erneuern.
            Verwenden Sie "Release", und geben Sie den "X-ms-Lease-Id" zum Freigeben einer Leases. Folgende Werte sind möglich: "abrufen", "break", "ändern", "Erneuern", "release"
        - id: filesystem
          type:
            - string
          description: Der Dateisystem-Bezeichner.
        - id: path
          type:
            - string
          description: Die Datei- oder Verzeichnispfad.
        - id: options
          type:
            - '@azure/storage-datalake.PathLeaseOptionalParams'
          description: Die optionalen Parameter
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Der Rückruf
      return:
        type:
          - Promise<Models.PathLeaseResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.lease_1'
    name: 'lease(Models.PathLeaseAction, string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function lease(xMsLeaseAction: Models.PathLeaseAction, filesystem: string, path: string, callback: ServiceCallback<void>)'
      parameters:
        - id: xMsLeaseAction
          type:
            - Models.PathLeaseAction
          description: |-
            Es gibt fünf Aktionen leasen: "abrufen", "break", "ändern", "renew" und "release". Verwenden Sie "abrufen", und geben Sie den "X-ms-vorgeschlagene-Lease-Id" und "X-ms-Lease-Duration", eine neue Lease abzurufen. Verwenden Sie "break", um eine vorhandene Lease zu unterbrechen. Wenn eine Lease unterbrochen wurde, ist der Unterbrechungszeitraum Lease zulässig leaseunterbrechungszeitraums abgewartet, während dieses Zeitraums keine leasevorgänge mit Ausnahme von Break und Version, die für die Datei ausgeführt werden kann. Wenn eine Lease erfolgreich unterbrochen wurde, gibt die Antwort das Intervall in Sekunden, bis eine neue Lease abgerufen werden kann. Verwenden "ändern", und geben Sie die aktuelle Lease-ID in "X-ms-Lease-Id" und die neue Lease-ID in "X-ms-vorgeschlagene-Lease-Id", um die Lease-ID einer aktiven Lease zu ändern. Verwenden Sie "renew", und geben Sie den "X-ms-Lease-Id" um eine vorhandene Lease zu erneuern.
            Verwenden Sie "Release", und geben Sie den "X-ms-Lease-Id" zum Freigeben einer Leases. Folgende Werte sind möglich: "abrufen", "break", "ändern", "Erneuern", "release"
        - id: filesystem
          type:
            - string
          description: Der Dateisystem-Bezeichner.
        - id: path
          type:
            - string
          description: Die Datei- oder Verzeichnispfad.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Der Rückruf
      return:
        type:
          - Promise<Models.PathLeaseResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.list'
    name: 'list(boolean, string, Models.PathListOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Dateisystem-Pfade und deren Eigenschaften auflisten.
    syntax:
      content: 'function list(recursive: boolean, filesystem: string, options?: Models.PathListOptionalParams)'
      parameters:
        - id: recursive
          type:
            - boolean
          description: 'Wenn "true", werden alle Pfade aufgeführt; Andernfalls werden nur die Pfade im Stammverzeichnis des Dateisystems aufgeführt.  Wenn "Directory" angegeben ist, wird die Liste nur Pfade enthalten, die den gleichen Stamm gemeinsam nutzen.'
        - id: filesystem
          type:
            - string
          description: 'Der Dateisystem-Bezeichner.  Der Wert muss beginnen und enden mit einem Buchstaben oder Zahl sein und darf nur Buchstaben, Zahlen und Bindestriche (-) enthalten.  Aufeinander folgende Bindestriche sind nicht zulässig.  Alle Buchstaben müssen klein geschrieben sein.  Der Wert muss zwischen 3 und 63 Zeichen enthalten.'
        - id: options
          type:
            - Models.PathListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.PathListResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.list_2'
    name: 'list(boolean, string, PathListOptionalParams, ServiceCallback<PathList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function list(recursive: boolean, filesystem: string, options: PathListOptionalParams, callback: ServiceCallback<PathList>)'
      parameters:
        - id: recursive
          type:
            - boolean
          description: 'Wenn "true", werden alle Pfade aufgeführt; Andernfalls werden nur die Pfade im Stammverzeichnis des Dateisystems aufgeführt.  Wenn "Directory" angegeben ist, wird die Liste nur Pfade enthalten, die den gleichen Stamm gemeinsam nutzen.'
        - id: filesystem
          type:
            - string
          description: 'Der Dateisystem-Bezeichner.  Der Wert muss beginnen und enden mit einem Buchstaben oder Zahl sein und darf nur Buchstaben, Zahlen und Bindestriche (-) enthalten.  Aufeinander folgende Bindestriche sind nicht zulässig.  Alle Buchstaben müssen klein geschrieben sein.  Der Wert muss zwischen 3 und 63 Zeichen enthalten.'
        - id: options
          type:
            - '@azure/storage-datalake.PathListOptionalParams'
          description: Die optionalen Parameter
        - id: callback
          type:
            - ServiceCallback<@azure/storage-datalake.PathList>
          description: |
            Der Rückruf
      return:
        type:
          - Promise<Models.PathListResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.list_1'
    name: 'list(boolean, string, ServiceCallback<PathList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function list(recursive: boolean, filesystem: string, callback: ServiceCallback<PathList>)'
      parameters:
        - id: recursive
          type:
            - boolean
          description: 'Wenn "true", werden alle Pfade aufgeführt; Andernfalls werden nur die Pfade im Stammverzeichnis des Dateisystems aufgeführt.  Wenn "Directory" angegeben ist, wird die Liste nur Pfade enthalten, die den gleichen Stamm gemeinsam nutzen.'
        - id: filesystem
          type:
            - string
          description: 'Der Dateisystem-Bezeichner.  Der Wert muss beginnen und enden mit einem Buchstaben oder Zahl sein und darf nur Buchstaben, Zahlen und Bindestriche (-) enthalten.  Aufeinander folgende Bindestriche sind nicht zulässig.  Alle Buchstaben müssen klein geschrieben sein.  Der Wert muss zwischen 3 und 63 Zeichen enthalten.'
        - id: callback
          type:
            - ServiceCallback<@azure/storage-datalake.PathList>
          description: |
            Der Rückruf
      return:
        type:
          - Promise<Models.PathListResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.constructor'
    name: PathOperations(DataLakeStorageClientContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Erstellen Sie eine PathOperations.
    syntax:
      content: 'new PathOperations(client: DataLakeStorageClientContext)'
      parameters:
        - id: client
          type:
            - '@azure/storage-datalake.DataLakeStorageClientContext'
          description: |
            Verweis auf den Dienstclient.
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.read'
    name: 'read(string, string, Models.PathReadOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Lesen Sie den Inhalt einer Datei.  Bei Lesevorgängen werden bereichsanforderungen unterstützt. Dieser Vorgang unterstützt bedingte HTTP-Anforderungen.  Weitere Informationen finden Sie unter [angeben von bedingten Headern für Vorgänge des Blob-Dienst](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).'
    syntax:
      content: 'function read(filesystem: string, path: string, options?: Models.PathReadOptionalParams)'
      parameters:
        - id: filesystem
          type:
            - string
          description: Der Dateisystem-Bezeichner.
        - id: path
          type:
            - string
          description: Die Datei- oder Verzeichnispfad.
        - id: options
          type:
            - Models.PathReadOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.PathReadResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.read_2'
    name: 'read(string, string, PathReadOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function read(filesystem: string, path: string, options: PathReadOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: filesystem
          type:
            - string
          description: Der Dateisystem-Bezeichner.
        - id: path
          type:
            - string
          description: Die Datei- oder Verzeichnispfad.
        - id: options
          type:
            - '@azure/storage-datalake.PathReadOptionalParams'
          description: Die optionalen Parameter
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Der Rückruf
      return:
        type:
          - Promise<Models.PathReadResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.read_1'
    name: 'read(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function read(filesystem: string, path: string, callback: ServiceCallback<void>)'
      parameters:
        - id: filesystem
          type:
            - string
          description: Der Dateisystem-Bezeichner.
        - id: path
          type:
            - string
          description: Die Datei- oder Verzeichnispfad.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Der Rückruf
      return:
        type:
          - Promise<Models.PathReadResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.update'
    name: 'update(Models.PathUpdateAction, string, string, Models.PathUpdateOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Lädt Daten in eine Datei angefügt werden, zuvor hochgeladene Daten (Schreiben) in eine Datei geleert, legt Eigenschaften für eine Datei oder ein Verzeichnis fest oder legt die Steuerung des Zugriffs auf eine Datei oder ein Verzeichnis fest. Daten können nur an eine Datei angefügt werden. Dieser Vorgang unterstützt bedingte HTTP-Anforderungen. Weitere Informationen finden Sie unter [angeben von bedingten Headern für Vorgänge des Blob-Dienst](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).'
    syntax:
      content: 'function update(action: Models.PathUpdateAction, filesystem: string, path: string, options?: Models.PathUpdateOptionalParams)'
      parameters:
        - id: action
          type:
            - Models.PathUpdateAction
          description: 'Die Aktion muss "Anfügen" zum Hochladen von Daten, eine Datei "leeren" angefügt werden soll, um die zuvor hochgeladene Daten in eine Datei, "SetProperties" zum Festlegen der Eigenschaften einer Datei zu leeren oder Verzeichnis "SetAccessControl" zum Festlegen des Besitzers, zu gruppieren, Berechtigungen oder Zugriffssteuerungsliste für eine Datei oder ein Verzeichnis.  Beachten Sie, dass hierarchischen Namespace für das Konto aktiviert werden muss, um Access Control verwenden.  Beachten Sie, dass die Zugriffssteuerungsliste (ACL) verfügt über Berechtigungen für den Besitzer, die zuständige Gruppe und anderen Benutzern, damit die X-ms-Berechtigungen und die X-ms-Acl-Anforderungsheader gegenseitig. Folgende Werte sind möglich: "Anfügen", "flush", "SetProperties", "SetAccessControl"'
        - id: filesystem
          type:
            - string
          description: Der Dateisystem-Bezeichner.
        - id: path
          type:
            - string
          description: Die Datei- oder Verzeichnispfad.
        - id: options
          type:
            - Models.PathUpdateOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.PathUpdateResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.update_2'
    name: 'update(Models.PathUpdateAction, string, string, PathUpdateOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function update(action: Models.PathUpdateAction, filesystem: string, path: string, options: PathUpdateOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: action
          type:
            - Models.PathUpdateAction
          description: 'Die Aktion muss "Anfügen" zum Hochladen von Daten, eine Datei "leeren" angefügt werden soll, um die zuvor hochgeladene Daten in eine Datei, "SetProperties" zum Festlegen der Eigenschaften einer Datei zu leeren oder Verzeichnis "SetAccessControl" zum Festlegen des Besitzers, zu gruppieren, Berechtigungen oder Zugriffssteuerungsliste für eine Datei oder ein Verzeichnis.  Beachten Sie, dass hierarchischen Namespace für das Konto aktiviert werden muss, um Access Control verwenden.  Beachten Sie, dass die Zugriffssteuerungsliste (ACL) verfügt über Berechtigungen für den Besitzer, die zuständige Gruppe und anderen Benutzern, damit die X-ms-Berechtigungen und die X-ms-Acl-Anforderungsheader gegenseitig. Folgende Werte sind möglich: "Anfügen", "flush", "SetProperties", "SetAccessControl"'
        - id: filesystem
          type:
            - string
          description: Der Dateisystem-Bezeichner.
        - id: path
          type:
            - string
          description: Die Datei- oder Verzeichnispfad.
        - id: options
          type:
            - '@azure/storage-datalake.PathUpdateOptionalParams'
          description: Die optionalen Parameter
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Der Rückruf
      return:
        type:
          - Promise<Models.PathUpdateResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.update_1'
    name: 'update(Models.PathUpdateAction, string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function update(action: Models.PathUpdateAction, filesystem: string, path: string, callback: ServiceCallback<void>)'
      parameters:
        - id: action
          type:
            - Models.PathUpdateAction
          description: 'Die Aktion muss "Anfügen" zum Hochladen von Daten, eine Datei "leeren" angefügt werden soll, um die zuvor hochgeladene Daten in eine Datei, "SetProperties" zum Festlegen der Eigenschaften einer Datei zu leeren oder Verzeichnis "SetAccessControl" zum Festlegen des Besitzers, zu gruppieren, Berechtigungen oder Zugriffssteuerungsliste für eine Datei oder ein Verzeichnis.  Beachten Sie, dass hierarchischen Namespace für das Konto aktiviert werden muss, um Access Control verwenden.  Beachten Sie, dass die Zugriffssteuerungsliste (ACL) verfügt über Berechtigungen für den Besitzer, die zuständige Gruppe und anderen Benutzern, damit die X-ms-Berechtigungen und die X-ms-Acl-Anforderungsheader gegenseitig. Folgende Werte sind möglich: "Anfügen", "flush", "SetProperties", "SetAccessControl"'
        - id: filesystem
          type:
            - string
          description: Der Dateisystem-Bezeichner.
        - id: path
          type:
            - string
          description: Die Datei- oder Verzeichnispfad.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            Der Rückruf
      return:
        type:
          - Promise<Models.PathUpdateResponse>
    package: '@azure/storage-datalake'
references:
  - uid: '@azure/storage-datalake.DataLakeStorageClientContext'
    name: DataLakeStorageClientContext
    spec.typeScript:
      - name: DataLakeStorageClientContext
        fullName: DataLakeStorageClientContext
        uid: '@azure/storage-datalake.DataLakeStorageClientContext'
  - uid: '@azure/storage-datalake.PathCreateOptionalParams'
    name: PathCreateOptionalParams
    spec.typeScript:
      - name: PathCreateOptionalParams
        fullName: PathCreateOptionalParams
        uid: '@azure/storage-datalake.PathCreateOptionalParams'
  - uid: '@azure/storage-datalake.PathDeleteMethodOptionalParams'
    name: PathDeleteMethodOptionalParams
    spec.typeScript:
      - name: PathDeleteMethodOptionalParams
        fullName: PathDeleteMethodOptionalParams
        uid: '@azure/storage-datalake.PathDeleteMethodOptionalParams'
  - uid: '@azure/storage-datalake.PathGetPropertiesOptionalParams'
    name: PathGetPropertiesOptionalParams
    spec.typeScript:
      - name: PathGetPropertiesOptionalParams
        fullName: PathGetPropertiesOptionalParams
        uid: '@azure/storage-datalake.PathGetPropertiesOptionalParams'
  - uid: '@azure/storage-datalake.PathLeaseOptionalParams'
    name: PathLeaseOptionalParams
    spec.typeScript:
      - name: PathLeaseOptionalParams
        fullName: PathLeaseOptionalParams
        uid: '@azure/storage-datalake.PathLeaseOptionalParams'
  - uid: ServiceCallback<@azure/storage-datalake.PathList>
    name: PathList>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PathList
        fullName: PathList
        uid: '@azure/storage-datalake.PathList'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-datalake.PathListOptionalParams'
    name: PathListOptionalParams
    spec.typeScript:
      - name: PathListOptionalParams
        fullName: PathListOptionalParams
        uid: '@azure/storage-datalake.PathListOptionalParams'
  - uid: '@azure/storage-datalake.PathReadOptionalParams'
    name: PathReadOptionalParams
    spec.typeScript:
      - name: PathReadOptionalParams
        fullName: PathReadOptionalParams
        uid: '@azure/storage-datalake.PathReadOptionalParams'
  - uid: '@azure/storage-datalake.PathUpdateOptionalParams'
    name: PathUpdateOptionalParams
    spec.typeScript:
      - name: PathUpdateOptionalParams
        fullName: PathUpdateOptionalParams
        uid: '@azure/storage-datalake.PathUpdateOptionalParams'