### YamlMime:UniversalReference
items:
  - uid: '@azure/ms-rest-azure-js.LROPoller'
    name: LROPoller
    fullName: LROPoller
    children:
      - '@azure/ms-rest-azure-js.LROPoller.getInitialResponse'
      - '@azure/ms-rest-azure-js.LROPoller.getMostRecentResponse'
      - '@azure/ms-rest-azure-js.LROPoller.getOperationResponse'
      - '@azure/ms-rest-azure-js.LROPoller.getOperationStatus'
      - '@azure/ms-rest-azure-js.LROPoller.getPollState'
      - '@azure/ms-rest-azure-js.LROPoller.isFinalStatusAcceptable'
      - '@azure/ms-rest-azure-js.LROPoller.isFinished'
      - '@azure/ms-rest-azure-js.LROPoller.constructor'
      - '@azure/ms-rest-azure-js.LROPoller.poll'
      - '@azure/ms-rest-azure-js.LROPoller.pollUntilFinished'
    langs:
      - typeScript
    type: class
    summary: '<span data-ttu-id="829d2-101">Eine HTTP-Operation-Antwort, die spezielle Methoden für die Interaktion mit LROs bereitstellt (lang andauernde Vorgänge).</span><span class="sxs-lookup"><span data-stu-id="829d2-101">An HTTP operation response that provides special methods for interacting with LROs (long running operations).</span></span>'
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.getInitialResponse'
    name: getInitialResponse()
    children: []
    type: method
    langs:
      - typeScript
    summary: '<span data-ttu-id="829d2-102">Rufen Sie die erste Antwort, die der Dienst gesendet werden, bei der LRO initiiert wurde.</span><span class="sxs-lookup"><span data-stu-id="829d2-102">Get the first response that the service sent back when the LRO was initiated.</span></span>'
    syntax:
      content: function getInitialResponse()
      parameters: []
      return:
        type:
          - HttpOperationResponse
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.getMostRecentResponse'
    name: getMostRecentResponse()
    children: []
    type: method
    langs:
      - typeScript
    summary: '<span data-ttu-id="829d2-103">Rufen Sie die letzte Antwort, die der Dienst während dieser LRO gesendet.</span><span class="sxs-lookup"><span data-stu-id="829d2-103">Get the most recent response that the service sent back during this LRO.</span></span>'
    syntax:
      content: function getMostRecentResponse()
      parameters: []
      return:
        type:
          - HttpOperationResponse
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.getOperationResponse'
    name: getOperationResponse()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      <span data-ttu-id="829d2-104">Wenn der LRO abgeschlossen ist und in einem akzeptablen Zustand ist, klicken Sie dann die HttpOperationResponse zurück.</span><span class="sxs-lookup"><span data-stu-id="829d2-104">If the LRO is finished and in an acceptable state, then return the HttpOperationResponse.</span></span> <span data-ttu-id="829d2-105">Wenn es sich bei der LRO abgeschlossen ist und nicht in einem akzeptablen Zustand ist, dann auslöst, die den Fehler, den der LRO erstellt.</span><span class="sxs-lookup"><span data-stu-id="829d2-105">If the LRO is finished and not in an acceptable state, then throw the error that the LRO produced.</span></span>
      <span data-ttu-id="829d2-106">Wenn der LRO nicht abgeschlossen ist, dann zurückgeben Sie nicht definiert.</span><span class="sxs-lookup"><span data-stu-id="829d2-106">If the LRO is not finished, then return undefined.</span></span>
    syntax:
      content: function getOperationResponse()
      parameters: []
      return:
        type:
          - Promise<HttpOperationResponse | undefined>
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.getOperationStatus'
    name: getOperationStatus()
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="829d2-107">Rufen Sie den aktuellen Status der LRO.</span><span class="sxs-lookup"><span data-stu-id="829d2-107">Get the current status of the LRO.</span></span>
    syntax:
      content: function getOperationStatus()
      parameters: []
      return:
        type:
          - '@azure/ms-rest-azure-js.LongRunningOperationStates'
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.getPollState'
    name: getPollState()
    children: []
    type: method
    langs:
      - typeScript
    summary: '<span data-ttu-id="829d2-108">Erhalten Sie ein LROPollState-Objekt, das zum Abrufen dieser LRO in einem anderen Kontext verwendet werden kann (z. B. auf einem anderen Prozess oder einem anderen Computer).</span><span class="sxs-lookup"><span data-stu-id="829d2-108">Get an LROPollState object that can be used to poll this LRO in a different context (such as on a different process or a different machine).</span></span> <span data-ttu-id="829d2-109">Wenn der LRO eine Strategie für die LRO abrufen konnte nicht erstellt werden, wird dann nicht definierte zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="829d2-109">If the LRO couldn''t produce an LRO polling strategy, then this will return undefined.</span></span>'
    syntax:
      content: function getPollState()
      parameters: []
      return:
        type:
          - '@azure/ms-rest-azure-js.LROPollState | undefined'
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.isFinalStatusAcceptable'
    name: isFinalStatusAcceptable()
    children: []
    type: method
    langs:
      - typeScript
    summary: '<span data-ttu-id="829d2-110">Rufen Sie unabhängig davon, ob der LRO abgeschlossen ist und der Endzustand akzeptabel ist.</span><span class="sxs-lookup"><span data-stu-id="829d2-110">Get whether or not the LRO is finished and its final state is acceptable.</span></span> <span data-ttu-id="829d2-111">Wenn der LRO wurde nicht abgeschlossen ist, nicht definiert werden zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="829d2-111">If the LRO has not finished yet, then undefined will be returned.</span></span> <span data-ttu-id="829d2-112">Ein "akzeptabel" Endzustand richtet sich nach der LRO-Strategie, mit der Azure-Dienst lang andauernde Vorgänge ausführt.</span><span class="sxs-lookup"><span data-stu-id="829d2-112">An "acceptable" final state is determined by the LRO strategy that the Azure service uses to perform long running operations.</span></span>'
    syntax:
      content: function isFinalStatusAcceptable()
      parameters: []
      return:
        type:
          - boolean | undefined
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.isFinished'
    name: isFinished()
    children: []
    type: method
    langs:
      - typeScript
    summary: '<span data-ttu-id="829d2-113">Erhalten Sie, und zwar unabhängig davon, ob der LRO abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="829d2-113">Get whether or not the LRO is finished.</span></span>'
    syntax:
      content: function isFinished()
      parameters: []
      return:
        type:
          - boolean
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.constructor'
    name: 'LROPoller(LROPollStrategy | undefined, HttpOperationResponse)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: <span data-ttu-id="829d2-114">Erstellen Sie eine neue HttpLongRunningOperationResponse.</span><span class="sxs-lookup"><span data-stu-id="829d2-114">Create a new HttpLongRunningOperationResponse.</span></span>
    syntax:
      content: 'new LROPoller(_lroPollStrategy: LROPollStrategy | undefined, _initialResponse: HttpOperationResponse)'
      parameters:
        - id: _lroPollStrategy
          type:
            - '@azure/ms-rest-azure-js.LROPollStrategy | undefined'
          description: |
            <span data-ttu-id="829d2-115">Die LROPollStrategy, die diese HttpLongRunningOperationResponse für die Interaktion mit der LRO verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="829d2-115">The LROPollStrategy that this HttpLongRunningOperationResponse will use to interact with the LRO.</span></span>
        - id: _initialResponse
          type:
            - HttpOperationResponse
          description: ''
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.poll'
    name: poll()
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="829d2-116">Senden Sie eine Anforderung für die einzelnen Abfrage und zurückgeben Sie der LRO Zustand.</span><span class="sxs-lookup"><span data-stu-id="829d2-116">Send a single poll request and return the LRO's state.</span></span>
    syntax:
      content: function poll()
      parameters: []
      return:
        type:
          - Promise<@azure/ms-rest-azure-js.LongRunningOperationStates>
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.pollUntilFinished'
    name: pollUntilFinished()
    children: []
    type: method
    langs:
      - typeScript
    summary: '<span data-ttu-id="829d2-117">Senden Sie abrufanforderungen, die der LRO Status zu überprüfen, bis ermittelt wird, dass der LRO abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="829d2-117">Send poll requests that check the LRO''s status until it is determined that the LRO is finished.</span></span>'
    syntax:
      content: function pollUntilFinished()
      parameters: []
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/ms-rest-azure-js'
references:
  - uid: '@azure/ms-rest-azure-js.LROPollStrategy | undefined'
    name: LROPollStrategy | undefined
    spec.typeScript:
      - name: LROPollStrategy
        fullName: LROPollStrategy
        uid: '@azure/ms-rest-azure-js.LROPollStrategy'
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: '@azure/ms-rest-azure-js.LongRunningOperationStates'
    name: LongRunningOperationStates
    spec.typeScript:
      - name: LongRunningOperationStates
        fullName: LongRunningOperationStates
        uid: '@azure/ms-rest-azure-js.LongRunningOperationStates'
  - uid: '@azure/ms-rest-azure-js.LROPollState | undefined'
    name: LROPollState | undefined
    spec.typeScript:
      - name: LROPollState
        fullName: LROPollState
        uid: '@azure/ms-rest-azure-js.LROPollState'
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: Promise<@azure/ms-rest-azure-js.LongRunningOperationStates>
    name: LongRunningOperationStates>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: LongRunningOperationStates
        fullName: LongRunningOperationStates
        uid: '@azure/ms-rest-azure-js.LongRunningOperationStates'
      - name: '>'
        fullName: '>'