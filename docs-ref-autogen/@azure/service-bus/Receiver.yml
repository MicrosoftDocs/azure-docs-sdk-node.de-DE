### YamlMime:UniversalReference
items:
  - uid: '@azure/service-bus.Receiver'
    name: Receiver
    fullName: Receiver
    children:
      - '@azure/service-bus.Receiver.close'
      - '@azure/service-bus.Receiver.getMessageIterator'
      - '@azure/service-bus.Receiver.isClosed'
      - '@azure/service-bus.Receiver.isReceivingMessages'
      - '@azure/service-bus.Receiver.receiveDeferredMessage'
      - '@azure/service-bus.Receiver.receiveDeferredMessages'
      - '@azure/service-bus.Receiver.receiveMessages'
      - '@azure/service-bus.Receiver.receiveMode'
      - '@azure/service-bus.Receiver.registerMessageHandler'
      - '@azure/service-bus.Receiver.renewMessageLock'
    langs:
      - typeScript
    type: class
    summary: |-
      Die Empfänger-Klasse kann verwendet werden, zum Empfangen von Nachrichten in einem Batch oder durch das Registrieren von Handlern.
      Verwenden der `createReceiver` Funktion auf die QueueClient und SubscriptionClient einen Empfänger zu instanziieren.
      Empfängerklasse ist eine Abstraktion der zugrunde liegenden AMQP-Empfänger-Link.
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Schließt den zugrunde liegenden AMQP-empfängerlink an.
      Sobald geschlossen, kann der Empfänger für weitere Vorgänge verwendet werden.
      Verwenden der `createReceiver` Funktion auf die QueueClient und SubscriptionClient instanziieren Sie einen neuen Empfänger
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.getMessageIterator'
    name: getMessageIterator()
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Ruft eine Async-Iterator über Nachrichten vom Empfänger ab.
      Löst einen Fehler an, wenn es einer anderen receive-Vorgang wird ausgeführt, auf dem gleichen Empfänger. Wenn Sie nicht sicher sind prüfen, ob vorhanden ist, einen anderen Vorgang ausgeführt wird empfangen, die `isReceivingMessages` Eigenschaft für den Empfänger.

      Wenn der Iterator nicht über eine Minute, eine neue Nachricht im abzurufenden kann `undefined` zurückgegeben werden.
    syntax:
      content: function getMessageIterator()
      parameters: []
      return:
        type:
          - AsyncIterableIterator<@azure/service-bus.ServiceBusMessage>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.isClosed'
    name: isClosed
    fullName: isClosed
    children: []
    langs:
      - typeScript
    type: property
    summary: 'Gibt `true` , wenn der Empfänger geschlossen wird. Dies kann auftreten, entweder weil der Empfänger selbst wurde geschlossen oder der Client erstellt, die es geschlossen wurde.'
    syntax:
      content: 'isClosed: boolean'
      return:
        type:
          - boolean
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.isReceivingMessages'
    name: isReceivingMessages()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Gibt an, ob der Empfänger derzeit Nachrichten davon empfängt.
      Wenn wahr wird zurückgegeben, neue `registerMessageHandler()` oder `receiveMessages()` Aufrufe können nicht ausgeführt werden.
    syntax:
      content: function isReceivingMessages()
      parameters: []
      return:
        type:
          - boolean
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.receiveDeferredMessage'
    name: receiveDeferredMessage(Long)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Gibt eine Zusicherung, die zu einer verzögerten Nachricht identifizierte führt den angegebenen `sequenceNumber`.'
    syntax:
      content: 'function receiveDeferredMessage(sequenceNumber: Long)'
      parameters:
        - id: sequenceNumber
          type:
            - Long
          description: 'Die Sequenznummer der Nachricht, die empfangen werden muss.'
      return:
        type:
          - Promise<@azure/service-bus.ServiceBusMessage | undefined>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.receiveDeferredMessages'
    name: 'receiveDeferredMessages(Long[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Gibt eine Zusicherung, die in ein Array von verzögerte Nachrichten identifiziert aufgelöst wird vom `sequenceNumbers`.'
    syntax:
      content: 'function receiveDeferredMessages(sequenceNumbers: Long[])'
      parameters:
        - id: sequenceNumbers
          type:
            - 'Long[]'
          description: 'Ein Array von Sequenznummern für Nachrichten, die empfangen werden müssen.'
      return:
        type:
          - 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.receiveMessages'
    name: 'receiveMessages(number, undefined | number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Gibt eine Zusicherung, die in ein Array der Nachrichten aufgelöst wird aufgrund der Anzahl und Timeout über eine AMQP-Empfänger anhand aus einer Warteschlange/Abonnement verknüpfen.
      Löst einen Fehler an, wenn es einer anderen receive-Vorgang wird ausgeführt, auf dem gleichen Empfänger. Wenn Sie nicht sicher sind prüfen, ob vorhanden ist, einen anderen Vorgang ausgeführt wird empfangen, die `isReceivingMessages` Eigenschaft für den Empfänger.
    syntax:
      content: 'function receiveMessages(maxMessageCount: number, idleTimeoutInSeconds?: undefined | number)'
      parameters:
        - id: maxMessageCount
          type:
            - number
          description: Die maximale Anzahl von Nachrichten zum Empfangen von Warteschlange/Abonnement.
        - id: idleTimeoutInSeconds
          type:
            - undefined | number
          description: |-
            Die maximale Wartezeit in Sekunden, die für die der Empfänger warten soll, um die erste Nachricht zu empfangen. Wenn zu diesem Zeitpunkt keine Meldung empfangen wird, ruft die zurückgegebene Zusage aufgelöst, auf ein leeres Array ab.
            - **Standard**: `60` Sekunden.
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.receiveMode'
    name: receiveMode
    fullName: receiveMode
    children: []
    langs:
      - typeScript
    type: property
    summary: Gibt die ReceiveMode dieser Empfänger an.
    syntax:
      content: 'receiveMode: ReceiveMode'
      return:
        type:
          - '@azure/service-bus.ReceiveMode'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.registerMessageHandler'
    name: 'registerMessageHandler(OnMessage, OnError, MessageHandlerOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Registriert Ereignishandler für den Umgang mit den eingehenden Datenstrom von Nachrichten über eine AMQP-empfängerlink aus einer Warteschlange/Abonnement.
      Rufen Sie zum Empfangen von Nachrichten zu beenden, `close()` auf dem Empfänger.
      Löst einen Fehler an, wenn es einer anderen receive-Vorgang wird ausgeführt, auf dem gleichen Empfänger. Wenn Sie nicht sicher sind prüfen, ob vorhanden ist, einen anderen Vorgang ausgeführt wird empfangen, die `isReceivingMessages` Eigenschaft für den Empfänger.
    syntax:
      content: 'function registerMessageHandler(onMessage: OnMessage, onError: OnError, options?: MessageHandlerOptions)'
      parameters:
        - id: onMessage
          type:
            - '@azure/service-bus.OnMessage'
          description: Handler für jede eingehende Nachricht zu verarbeiten.
        - id: onError
          type:
            - '@azure/service-bus.OnError'
          description: 'Handler für alle Fehler, die beim empfangen oder Verarbeiten von Nachrichten auftritt.'
        - id: options
          type:
            - '@azure/service-bus.MessageHandlerOptions'
          description: |
            Optionen zum kontrollieren, ob Nachrichten automatisch abgeschlossen werden soll, und/oder haben ihre Sperren automatisch erneuert. Sie können die maximale Anzahl von Nachrichten steuern, die gleichzeitig verarbeitet werden soll. Sie können auch einen Timeout in Sekunden, um anzugeben, die Menge an Wartezeit für eine neue Nachricht vor dem Schließen des Empfängers angeben.
          optional: true
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.renewMessageLock'
    name: renewMessageLock(string | ServiceBusMessage)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Erneuert die Sperre für die Nachricht für die Dauer angegeben, während der Erstellung der Warteschlange/Abonnement.
      - Überprüfen Sie die `lockedUntilUtc` Eigenschaft der Nachricht für die Zeit, wenn die Sperre abläuft.
      - Wenn eine Nachricht nicht ausgeglichen ist (entweder `complete()`, `defer()` oder `deadletter()`, vor dem Ablauf der Sperre, und klicken Sie dann die Nachricht gelangt zurück in die Warteschlange oder ein Abonnement für die nächsten Empfangsvorgang,.
    syntax:
      content: 'function renewMessageLock(lockTokenOrMessage: string | ServiceBusMessage)'
      parameters:
        - id: lockTokenOrMessage
          type:
            - string | @azure/service-bus.ServiceBusMessage
          description: Die `lockToken` -Eigenschaft der Nachricht oder die Nachricht selbst.
      return:
        type:
          - Promise<Date>
    package: '@azure/service-bus'
references:
  - uid: '@azure/service-bus.ReceiveMode'
    name: ReceiveMode
    spec.typeScript:
      - name: ReceiveMode
        fullName: ReceiveMode
        uid: '@azure/service-bus.ReceiveMode'
  - uid: AsyncIterableIterator<@azure/service-bus.ServiceBusMessage>
    name: ServiceBusMessage>
    spec.typeScript:
      - name: AsyncIterableIterator<
        fullName: AsyncIterableIterator<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: '>'
        fullName: '>'
  - uid: Promise<@azure/service-bus.ServiceBusMessage | undefined>
    name: ServiceBusMessage | undefined>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: ' | undefined>'
        fullName: ' | undefined>'
  - uid: 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    name: 'ServiceBusMessage[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/service-bus.OnMessage'
    name: OnMessage
    spec.typeScript:
      - name: OnMessage
        fullName: OnMessage
        uid: '@azure/service-bus.OnMessage'
  - uid: '@azure/service-bus.OnError'
    name: OnError
    spec.typeScript:
      - name: OnError
        fullName: OnError
        uid: '@azure/service-bus.OnError'
  - uid: '@azure/service-bus.MessageHandlerOptions'
    name: MessageHandlerOptions
    spec.typeScript:
      - name: MessageHandlerOptions
        fullName: MessageHandlerOptions
        uid: '@azure/service-bus.MessageHandlerOptions'
  - uid: string | @azure/service-bus.ServiceBusMessage
    name: ServiceBusMessage
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'