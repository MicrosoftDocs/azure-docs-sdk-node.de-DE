### YamlMime:UniversalReference
items:
  - uid: '@azure/service-bus.Receiver'
    name: Receiver
    fullName: Receiver
    children:
      - '@azure/service-bus.Receiver.close'
      - '@azure/service-bus.Receiver.getMessageIterator'
      - '@azure/service-bus.Receiver.isClosed'
      - '@azure/service-bus.Receiver.isReceivingMessages'
      - '@azure/service-bus.Receiver.receiveDeferredMessage'
      - '@azure/service-bus.Receiver.receiveDeferredMessages'
      - '@azure/service-bus.Receiver.receiveMessages'
      - '@azure/service-bus.Receiver.receiveMode'
      - '@azure/service-bus.Receiver.registerMessageHandler'
      - '@azure/service-bus.Receiver.renewMessageLock'
    langs:
      - typeScript
    type: class
    summary: |-
      <span data-ttu-id="cca24-101">Die Empfänger-Klasse kann verwendet werden, zum Empfangen von Nachrichten in einem Batch oder durch das Registrieren von Handlern.</span><span class="sxs-lookup"><span data-stu-id="cca24-101">The Receiver class can be used to receive messages in a batch or by registering handlers.</span></span>
      <span data-ttu-id="cca24-102">Verwenden der `createReceiver` Funktion auf die QueueClient und SubscriptionClient einen Empfänger zu instanziieren.</span><span class="sxs-lookup"><span data-stu-id="cca24-102">Use the `createReceiver` function on the QueueClient or SubscriptionClient to instantiate a Receiver.</span></span>
      <span data-ttu-id="cca24-103">Empfängerklasse ist eine Abstraktion der zugrunde liegenden AMQP-Empfänger-Link.</span><span class="sxs-lookup"><span data-stu-id="cca24-103">The Receiver class is an abstraction over the underlying AMQP receiver link.</span></span>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      <span data-ttu-id="cca24-104">Schließt den zugrunde liegenden AMQP-empfängerlink an.</span><span class="sxs-lookup"><span data-stu-id="cca24-104">Closes the underlying AMQP receiver link.</span></span>
      <span data-ttu-id="cca24-105">Sobald geschlossen, kann der Empfänger für weitere Vorgänge verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="cca24-105">Once closed, the receiver cannot be used for any further operations.</span></span>
      <span data-ttu-id="cca24-106">Verwenden der `createReceiver` Funktion auf die QueueClient und SubscriptionClient instanziieren Sie einen neuen Empfänger</span><span class="sxs-lookup"><span data-stu-id="cca24-106">Use the `createReceiver` function on the QueueClient or SubscriptionClient to instantiate a new Receiver</span></span>
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.getMessageIterator'
    name: getMessageIterator()
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      <span data-ttu-id="cca24-107">Ruft eine Async-Iterator über Nachrichten vom Empfänger ab.</span><span class="sxs-lookup"><span data-stu-id="cca24-107">Gets an async iterator over messages from the receiver.</span></span>
      <span data-ttu-id="cca24-108">Löst einen Fehler an, wenn es einer anderen receive-Vorgang wird ausgeführt, auf dem gleichen Empfänger.</span><span class="sxs-lookup"><span data-stu-id="cca24-108">Throws an error if there is another receive operation in progress on the same receiver.</span></span> <span data-ttu-id="cca24-109">Wenn Sie nicht sicher sind prüfen, ob vorhanden ist, einen anderen Vorgang ausgeführt wird empfangen, die `isReceivingMessages` Eigenschaft für den Empfänger.</span><span class="sxs-lookup"><span data-stu-id="cca24-109">If you are not sure whether there is another receive operation running, check the `isReceivingMessages` property on the receiver.</span></span>

      <span data-ttu-id="cca24-110">Wenn der Iterator nicht über eine Minute, eine neue Nachricht im abzurufenden kann `undefined` zurückgegeben werden.</span><span class="sxs-lookup"><span data-stu-id="cca24-110">If the iterator is not able to fetch a new message in over a minute, `undefined` will be returned.</span></span>
    syntax:
      content: function getMessageIterator()
      parameters: []
      return:
        type:
          - AsyncIterableIterator<@azure/service-bus.ServiceBusMessage>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.isClosed'
    name: isClosed
    fullName: isClosed
    children: []
    langs:
      - typeScript
    type: property
    summary: '<span data-ttu-id="cca24-111">Gibt `true` , wenn der Empfänger geschlossen wird.</span><span class="sxs-lookup"><span data-stu-id="cca24-111">Returns `true` if the receiver is closed.</span></span> <span data-ttu-id="cca24-112">Dies kann auftreten, entweder weil der Empfänger selbst wurde geschlossen oder der Client erstellt, die es geschlossen wurde.</span><span class="sxs-lookup"><span data-stu-id="cca24-112">This can happen either because the receiver itself has been closed or the client that created it has been closed.</span></span>'
    syntax:
      content: 'isClosed: boolean'
      return:
        type:
          - boolean
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.isReceivingMessages'
    name: isReceivingMessages()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      <span data-ttu-id="cca24-113">Gibt an, ob der Empfänger derzeit Nachrichten davon empfängt.</span><span class="sxs-lookup"><span data-stu-id="cca24-113">Indicates whether the receiver is currently receiving messages or not.</span></span>
      <span data-ttu-id="cca24-114">Wenn wahr wird zurückgegeben, neue `registerMessageHandler()` oder `receiveMessages()` Aufrufe können nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="cca24-114">When this returns true, new `registerMessageHandler()` or `receiveMessages()` calls cannot be made.</span></span>
    syntax:
      content: function isReceivingMessages()
      parameters: []
      return:
        type:
          - boolean
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.receiveDeferredMessage'
    name: receiveDeferredMessage(Long)
    children: []
    type: method
    langs:
      - typeScript
    summary: '<span data-ttu-id="cca24-115">Gibt eine Zusicherung, die zu einer verzögerten Nachricht identifizierte führt den angegebenen `sequenceNumber`.</span><span class="sxs-lookup"><span data-stu-id="cca24-115">Returns a promise that resolves to a deferred message identified by the given `sequenceNumber`.</span></span>'
    syntax:
      content: 'function receiveDeferredMessage(sequenceNumber: Long)'
      parameters:
        - id: sequenceNumber
          type:
            - Long
          description: '<span data-ttu-id="cca24-116">Die Sequenznummer der Nachricht, die empfangen werden muss.</span><span class="sxs-lookup"><span data-stu-id="cca24-116">The sequence number of the message that needs to be received.</span></span>'
      return:
        type:
          - Promise<@azure/service-bus.ServiceBusMessage | undefined>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.receiveDeferredMessages'
    name: 'receiveDeferredMessages(Long[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: '<span data-ttu-id="cca24-117">Gibt eine Zusicherung, die in ein Array von verzögerte Nachrichten identifiziert aufgelöst wird vom `sequenceNumbers`.</span><span class="sxs-lookup"><span data-stu-id="cca24-117">Returns a promise that resolves to an array of deferred messages identified by given `sequenceNumbers`.</span></span>'
    syntax:
      content: 'function receiveDeferredMessages(sequenceNumbers: Long[])'
      parameters:
        - id: sequenceNumbers
          type:
            - 'Long[]'
          description: '<span data-ttu-id="cca24-118">Ein Array von Sequenznummern für Nachrichten, die empfangen werden müssen.</span><span class="sxs-lookup"><span data-stu-id="cca24-118">An array of sequence numbers for the messages that need to be received.</span></span>'
      return:
        type:
          - 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.receiveMessages'
    name: 'receiveMessages(number, undefined | number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      <span data-ttu-id="cca24-119">Gibt eine Zusicherung, die in ein Array der Nachrichten aufgelöst wird aufgrund der Anzahl und Timeout über eine AMQP-Empfänger anhand aus einer Warteschlange/Abonnement verknüpfen.</span><span class="sxs-lookup"><span data-stu-id="cca24-119">Returns a promise that resolves to an array of messages based on given count and timeout over an AMQP receiver link from a Queue/Subscription.</span></span>
      <span data-ttu-id="cca24-120">Löst einen Fehler an, wenn es einer anderen receive-Vorgang wird ausgeführt, auf dem gleichen Empfänger.</span><span class="sxs-lookup"><span data-stu-id="cca24-120">Throws an error if there is another receive operation in progress on the same receiver.</span></span> <span data-ttu-id="cca24-121">Wenn Sie nicht sicher sind prüfen, ob vorhanden ist, einen anderen Vorgang ausgeführt wird empfangen, die `isReceivingMessages` Eigenschaft für den Empfänger.</span><span class="sxs-lookup"><span data-stu-id="cca24-121">If you are not sure whether there is another receive operation running, check the `isReceivingMessages` property on the receiver.</span></span>
    syntax:
      content: 'function receiveMessages(maxMessageCount: number, idleTimeoutInSeconds?: undefined | number)'
      parameters:
        - id: maxMessageCount
          type:
            - number
          description: <span data-ttu-id="cca24-122">Die maximale Anzahl von Nachrichten zum Empfangen von Warteschlange/Abonnement.</span><span class="sxs-lookup"><span data-stu-id="cca24-122">The maximum number of messages to receive from Queue/Subscription.</span></span>
        - id: idleTimeoutInSeconds
          type:
            - undefined | number
          description: |-
            <span data-ttu-id="cca24-123">Die maximale Wartezeit in Sekunden, die für die der Empfänger warten soll, um die erste Nachricht zu empfangen.</span><span class="sxs-lookup"><span data-stu-id="cca24-123">The maximum wait time in seconds for which the Receiver should wait to receive the first message.</span></span> <span data-ttu-id="cca24-124">Wenn zu diesem Zeitpunkt keine Meldung empfangen wird, ruft die zurückgegebene Zusage aufgelöst, auf ein leeres Array ab.</span><span class="sxs-lookup"><span data-stu-id="cca24-124">If no message is received by this time, the returned promise gets resolved to an empty array.</span></span>
            - <span data-ttu-id="cca24-125">**Standard**: `60` Sekunden.</span><span class="sxs-lookup"><span data-stu-id="cca24-125">**Default**: `60` seconds.</span></span>
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.receiveMode'
    name: receiveMode
    fullName: receiveMode
    children: []
    langs:
      - typeScript
    type: property
    summary: <span data-ttu-id="cca24-126">Gibt die ReceiveMode dieser Empfänger an.</span><span class="sxs-lookup"><span data-stu-id="cca24-126">Denotes receiveMode of this receiver.</span></span>
    syntax:
      content: 'receiveMode: ReceiveMode'
      return:
        type:
          - '@azure/service-bus.ReceiveMode'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.registerMessageHandler'
    name: 'registerMessageHandler(OnMessage, OnError, MessageHandlerOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      <span data-ttu-id="cca24-127">Registriert Ereignishandler für den Umgang mit den eingehenden Datenstrom von Nachrichten über eine AMQP-empfängerlink aus einer Warteschlange/Abonnement.</span><span class="sxs-lookup"><span data-stu-id="cca24-127">Registers handlers to deal with the incoming stream of messages over an AMQP receiver link from a Queue/Subscription.</span></span>
      <span data-ttu-id="cca24-128">Rufen Sie zum Empfangen von Nachrichten zu beenden, `close()` auf dem Empfänger.</span><span class="sxs-lookup"><span data-stu-id="cca24-128">To stop receiving messages, call `close()` on the Receiver.</span></span>
      <span data-ttu-id="cca24-129">Löst einen Fehler an, wenn es einer anderen receive-Vorgang wird ausgeführt, auf dem gleichen Empfänger.</span><span class="sxs-lookup"><span data-stu-id="cca24-129">Throws an error if there is another receive operation in progress on the same receiver.</span></span> <span data-ttu-id="cca24-130">Wenn Sie nicht sicher sind prüfen, ob vorhanden ist, einen anderen Vorgang ausgeführt wird empfangen, die `isReceivingMessages` Eigenschaft für den Empfänger.</span><span class="sxs-lookup"><span data-stu-id="cca24-130">If you are not sure whether there is another receive operation running, check the `isReceivingMessages` property on the receiver.</span></span>
    syntax:
      content: 'function registerMessageHandler(onMessage: OnMessage, onError: OnError, options?: MessageHandlerOptions)'
      parameters:
        - id: onMessage
          type:
            - '@azure/service-bus.OnMessage'
          description: <span data-ttu-id="cca24-131">Handler für jede eingehende Nachricht zu verarbeiten.</span><span class="sxs-lookup"><span data-stu-id="cca24-131">Handler for processing each incoming message.</span></span>
        - id: onError
          type:
            - '@azure/service-bus.OnError'
          description: '<span data-ttu-id="cca24-132">Handler für alle Fehler, die beim empfangen oder Verarbeiten von Nachrichten auftritt.</span><span class="sxs-lookup"><span data-stu-id="cca24-132">Handler for any error that occurs while receiving or processing messages.</span></span>'
        - id: options
          type:
            - '@azure/service-bus.MessageHandlerOptions'
          description: |
            <span data-ttu-id="cca24-133">Optionen zum kontrollieren, ob Nachrichten automatisch abgeschlossen werden soll, und/oder haben ihre Sperren automatisch erneuert.</span><span class="sxs-lookup"><span data-stu-id="cca24-133">Options to control if messages should be automatically completed, and/or have their locks automatically renewed.</span></span> <span data-ttu-id="cca24-134">Sie können die maximale Anzahl von Nachrichten steuern, die gleichzeitig verarbeitet werden soll.</span><span class="sxs-lookup"><span data-stu-id="cca24-134">You can control the maximum number of messages that should be concurrently processed.</span></span> <span data-ttu-id="cca24-135">Sie können auch einen Timeout in Sekunden, um anzugeben, die Menge an Wartezeit für eine neue Nachricht vor dem Schließen des Empfängers angeben.</span><span class="sxs-lookup"><span data-stu-id="cca24-135">You can also provide a timeout in seconds to denote the amount of time to wait for a new message before closing the receiver.</span></span>
          optional: true
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.renewMessageLock'
    name: renewMessageLock(string | ServiceBusMessage)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      <span data-ttu-id="cca24-136">Erneuert die Sperre für die Nachricht für die Dauer angegeben, während der Erstellung der Warteschlange/Abonnement.</span><span class="sxs-lookup"><span data-stu-id="cca24-136">Renews the lock on the message for the duration as specified during the Queue/Subscription creation.</span></span>
      - <span data-ttu-id="cca24-137">Überprüfen Sie die `lockedUntilUtc` Eigenschaft der Nachricht für die Zeit, wenn die Sperre abläuft.</span><span class="sxs-lookup"><span data-stu-id="cca24-137">Check the `lockedUntilUtc` property on the message for the time when the lock expires.</span></span>
      - <span data-ttu-id="cca24-138">Wenn eine Nachricht nicht ausgeglichen ist (entweder `complete()`, `defer()` oder `deadletter()`, vor dem Ablauf der Sperre, und klicken Sie dann die Nachricht gelangt zurück in die Warteschlange oder ein Abonnement für die nächsten Empfangsvorgang,.</span><span class="sxs-lookup"><span data-stu-id="cca24-138">If a message is not settled (using either `complete()`, `defer()` or `deadletter()`, before its lock expires, then the message lands back in the Queue/Subscription for the next receive operation.</span></span>
    syntax:
      content: 'function renewMessageLock(lockTokenOrMessage: string | ServiceBusMessage)'
      parameters:
        - id: lockTokenOrMessage
          type:
            - string | @azure/service-bus.ServiceBusMessage
          description: <span data-ttu-id="cca24-139">Die `lockToken` -Eigenschaft der Nachricht oder die Nachricht selbst.</span><span class="sxs-lookup"><span data-stu-id="cca24-139">The `lockToken` property of the message or the message itself.</span></span>
      return:
        type:
          - Promise<Date>
    package: '@azure/service-bus'
references:
  - uid: '@azure/service-bus.ReceiveMode'
    name: ReceiveMode
    spec.typeScript:
      - name: ReceiveMode
        fullName: ReceiveMode
        uid: '@azure/service-bus.ReceiveMode'
  - uid: AsyncIterableIterator<@azure/service-bus.ServiceBusMessage>
    name: ServiceBusMessage>
    spec.typeScript:
      - name: AsyncIterableIterator<
        fullName: AsyncIterableIterator<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: '>'
        fullName: '>'
  - uid: Promise<@azure/service-bus.ServiceBusMessage | undefined>
    name: ServiceBusMessage | undefined>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: ' | undefined>'
        fullName: ' | undefined>'
  - uid: 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    name: 'ServiceBusMessage[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/service-bus.OnMessage'
    name: OnMessage
    spec.typeScript:
      - name: OnMessage
        fullName: OnMessage
        uid: '@azure/service-bus.OnMessage'
  - uid: '@azure/service-bus.OnError'
    name: OnError
    spec.typeScript:
      - name: OnError
        fullName: OnError
        uid: '@azure/service-bus.OnError'
  - uid: '@azure/service-bus.MessageHandlerOptions'
    name: MessageHandlerOptions
    spec.typeScript:
      - name: MessageHandlerOptions
        fullName: MessageHandlerOptions
        uid: '@azure/service-bus.MessageHandlerOptions'
  - uid: string | @azure/service-bus.ServiceBusMessage
    name: ServiceBusMessage
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'