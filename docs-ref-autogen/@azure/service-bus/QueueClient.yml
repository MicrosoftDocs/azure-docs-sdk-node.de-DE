### YamlMime:UniversalReference
items:
  - uid: '@azure/service-bus.QueueClient'
    name: QueueClient
    fullName: QueueClient
    children:
      - '@azure/service-bus.QueueClient.close'
      - '@azure/service-bus.QueueClient.createReceiver'
      - '@azure/service-bus.QueueClient.createReceiver_1'
      - '@azure/service-bus.QueueClient.createSender'
      - '@azure/service-bus.QueueClient.entityPath'
      - '@azure/service-bus.QueueClient.getDeadLetterQueuePath'
      - '@azure/service-bus.QueueClient.id'
      - '@azure/service-bus.QueueClient.peek'
      - '@azure/service-bus.QueueClient.peekBySequenceNumber'
    langs:
      - typeScript
    type: class
    summary: |-
      Beschreibt den Client, der ermöglicht die Interaktion mit Service Bus-Warteschlange.
      Verwenden der `createQueueClient` Funktion für das ServiceBusClient-Objekt, um einen QueueClient zu instanziieren.
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.QueueClient.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Schließt den AMQP-Links für Absender/Empfänger, die von diesem Client erstellt.
      Sobald geschlossen ist, können weder die QueueClient als auch der Sender/Empfänger für weitere Vorgänge verwendet werden.
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.QueueClient.createReceiver'
    name: createReceiver(ReceiveMode)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Erstellt einen Empfänger für den Empfang von Nachrichten aus einer Warteschlange, die keine Sitzungen aktiviert werden.
      - Löst Fehler aus, wenn ein open-Empfänger für diese QueueClient bereits vorhanden ist.
      - Löst `InvalidOperationError` , wenn die Warteschlange Sitzungen aktiviert wurde (in diesem Fall verwenden Sie die Überladung dieser Methode die akzeptiert `sessionOptions` Argument)
    syntax:
      content: 'function createReceiver(receiveMode: ReceiveMode)'
      parameters:
        - id: receiveMode
          type:
            - '@azure/service-bus.ReceiveMode'
          description: |
            Eine Enumeration, der angibt, des Modus, in dem Nachrichten empfangen werden sollen. Dabei sind folgende Werte möglich:
            - `ReceiveMode.peekLock`: Sobald eine Nachricht in diesem Modus empfangen wird, hat der Empfänger eine Sperre für die Nachricht für einen bestimmten Zeitraum an. Wird die Nachricht zu diesem Zeitpunkt nicht ausgeglichen, gelangt er auf Service Bus durch das nächste abgerufen werden receive-Methode.
            - `ReceiveMode.receiveAndDelete`: In diesem Modus empfangene Nachrichten abrufen von Service Bus automatisch entfernt.
      return:
        type:
          - '@azure/service-bus.Receiver'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.QueueClient.createReceiver_1'
    name: 'createReceiver(ReceiveMode, SessionReceiverOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Erstellt einen Empfänger an, für die Warteschlange empfangen von Nachrichten aus einer Sitzung aktiviert werden. Wenn keine SessionId übergeben wird, wird eine zufällige Sitzung zwischen den verfügbaren Sitzungen verwendet.
      - Löst Fehler aus, wenn ein open-Empfänger für die angegebene SessionId vorhanden ist.
      - Löst `SessionCannotBeLockedError` , wenn die Warteschlange keine Sitzungen aktiviert (übergeben Sie in diesem Fall nicht die `sessionOptions` Argument) oder Service Bus nicht in der Sitzung (in der Groß-/Kleinschreibung versuchen Sie es später noch Mal) eine Sperre erhalten werden kann
    syntax:
      content: 'function createReceiver(receiveMode: ReceiveMode, sessionOptions: SessionReceiverOptions)'
      parameters:
        - id: receiveMode
          type:
            - '@azure/service-bus.ReceiveMode'
          description: |-
            Eine Enumeration, der angibt, des Modus, in dem Nachrichten empfangen werden sollen. Dabei sind folgende Werte möglich:
            - `ReceiveMode.peekLock`: Sobald eine Nachricht in diesem Modus empfangen wird, hat der Empfänger eine Sperre für die Nachricht für einen bestimmten Zeitraum an. Wird die Nachricht zu diesem Zeitpunkt nicht ausgeglichen, gelangt er auf Service Bus durch das nächste abgerufen werden receive-Methode.
            - `ReceiveMode.receiveAndDelete`: In diesem Modus empfangene Nachrichten abrufen von Service Bus automatisch entfernt.
        - id: sessionOptions
          type:
            - '@azure/service-bus.SessionReceiverOptions'
          description: |
            Optionen, die "SessionId" und die Dauer der Sperre der automatischen Verlängerung für sitzungsempfänger bereitzustellen.
      return:
        type:
          - '@azure/service-bus.SessionReceiver'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.QueueClient.createSender'
    name: createSender()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Erstellt einen Sender zum Senden von Nachrichten, das Nachrichten senden, zu einem späteren Zeitpunkt planen und diese geplante Nachrichten abgebrochen verwendet werden soll.
      - Löst Fehler aus, wenn es sich bei ein geöffneter Absender für diese QueueClient bereits vorhanden ist.
    syntax:
      content: function createSender()
      parameters: []
      return:
        type:
          - '@azure/service-bus.Sender'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.QueueClient.entityPath'
    name: entityPath
    fullName: entityPath
    children: []
    langs:
      - typeScript
    type: property
    summary: 'Der Pfad für die Service Bus-Warteschlange, die für die dieser Client erstellt wird.'
    syntax:
      content: 'entityPath: string'
      return:
        type:
          - string
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.QueueClient.getDeadLetterQueuePath'
    name: getDeadLetterQueuePath(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Gibt zurück, der entsprechenden Dead-Letter-Warteschlangenname für die Warteschlange mit dem angegebenen Namen dargestellt.
      Verwenden Sie diese in die `createQueueClient` funktionieren auf die `ServiceBusClient` Instanz zum Empfangen von Nachrichten aus einer Warteschlange für unzustellbare Nachrichten.
    syntax:
      content: 'static function getDeadLetterQueuePath(queueName: string)'
      parameters:
        - id: queueName
          type:
            - string
          description: |
            Der Name der Warteschlange, deren Dead-Letter-Entsprechung Name abgerufen werden
      return:
        type:
          - string
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.QueueClient.id'
    name: id
    fullName: id
    children: []
    langs:
      - typeScript
    type: property
    summary: Ein eindeutiger Bezeichner für diesen Client.
    syntax:
      content: 'id: string'
      return:
        type:
          - string
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.QueueClient.peek'
    name: peek(undefined | number)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Ruft das nächste Batch von aktiven Nachrichten (einschließlich aber nicht unzustellbaren Nachrichten verzögert).
      - Der erste Aufruf `peek()` abruft, die erste aktive Nachricht. Jeder nachfolgender Aufruf ruft die nachfolgende Meldung ab.
      - Im Gegensatz zu einem `received` Nachricht `peeked` Nachricht ist eine schreibgeschützte Version der Nachricht.
      Ist nicht möglich `Completed/Abandoned/Deferred/Deadlettered`. Die Sperre kann nicht verlängert werden.
    syntax:
      content: 'function peek(maxMessageCount?: undefined | number)'
      parameters:
        - id: maxMessageCount
          type:
            - undefined | number
          description: ''
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.QueueClient.peekBySequenceNumber'
    name: 'peekBySequenceNumber(Long, undefined | number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Stellt eine Einsicht in die gewünschte Anzahl von aktiven Nachrichten (einschließlich aber nicht unzustellbaren Nachrichten verzögert) aus der angegebenen Sequenznummer.
      - Im Gegensatz zu einem `received` Nachricht `peeked` Nachricht ist eine schreibgeschützte Version der Nachricht.
      Ist nicht möglich `Completed/Abandoned/Deferred/Deadlettered`. Die Sperre kann nicht verlängert werden.
    syntax:
      content: 'function peekBySequenceNumber(fromSequenceNumber: Long, maxMessageCount?: undefined | number)'
      parameters:
        - id: fromSequenceNumber
          type:
            - Long
          description: 'Die Sequenznummer, aus denen die Nachricht gelesen werden soll.'
        - id: maxMessageCount
          type:
            - undefined | number
          description: ''
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    package: '@azure/service-bus'
references:
  - uid: '@azure/service-bus.ReceiveMode'
    name: ReceiveMode
    spec.typeScript:
      - name: ReceiveMode
        fullName: ReceiveMode
        uid: '@azure/service-bus.ReceiveMode'
  - uid: '@azure/service-bus.Receiver'
    name: Receiver
    spec.typeScript:
      - name: Receiver
        fullName: Receiver
        uid: '@azure/service-bus.Receiver'
  - uid: '@azure/service-bus.SessionReceiverOptions'
    name: SessionReceiverOptions
    spec.typeScript:
      - name: SessionReceiverOptions
        fullName: SessionReceiverOptions
        uid: '@azure/service-bus.SessionReceiverOptions'
  - uid: '@azure/service-bus.SessionReceiver'
    name: SessionReceiver
    spec.typeScript:
      - name: SessionReceiver
        fullName: SessionReceiver
        uid: '@azure/service-bus.SessionReceiver'
  - uid: '@azure/service-bus.Sender'
    name: Sender
    spec.typeScript:
      - name: Sender
        fullName: Sender
        uid: '@azure/service-bus.Sender'
  - uid: 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    name: 'ReceivedMessageInfo[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ReceivedMessageInfo
        fullName: ReceivedMessageInfo
        uid: '@azure/service-bus.ReceivedMessageInfo'
      - name: '[]>'
        fullName: '[]>'