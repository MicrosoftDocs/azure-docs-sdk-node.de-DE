### YamlMime:UniversalReference
items:
  - uid: '@azure/service-bus.SessionReceiver'
    name: SessionReceiver
    fullName: SessionReceiver
    children:
      - '@azure/service-bus.SessionReceiver.close'
      - '@azure/service-bus.SessionReceiver.getMessageIterator'
      - '@azure/service-bus.SessionReceiver.getState'
      - '@azure/service-bus.SessionReceiver.isClosed'
      - '@azure/service-bus.SessionReceiver.isReceivingMessages'
      - '@azure/service-bus.SessionReceiver.peek'
      - '@azure/service-bus.SessionReceiver.peekBySequenceNumber'
      - '@azure/service-bus.SessionReceiver.receiveDeferredMessage'
      - '@azure/service-bus.SessionReceiver.receiveDeferredMessages'
      - '@azure/service-bus.SessionReceiver.receiveMessages'
      - '@azure/service-bus.SessionReceiver.receiveMode'
      - '@azure/service-bus.SessionReceiver.registerMessageHandler'
      - '@azure/service-bus.SessionReceiver.renewSessionLock'
      - '@azure/service-bus.SessionReceiver.sessionId'
      - '@azure/service-bus.SessionReceiver.sessionLockedUntilUtc'
      - '@azure/service-bus.SessionReceiver.setState'
    langs:
      - typeScript
    type: class
    summary: |-
      Die SessionReceiver-Klasse kann verwendet werden, zum Empfangen von Nachrichten aus einer Sitzung aktiviert Warteschlange oder einem Abonnement in einem Batch oder durch das Registrieren von Handlern.
      Verwenden der `createReceiver` Funktion auf die QueueClient und SubscriptionClient eine SessionReceiver instanziieren.
      Die SessionReceiver-Klasse ist eine Abstraktion der zugrunde liegenden AMQP-Empfänger-Link.
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Schließt den zugrunde liegenden AMQP-empfängerlink an.
      Sobald geschlossen, kann der Empfänger für weitere Vorgänge verwendet werden.
      Verwenden der `createReceiver` Funktion auf die QueueClient und SubscriptionClient instanziieren Sie einen neuen Empfänger
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.getMessageIterator'
    name: getMessageIterator()
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Ruft eine Async-Iterator über Nachrichten vom Empfänger ab.
      Löst einen Fehler an, wenn es einer anderen receive-Vorgang wird ausgeführt, auf dem gleichen Empfänger. Wenn Sie nicht sicher sind prüfen, ob vorhanden ist, einen anderen Vorgang ausgeführt wird empfangen, die `isReceivingMessages` Eigenschaft für den Empfänger.

      Wenn der Iterator nicht über eine Minute, eine neue Nachricht im abzurufenden kann `undefined` zurückgegeben werden
    syntax:
      content: function getMessageIterator()
      parameters: []
      return:
        type:
          - AsyncIterableIterator<@azure/service-bus.ServiceBusMessage>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.getState'
    name: getState()
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Ruft den Status der Sitzung ab. Weitere Informationen zum Sitzungsstatus finden Sie unter [Sitzungszustand](https://docs.microsoft.com/en-us/azure/service-bus-messaging/message-sessions#message-session-state)'
    syntax:
      content: function getState()
      parameters: []
      return:
        type:
          - Promise<any>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.isClosed'
    name: isClosed
    fullName: isClosed
    children: []
    langs:
      - typeScript
    type: property
    summary: 'Gibt `true` , wenn der Empfänger geschlossen wird. Dies kann auftreten, entweder weil der Empfänger selbst wurde geschlossen oder der Client erstellt, die es geschlossen wurde.'
    syntax:
      content: 'isClosed: boolean'
      return:
        type:
          - boolean
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.isReceivingMessages'
    name: isReceivingMessages()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Gibt an, ob der Empfänger derzeit Nachrichten davon empfängt.
      Wenn wahr wird zurückgegeben, neue `registerMessageHandler()` oder `receiveMessages()` Aufrufe können nicht ausgeführt werden.
    syntax:
      content: function isReceivingMessages()
      parameters: []
      return:
        type:
          - boolean
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.peek'
    name: peek(undefined | number)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Ruft das nächste Batch von aktiven Nachrichten (einschließlich aber nicht unzustellbaren Nachrichten verzögert) in der aktuellen Sitzung.
      - Der erste Aufruf `peek()` abruft, die erste aktive Nachricht. Jeder nachfolgender Aufruf ruft die nachfolgende Meldung ab.
      - Im Gegensatz zu einem `received` Nachricht `peeked` Nachricht ist eine schreibgeschützte Version der Nachricht.
      Ist nicht möglich `Completed/Abandoned/Deferred/Deadlettered`. Die Sperre kann nicht verlängert werden.
    syntax:
      content: 'function peek(maxMessageCount?: undefined | number)'
      parameters:
        - id: maxMessageCount
          type:
            - undefined | number
          description: Die maximale Anzahl von einsehbaren Nachrichten. Standardwert `1`.
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.peekBySequenceNumber'
    name: 'peekBySequenceNumber(Long, undefined | number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Stellt eine Einsicht in die gewünschte Anzahl von aktiven Nachrichten (einschließlich aber nicht unzustellbaren Nachrichten verzögert) aus der angegebenen Sequenznummer in der aktuellen Sitzung.
      - Im Gegensatz zu einem `received` Nachricht `peeked` Nachricht ist eine schreibgeschützte Version der Nachricht.
      Ist nicht möglich `Completed/Abandoned/Deferred/Deadlettered`. Die Sperre kann nicht verlängert werden.
    syntax:
      content: 'function peekBySequenceNumber(fromSequenceNumber: Long, maxMessageCount?: undefined | number)'
      parameters:
        - id: fromSequenceNumber
          type:
            - Long
          description: 'Die Sequenznummer, aus denen die Nachricht gelesen werden soll.'
        - id: maxMessageCount
          type:
            - undefined | number
          description: ''
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.receiveDeferredMessage'
    name: receiveDeferredMessage(Long)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Gibt eine Zusicherung, die zu einer verzögerten Nachricht identifizierte führt den angegebenen `sequenceNumber`.'
    syntax:
      content: 'function receiveDeferredMessage(sequenceNumber: Long)'
      parameters:
        - id: sequenceNumber
          type:
            - Long
          description: 'Die Sequenznummer der Nachricht, die empfangen werden muss.'
      return:
        type:
          - Promise<@azure/service-bus.ServiceBusMessage | undefined>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.receiveDeferredMessages'
    name: 'receiveDeferredMessages(Long[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Gibt eine Zusicherung, die in ein Array von verzögerte Nachrichten identifiziert aufgelöst wird vom `sequenceNumbers`.'
    syntax:
      content: 'function receiveDeferredMessages(sequenceNumbers: Long[])'
      parameters:
        - id: sequenceNumbers
          type:
            - 'Long[]'
          description: 'Ein Array von Sequenznummern für Nachrichten, die empfangen werden müssen.'
      return:
        type:
          - 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.receiveMessages'
    name: 'receiveMessages(number, undefined | number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Gibt eine Zusicherung, die in ein Array der Nachrichten aufgelöst wird aufgrund der Anzahl und Timeout über eine AMQP-Empfänger anhand aus einer Warteschlange/Abonnement verknüpfen.
      Löst einen Fehler an, wenn es einer anderen receive-Vorgang wird ausgeführt, auf dem gleichen Empfänger. Wenn Sie nicht sicher sind prüfen, ob vorhanden ist, einen anderen Vorgang ausgeführt wird empfangen, die `isReceivingMessages` Eigenschaft für den Empfänger.
    syntax:
      content: 'function receiveMessages(maxMessageCount: number, maxWaitTimeInSeconds?: undefined | number)'
      parameters:
        - id: maxMessageCount
          type:
            - number
          description: Die maximale Anzahl von Nachrichten zum Empfangen von Warteschlange/Abonnement.
        - id: maxWaitTimeInSeconds
          type:
            - undefined | number
          description: |-
            Die maximale Wartezeit in Sekunden, die für die der Empfänger warten soll, um die erste Nachricht zu empfangen. Wenn zu diesem Zeitpunkt keine Meldung empfangen wird, ruft die zurückgegebene Zusage aufgelöst, auf ein leeres Array ab.
            - **Standard**: `60` Sekunden.
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.receiveMode'
    name: receiveMode
    fullName: receiveMode
    children: []
    langs:
      - typeScript
    type: property
    summary: Gibt die ReceiveMode dieser Empfänger an.
    syntax:
      content: 'receiveMode: ReceiveMode'
      return:
        type:
          - '@azure/service-bus.ReceiveMode'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.registerMessageHandler'
    name: 'registerMessageHandler(OnMessage, OnError, SessionMessageHandlerOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Registriert Ereignishandler für den Umgang mit den eingehenden Datenstrom von Nachrichten über eine AMQP-empfängerlink aus einer Warteschlange/Abonnement.
      Rufen Sie zum Empfangen von Nachrichten zu beenden, `close()` auf die SessionReceiver.
      Löst einen Fehler an, wenn es einer anderen receive-Vorgang wird ausgeführt, auf dem gleichen Empfänger. Wenn Sie nicht sicher sind prüfen, ob vorhanden ist, einen anderen Vorgang ausgeführt wird empfangen, die `isReceivingMessages` Eigenschaft für den Empfänger.
    syntax:
      content: 'function registerMessageHandler(onMessage: OnMessage, onError: OnError, options?: SessionMessageHandlerOptions)'
      parameters:
        - id: onMessage
          type:
            - '@azure/service-bus.OnMessage'
          description: Handler für jede eingehende Nachricht zu verarbeiten.
        - id: onError
          type:
            - '@azure/service-bus.OnError'
          description: 'Handler für alle Fehler, die beim empfangen oder Verarbeiten von Nachrichten auftritt.'
        - id: options
          type:
            - '@azure/service-bus.SessionMessageHandlerOptions'
          description: |
            Optionen, die steuern, ob Nachrichten automatisch vervollständigt werden soll oder wenn die Sperre für die Sitzung automatisch erneuert werden soll. Sie können die maximale Anzahl von Nachrichten steuern, die gleichzeitig verarbeitet werden soll. Sie können auch einen Timeout in Sekunden, um anzugeben, die Menge an Wartezeit für eine neue Nachricht vor dem Schließen des Empfängers angeben.
          optional: true
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.renewSessionLock'
    name: renewSessionLock()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Erneuert die Sperre für die Sitzung für die Dauer angegeben, während der Erstellung der Warteschlange/Abonnement.
      - Überprüfen Sie die `sessionLockedUntilUtc` Eigenschaft für die SessionReceiver für die Zeit, wenn die Sperre abläuft.
      - Wenn die Sperre für die Sitzung abläuft
          - Keine weiteren Nachrichten können mit dieser Empfänger empfangen werden
          - Wenn eine Nachricht nicht ausgeglichen ist (entweder `complete()`, `defer()` oder `deadletter()`, bevor die Sitzung die Sperre abläuft, und dann die Nachricht gelangt zurück in die Warteschlange oder ein Abonnement für die nächsten Empfangsvorgang.
    syntax:
      content: function renewSessionLock()
      parameters: []
      return:
        type:
          - Promise<Date>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.sessionId'
    name: sessionId
    fullName: sessionId
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Die Id der Sitzung aus der dieser Empfänger Nachrichten empfängt.
      Gibt undefined zurück, bis eine AMQP-empfängerlink erfolgreich für die Sitzung eingerichtet wurde.
    syntax:
      content: 'sessionId: string | undefined'
      return:
        type:
          - string | undefined
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.sessionLockedUntilUtc'
    name: sessionLockedUntilUtc
    fullName: sessionLockedUntilUtc
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Die Zeit in UTC bis zu dem die Sitzung gesperrt ist.
      Bei jedem `renewSessionLock()` wird aufgerufen, diesmal auf aktuelle Zeit plus der Dauer der nachrichtensperre gemäß während der Erstellung der Warteschlange/Abonnement aktualisiert wird.

      Gibt undefined zurück, bis eine AMQP-empfängerlink erfolgreich für die Sitzung eingerichtet wurde.
    syntax:
      content: 'sessionLockedUntilUtc: Date | undefined'
      return:
        type:
          - Date | undefined
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.setState'
    name: setState(any)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Legt den Zustand für die Sitzung fest. Weitere Informationen zum Sitzungsstatus finden Sie unter [Sitzungszustand](https://docs.microsoft.com/en-us/azure/service-bus-messaging/message-sessions#message-session-state)'
    syntax:
      content: 'function setState(state: any)'
      parameters:
        - id: state
          type:
            - any
          description: |
            Der Zustand, der festgelegt werden muss.
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
references:
  - uid: '@azure/service-bus.ReceiveMode'
    name: ReceiveMode
    spec.typeScript:
      - name: ReceiveMode
        fullName: ReceiveMode
        uid: '@azure/service-bus.ReceiveMode'
  - uid: AsyncIterableIterator<@azure/service-bus.ServiceBusMessage>
    name: ServiceBusMessage>
    spec.typeScript:
      - name: AsyncIterableIterator<
        fullName: AsyncIterableIterator<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: '>'
        fullName: '>'
  - uid: 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    name: 'ReceivedMessageInfo[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ReceivedMessageInfo
        fullName: ReceivedMessageInfo
        uid: '@azure/service-bus.ReceivedMessageInfo'
      - name: '[]>'
        fullName: '[]>'
  - uid: Promise<@azure/service-bus.ServiceBusMessage | undefined>
    name: ServiceBusMessage | undefined>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: ' | undefined>'
        fullName: ' | undefined>'
  - uid: 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    name: 'ServiceBusMessage[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/service-bus.OnMessage'
    name: OnMessage
    spec.typeScript:
      - name: OnMessage
        fullName: OnMessage
        uid: '@azure/service-bus.OnMessage'
  - uid: '@azure/service-bus.OnError'
    name: OnError
    spec.typeScript:
      - name: OnError
        fullName: OnError
        uid: '@azure/service-bus.OnError'
  - uid: '@azure/service-bus.SessionMessageHandlerOptions'
    name: SessionMessageHandlerOptions
    spec.typeScript:
      - name: SessionMessageHandlerOptions
        fullName: SessionMessageHandlerOptions
        uid: '@azure/service-bus.SessionMessageHandlerOptions'