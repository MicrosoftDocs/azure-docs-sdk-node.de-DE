### YamlMime:UniversalReference
items:
  - uid: '@azure/service-bus.SubscriptionClient'
    name: SubscriptionClient
    fullName: SubscriptionClient
    children:
      - '@azure/service-bus.SubscriptionClient.addRule'
      - '@azure/service-bus.SubscriptionClient.close'
      - '@azure/service-bus.SubscriptionClient.createReceiver'
      - '@azure/service-bus.SubscriptionClient.createReceiver_1'
      - '@azure/service-bus.SubscriptionClient.defaultRuleName'
      - '@azure/service-bus.SubscriptionClient.entityPath'
      - '@azure/service-bus.SubscriptionClient.getRules'
      - '@azure/service-bus.SubscriptionClient.id'
      - '@azure/service-bus.SubscriptionClient.peek'
      - '@azure/service-bus.SubscriptionClient.peekBySequenceNumber'
      - '@azure/service-bus.SubscriptionClient.removeRule'
      - '@azure/service-bus.SubscriptionClient.subscriptionName'
      - '@azure/service-bus.SubscriptionClient.topicName'
    langs:
      - typeScript
    type: class
    summary: |-
      Beschreibt den Client, der ermöglicht die Interaktion mit einem Service Bus-Abonnement an.
      Verwenden der `createSubscriptionClient` hängt das ServiceBusClient-Objekt, das eine SubscriptionClient instanziieren
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SubscriptionClient.addRule'
    name: 'addRule(string, boolean | string | CorrelationFilter, undefined | string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Fügt eine Regel für das Abonnement an, wie der angegebene Regelname, Filter und die Aktion definiert.
      **Hinweis**: Entfernen Sie den Standardfilter "true" für das Abonnement vor dem Hinzufügen einer Regel an.
      Die Regel hinzugefügte wird, andernfalls keine Auswirkungen haben, wie der Filter "true" immer im Abonnement empfangen aller Nachrichten führt.
    syntax:
      content: 'function addRule(ruleName: string, filter: boolean | string | CorrelationFilter, sqlRuleActionExpression?: undefined | string)'
      parameters:
        - id: ruleName
          type:
            - string
          description: Name der Regel
        - id: filter
          type:
            - boolean | string | @azure/service-bus.CorrelationFilter
          description: 'Ein boolescher Wert, SQL-Ausdruck oder einen Correlation-Filter. SQL-Filter-Syntax finden Sie unter [SQLFilter-Syntax](https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-messaging-sql-filter).'
        - id: sqlRuleActionExpression
          type:
            - undefined | string
          description: |
            Aktion ausführen, wenn die Nachricht dem Filterausdruck entspricht. SQL-Rule-Action-Syntax finden Sie unter [SQLRuleAction-Syntax](https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-messaging-sql-rule-action).
          optional: true
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SubscriptionClient.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Schließt den AMQP-Link für die Empfänger, die von diesem Client erstellt.
      Sobald geschlossen ist, können weder die SubscriptionClient als auch dessen Empfängern für weitere Vorgänge verwendet werden.
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SubscriptionClient.createReceiver'
    name: createReceiver(ReceiveMode)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Erstellt einen Empfänger für den Empfang von Nachrichten aus einem Abonnement keine Sitzungen aktiviert ist.
      - Löst Fehler aus, wenn ein open-Empfänger für diese SubscriptionClient bereits vorhanden ist.
      - Löst `InvalidOperationError` , wenn das Abonnement mit aktivierten Sitzungen enthält (in diesem Fall verwenden Sie die Überladung dieser Methode die akzeptiert `sessionOptions` Argument)
    syntax:
      content: 'function createReceiver(receiveMode: ReceiveMode)'
      parameters:
        - id: receiveMode
          type:
            - '@azure/service-bus.ReceiveMode'
          description: |
            Eine Enumeration, der angibt, des Modus, in dem Nachrichten empfangen werden sollen. Dabei sind folgende Werte möglich:
            - `ReceiveMode.peekLock`: Sobald eine Nachricht in diesem Modus empfangen wird, hat der Empfänger eine Sperre für die Nachricht für einen bestimmten Zeitraum an. Wird die Nachricht zu diesem Zeitpunkt nicht ausgeglichen, gelangt er auf Service Bus durch das nächste abgerufen werden receive-Methode.
            - `ReceiveMode.receiveAndDelete`: In diesem Modus empfangene Nachrichten abrufen von Service Bus automatisch entfernt.
      return:
        type:
          - '@azure/service-bus.Receiver'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SubscriptionClient.createReceiver_1'
    name: 'createReceiver(ReceiveMode, SessionReceiverOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Erstellt einen Empfänger an, für das Abonnement empfangen von Nachrichten aus einer Sitzung aktiviert werden. Wenn keine SessionId übergeben wird, wird eine zufällige Sitzung zwischen den verfügbaren Sitzungen verwendet.
      - Löst Fehler aus, wenn ein open-Empfänger für die angegebene SessionId vorhanden ist.
      - Löst `SessionCannotBeLockedError` verfügt das Abonnement nicht aktivierten Sitzungen (übergeben Sie in diesem Fall nicht die `sessionOptions` Argument) oder Service Bus nicht in der Sitzung (in der Groß-/Kleinschreibung versuchen Sie es später noch Mal) eine Sperre erhalten werden kann
    syntax:
      content: 'function createReceiver(receiveMode: ReceiveMode, sessionOptions: SessionReceiverOptions)'
      parameters:
        - id: receiveMode
          type:
            - '@azure/service-bus.ReceiveMode'
          description: |-
            Eine Enumeration, der angibt, des Modus, in dem Nachrichten empfangen werden sollen. Dabei sind folgende Werte möglich:
            - `ReceiveMode.peekLock`: Sobald eine Nachricht in diesem Modus empfangen wird, hat der Empfänger eine Sperre für die Nachricht für einen bestimmten Zeitraum an. Wird die Nachricht zu diesem Zeitpunkt nicht ausgeglichen, gelangt er auf Service Bus durch das nächste abgerufen werden receive-Methode.
            - `ReceiveMode.receiveAndDelete`: In diesem Modus empfangene Nachrichten abrufen von Service Bus automatisch entfernt.
        - id: sessionOptions
          type:
            - '@azure/service-bus.SessionReceiverOptions'
          description: |
            Optionen, die "SessionId" und die Dauer der Sperre der automatischen Verlängerung für sitzungsempfänger bereitzustellen.
      return:
        type:
          - '@azure/service-bus.SessionReceiver'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SubscriptionClient.defaultRuleName'
    name: defaultRuleName
    fullName: defaultRuleName
    children: []
    langs:
      - typeScript
    type: property
    summary: Der Name der Standardregel für das Abonnement.
    syntax:
      content: 'defaultRuleName: string'
      return:
        type:
          - string
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SubscriptionClient.entityPath'
    name: entityPath
    fullName: entityPath
    children: []
    langs:
      - typeScript
    type: property
    summary: 'Der Pfad für die Service Bus-Abonnements, die für die dieser Client erstellt wird.'
    syntax:
      content: 'entityPath: string'
      return:
        type:
          - string
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SubscriptionClient.getRules'
    name: getRules()
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Ruft alle Regeln, die dem Abonnement zugeordneten'
    syntax:
      content: function getRules()
      parameters: []
      return:
        type:
          - 'Promise<@azure/service-bus.RuleDescription[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SubscriptionClient.id'
    name: id
    fullName: id
    children: []
    langs:
      - typeScript
    type: property
    summary: Ein eindeutiger Bezeichner für diesen Client.
    syntax:
      content: 'id: string'
      return:
        type:
          - string
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SubscriptionClient.peek'
    name: peek(undefined | number)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Ruft das nächste Batch von aktiven Nachrichten (einschließlich aber nicht unzustellbaren Nachrichten verzögert).
      - Der erste Aufruf `peek()` abruft, die erste aktive Nachricht. Jeder nachfolgender Aufruf ruft die nachfolgende Meldung ab.
      - Im Gegensatz zu einem `received` Nachricht `peeked` Nachricht ist eine schreibgeschützte Version der Nachricht.
      Ist nicht möglich `Completed/Abandoned/Deferred/Deadlettered`. Die Sperre kann nicht verlängert werden.
    syntax:
      content: 'function peek(maxMessageCount?: undefined | number)'
      parameters:
        - id: maxMessageCount
          type:
            - undefined | number
          description: ''
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SubscriptionClient.peekBySequenceNumber'
    name: 'peekBySequenceNumber(Long, undefined | number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Stellt eine Einsicht in die gewünschte Anzahl von aktiven Nachrichten (einschließlich aber nicht unzustellbaren Nachrichten verzögert) aus der angegebenen Sequenznummer.
      - Im Gegensatz zu einem `received` Nachricht `peeked` Nachricht ist eine schreibgeschützte Version der Nachricht.
      Ist nicht möglich `Completed/Abandoned/Deferred/Deadlettered`. Die Sperre kann nicht verlängert werden.
    syntax:
      content: 'function peekBySequenceNumber(fromSequenceNumber: Long, maxMessageCount?: undefined | number)'
      parameters:
        - id: fromSequenceNumber
          type:
            - Long
          description: 'Die Sequenznummer, aus denen die Nachricht gelesen werden soll.'
        - id: maxMessageCount
          type:
            - undefined | number
          description: ''
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SubscriptionClient.removeRule'
    name: removeRule(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Entfernt die Regel für das Abonnement, das durch den Regelnamen der angegebenen identifiziert.
      **Vorsicht**: Wenn alle Regeln für ein Abonnement entfernt werden, erhält das Abonnement keine weiteren Nachrichten.
    syntax:
      content: 'function removeRule(ruleName: string)'
      parameters:
        - id: ruleName
          type:
            - string
          description: |+

      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SubscriptionClient.subscriptionName'
    name: subscriptionName
    fullName: subscriptionName
    children: []
    langs:
      - typeScript
    type: property
    summary: 'Der Name des der Service Bus-Abonnements, die für die dieser Client erstellt wird.'
    syntax:
      content: 'subscriptionName: string'
      return:
        type:
          - string
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SubscriptionClient.topicName'
    name: topicName
    fullName: topicName
    children: []
    langs:
      - typeScript
    type: property
    summary: 'Der Name der Service Bus-Thema, dessen Abonnements, wird dieser Client erstellt.'
    syntax:
      content: 'topicName: string'
      return:
        type:
          - string
    package: '@azure/service-bus'
references:
  - uid: boolean | string | @azure/service-bus.CorrelationFilter
    name: CorrelationFilter
    spec.typeScript:
      - name: 'boolean | string | '
        fullName: 'boolean | string | '
      - name: CorrelationFilter
        fullName: CorrelationFilter
        uid: '@azure/service-bus.CorrelationFilter'
  - uid: '@azure/service-bus.ReceiveMode'
    name: ReceiveMode
    spec.typeScript:
      - name: ReceiveMode
        fullName: ReceiveMode
        uid: '@azure/service-bus.ReceiveMode'
  - uid: '@azure/service-bus.Receiver'
    name: Receiver
    spec.typeScript:
      - name: Receiver
        fullName: Receiver
        uid: '@azure/service-bus.Receiver'
  - uid: '@azure/service-bus.SessionReceiverOptions'
    name: SessionReceiverOptions
    spec.typeScript:
      - name: SessionReceiverOptions
        fullName: SessionReceiverOptions
        uid: '@azure/service-bus.SessionReceiverOptions'
  - uid: '@azure/service-bus.SessionReceiver'
    name: SessionReceiver
    spec.typeScript:
      - name: SessionReceiver
        fullName: SessionReceiver
        uid: '@azure/service-bus.SessionReceiver'
  - uid: 'Promise<@azure/service-bus.RuleDescription[]>'
    name: 'RuleDescription[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: RuleDescription
        fullName: RuleDescription
        uid: '@azure/service-bus.RuleDescription'
      - name: '[]>'
        fullName: '[]>'
  - uid: 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    name: 'ReceivedMessageInfo[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ReceivedMessageInfo
        fullName: ReceivedMessageInfo
        uid: '@azure/service-bus.ReceivedMessageInfo'
      - name: '[]>'
        fullName: '[]>'