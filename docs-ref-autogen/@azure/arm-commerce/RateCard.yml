### YamlMime:UniversalReference
items:
  - uid: '@azure/arm-commerce.RateCard'
    name: RateCard
    fullName: RateCard
    children:
      - '@azure/arm-commerce.RateCard.get'
      - '@azure/arm-commerce.RateCard.get_2'
      - '@azure/arm-commerce.RateCard.get_1'
      - '@azure/arm-commerce.RateCard.constructor'
    langs:
      - typeScript
    type: class
    summary: 'Klasse, die eine RateCard darstellt.'
    package: '@azure/arm-commerce'
  - uid: '@azure/arm-commerce.RateCard.get'
    name: 'get(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Sie können Sie zum Abfragen der Metadaten für Ressourcen/Verbrauchseinheiten und die entsprechenden Preise, die in einem Abonnement verwendet wird, durch die Angebots-ID "," Currency "," Locale "und" Region. Die Metadaten, die mit Verbrauchseinheiten für die Abrechnung, einschließlich verbunden, aber nicht beschränkt auf Dienstnamen, Typen, die Ressourcen, die Einheiten, und Regionen sind jederzeit und ohne vorherige Ankündigung vorbehalten. Wenn Sie beabsichtigen, diese für Abrechnung werden auf automatisierte Weise zu verwenden, verwenden Sie die rechnungsstellung GUID zur eindeutigen Identifizierung von Textelementen abrechenbare. Wenn es sich bei der rechnungsstellung GUID aufgrund eines neuen abrechnungsmodells geplant ist, werden Sie vor der Änderung benachrichtigt.'
    syntax:
      content: 'function get(filter: string, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: filter
          type:
            - string
          description: 'Der Filter auf die Operation angewendet werden soll. Unterstützt nur die "Eq" und "und" logische Operatoren, die zu diesem Zeitpunkt. Alle 4 Query Parameter "OfferDurableId", "Currency", "Locale", "Region" sind erforderlich, einen Teil der $filter sein.'
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.RateCardGetResponse>
    package: '@azure/arm-commerce'
  - uid: '@azure/arm-commerce.RateCard.get_2'
    name: 'get(string, RequestOptionsBase, ServiceCallback<ResourceRateCardInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function get(filter: string, options: RequestOptionsBase, callback: ServiceCallback<ResourceRateCardInfo>)'
      parameters:
        - id: filter
          type:
            - string
          description: 'Der Filter auf die Operation angewendet werden soll. Unterstützt nur die "Eq" und "und" logische Operatoren, die zu diesem Zeitpunkt. Alle 4 Query Parameter "OfferDurableId", "Currency", "Locale", "Region" sind erforderlich, einen Teil der $filter sein.'
        - id: options
          type:
            - RequestOptionsBase
          description: Die optionalen Parameter
        - id: callback
          type:
            - ServiceCallback<@azure/arm-commerce.ResourceRateCardInfo>
          description: |
            Der Rückruf
      return:
        type:
          - Promise<Models.RateCardGetResponse>
    package: '@azure/arm-commerce'
  - uid: '@azure/arm-commerce.RateCard.get_1'
    name: 'get(string, ServiceCallback<ResourceRateCardInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function get(filter: string, callback: ServiceCallback<ResourceRateCardInfo>)'
      parameters:
        - id: filter
          type:
            - string
          description: 'Der Filter auf die Operation angewendet werden soll. Unterstützt nur die "Eq" und "und" logische Operatoren, die zu diesem Zeitpunkt. Alle 4 Query Parameter "OfferDurableId", "Currency", "Locale", "Region" sind erforderlich, einen Teil der $filter sein.'
        - id: callback
          type:
            - ServiceCallback<@azure/arm-commerce.ResourceRateCardInfo>
          description: |
            Der Rückruf
      return:
        type:
          - Promise<Models.RateCardGetResponse>
    package: '@azure/arm-commerce'
  - uid: '@azure/arm-commerce.RateCard.constructor'
    name: RateCard(UsageManagementClientContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Erstellen Sie eine Gebührenkarte.
    syntax:
      content: 'new RateCard(client: UsageManagementClientContext)'
      parameters:
        - id: client
          type:
            - '@azure/arm-commerce.UsageManagementClientContext'
          description: |
            Verweis auf den Dienstclient.
    package: '@azure/arm-commerce'
references:
  - uid: '@azure/arm-commerce.UsageManagementClientContext'
    name: UsageManagementClientContext
    spec.typeScript:
      - name: UsageManagementClientContext
        fullName: UsageManagementClientContext
        uid: '@azure/arm-commerce.UsageManagementClientContext'
  - uid: ServiceCallback<@azure/arm-commerce.ResourceRateCardInfo>
    name: ResourceRateCardInfo>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ResourceRateCardInfo
        fullName: ResourceRateCardInfo
        uid: '@azure/arm-commerce.ResourceRateCardInfo'
      - name: '>'
        fullName: '>'