### YamlMime:UniversalReference
ms.openlocfilehash: ed7f92526f273477e153fad3fe0ab03db0704f34
ms.sourcegitcommit: efa2d98deffe8a0d41a8d63f9f07aa720862e6ab
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 12/13/2018
ms.locfileid: "52104225"
items:
- uid: '@azure/event-processor-host.LeaseManager'
  name: LeaseManager
  fullName: LeaseManager
  children:
  - '@azure/event-processor-host.LeaseManager.acquireLease'
  - '@azure/event-processor-host.LeaseManager.createAllLeasesIfNotExists'
  - '@azure/event-processor-host.LeaseManager.createLeaseStoreIfNotExists'
  - '@azure/event-processor-host.LeaseManager.deleteLease'
  - '@azure/event-processor-host.LeaseManager.deleteLeaseStore'
  - '@azure/event-processor-host.LeaseManager.getAllLeases'
  - '@azure/event-processor-host.LeaseManager.getLease'
  - '@azure/event-processor-host.LeaseManager.leaseDuration'
  - '@azure/event-processor-host.LeaseManager.leaseRenewInterval'
  - '@azure/event-processor-host.LeaseManager.leaseStoreExists'
  - '@azure/event-processor-host.LeaseManager.releaseLease'
  - '@azure/event-processor-host.LeaseManager.renewLease'
  - '@azure/event-processor-host.LeaseManager.updateLease'
  langs:
  - typeScript
  type: interface
  summary: ''
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.acquireLease'
  name: acquireLease(CompleteLease)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="113fe-101">Abrufen des Leases für die gewünschte Partition für diese EventProcessorHost.</span><span class="sxs-lookup"><span data-stu-id="113fe-101">Acquire the lease on the desired partition for this EventProcessorHost.</span></span>

    <span data-ttu-id="113fe-102">Beachten Sie, dass es zulässig ist, eine Lease abgerufen werden, die bereits von einem anderen Host gehört.</span><span class="sxs-lookup"><span data-stu-id="113fe-102">Note that it is legal to acquire a lease that is already owned by another host.</span></span>

    <span data-ttu-id="113fe-103">Lease stehlen ist wie die Partitionen verteilt werden, wenn weitere Hosts gestartet werden.</span><span class="sxs-lookup"><span data-stu-id="113fe-103">Lease-stealing is how partitions are redistributed when additional hosts are started.</span></span>


    <span data-ttu-id="113fe-104">Die vorhandene Azure Storage-Implementierung kann Racebedingungen zwischen zwei Hostinstanzen, die beim Abrufen oder die Lease zu stehlen, zur gleichen Zeit auftreten.</span><span class="sxs-lookup"><span data-stu-id="113fe-104">The existing Azure Storage implementation can experience races between two host instances attempting to acquire or steal the lease at the same time.</span></span> <span data-ttu-id="113fe-105">Zur Vermeidung von Situationen, in denen zwei Hostinstanzen, sind sowohl der Meinung, deren Besitzer Sie sind der Leases Datenerfassung kann fehlschlagen, ohne Fehler durch "false" zurückgeben und tun, also wenn Zweifel – wird von den schlimmsten Fall, der auftreten können, die keine Hostinstanz die Lease für einen kurzen Zeitraum besitzt.</span><span class="sxs-lookup"><span data-stu-id="113fe-105">To avoid situations where two host instances both believe that they own the lease, acquisition can fail without errors by returning false and should do so when there is any doubt -- the worst that can happen is that no host instance owns the lease for a short time.</span></span> <span data-ttu-id="113fe-106">Dies unterscheidet sich qualitativ von, z. B. den zugrunde liegenden Speicher, die keinen Zugriff Ausnahmefehler auslöst, wird ein Fehler.</span><span class="sxs-lookup"><span data-stu-id="113fe-106">This is qualitatively different from, for example, the underlying store throwing an access exception, which is an error.</span></span>
  syntax:
    content: 'function acquireLease(lease: CompleteLease)'
    parameters:
    - id: lease
      type:
      - '@azure/event-processor-host.CompleteLease'
      description: <span data-ttu-id="113fe-107">Lease-Informationen für die gewünschte Partition aus als zuvor abgerufene `getLease()`.</span><span class="sxs-lookup"><span data-stu-id="113fe-107">Lease info for the desired partition as previously obtained from `getLease()`.</span></span>
    return:
      type:
      - Promise<boolean>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.createAllLeasesIfNotExists'
  name: createAllLeasesIfNotExists(string[])
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="113fe-108">Erstellen Sie im Speicher die Lease-Informationen für die angegebene Partition, wenn er nicht vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="113fe-108">Create in the store the lease info for the given partition, if it does not exist.</span></span> <span data-ttu-id="113fe-109">Keine durchführen Sie Aktion, wenn sie bereits im Speicher vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="113fe-109">Do nothing if it does exist in the store already.</span></span>
  syntax:
    content: 'function createAllLeasesIfNotExists(partitionIds: string[])'
    parameters:
    - id: partitionIds
      type:
      - string[]
      description: <span data-ttu-id="113fe-110">IDs der Lease-Informationen für den zu erstellenden Partitionen</span><span class="sxs-lookup"><span data-stu-id="113fe-110">ids of partitions to create lease info for</span></span>
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.createLeaseStoreIfNotExists'
  name: createLeaseStoreIfNotExists()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="113fe-111">Erstellen Sie die Lease-Speicher aus, wenn er nicht vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="113fe-111">Create the lease store if it doesn't exist.</span></span> <span data-ttu-id="113fe-112">Keine durchführen Sie Aktion, wenn er vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="113fe-112">Do nothing if it does exist.</span></span>
  syntax:
    content: function createLeaseStoreIfNotExists()
    parameters: []
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.deleteLease'
  name: deleteLease(CompleteLease)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="113fe-113">Löschen Sie die Lease-Informationen für die angegebene Partition aus dem Store.</span><span class="sxs-lookup"><span data-stu-id="113fe-113">Delete the lease info for the given partition from the store.</span></span> <span data-ttu-id="113fe-114">Wenn keine gespeicherte Lease für die angegebene Partition vorhanden ist, wird, die als erfolgreich behandelt.</span><span class="sxs-lookup"><span data-stu-id="113fe-114">If there is no stored lease for the given partition, that is treated as success.</span></span>
  syntax:
    content: 'function deleteLease(lease: CompleteLease)'
    parameters:
    - id: lease
      type:
      - '@azure/event-processor-host.CompleteLease'
      description: <span data-ttu-id="113fe-115">Lease-Informationen für die gewünschte Partition aus als zuvor abgerufene `getLease()`.</span><span class="sxs-lookup"><span data-stu-id="113fe-115">Lease info for the desired partition as previously obtained from `getLease()`.</span></span>
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.deleteLeaseStore'
  name: deleteLeaseStore()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="113fe-116">Löschen Sie die Lease-Store.</span><span class="sxs-lookup"><span data-stu-id="113fe-116">Delete lease store.</span></span>
  syntax:
    content: function deleteLeaseStore()
    parameters: []
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.getAllLeases'
  name: getAllLeases()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="113fe-117">Gibt die einfache BaseLease für alle Leases enthält, die Namen der zuständige Host und gibt an, ob die Lease abgelaufen ist.</span><span class="sxs-lookup"><span data-stu-id="113fe-117">Returns lightweight BaseLease for all leases, which includes name of owning host and whether lease is expired.</span></span> <span data-ttu-id="113fe-118">Eine Implementierung kann CompleteLease oder eine eigene von CompleteLease abgeleitete Klasse zurückgeben, aber es ist wichtig, dass GetAllLeases so schnell wie möglich ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="113fe-118">An implementation is free to return CompleteLease or its own class derived from CompleteLease, but it is important that getAllLeases run as fast as possible.</span></span> <span data-ttu-id="113fe-119">Wenn es schneller erhalten nur die Informationen, die für eine BaseLease erforderlich ist, empfehlen wir stark tun.</span><span class="sxs-lookup"><span data-stu-id="113fe-119">If it is faster to obtain only the information required for a BaseLease, we heavily recommend doing that.</span></span>
  syntax:
    content: function getAllLeases()
    parameters: []
    return:
      type:
      - Promise<@azure/event-processor-host.BaseLease[]>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.getLease'
  name: getLease(string)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="113fe-120">Ruft die Lease-Informationen für die angegebene Partition ab.</span><span class="sxs-lookup"><span data-stu-id="113fe-120">Gets the lease info for the specified partition.</span></span> <span data-ttu-id="113fe-121">Kann zurückgeben `undefined` Wenn keine Lease im Speicher für die angegebene Partition erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="113fe-121">Can return `undefined` if no lease has been created in the store for the specified partition.</span></span>
  syntax:
    content: 'function getLease(partitionId: string)'
    parameters:
    - id: partitionId
      type:
      - string
      description: <span data-ttu-id="113fe-122">Partitions-Id, um die Lease für zu erhalten.</span><span class="sxs-lookup"><span data-stu-id="113fe-122">Partition id to get the lease for.</span></span>
    return:
      type:
      - Promise<@azure/event-processor-host.CompleteLease | undefined>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.leaseDuration'
  name: leaseDuration
  fullName: leaseDuration
  children: []
  langs:
  - typeScript
  type: property
  summary: <span data-ttu-id="113fe-123">{Number} LeaseDuration Leasedauer **in Sekunden** bevor es abläuft, es sei denn, erneuert.</span><span class="sxs-lookup"><span data-stu-id="113fe-123">{number} leaseDuration Duration of a lease **in seconds** before it expires unless renewed.</span></span>
  syntax:
    content: 'leaseDuration: number'
    return:
      type:
      - number
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.leaseRenewInterval'
  name: leaseRenewInterval
  fullName: leaseRenewInterval
  children: []
  langs:
  - typeScript
  type: property
  summary: >-
    <span data-ttu-id="113fe-124">{Number} LeaseRenewInterval des ruheintervalls **in Sekunden** zwischen Überprüfungen.</span><span class="sxs-lookup"><span data-stu-id="113fe-124">{number} leaseRenewInterval The sleep interval **in seconds** between scans.</span></span>


    <span data-ttu-id="113fe-125">Können eine Lease-Manager-Implementierung, PartitionManager angeben, wie oft er Leases überprüfen und zu erneuern, sollte ein.</span><span class="sxs-lookup"><span data-stu-id="113fe-125">Allows a lease manager implementation to specify to PartitionManager how often it should scan leases and renew them.</span></span> <span data-ttu-id="113fe-126">Um die Leases rechtzeitig zu verteilen, nachdem ein Host ist nicht mehr ausgeführt, empfehlen wir relativ kurzen Zeit, z. B. zehn Sekunden.</span><span class="sxs-lookup"><span data-stu-id="113fe-126">In order to redistribute leases in a timely fashion after a host ceases operating, we recommend a relatively short interval, such as ten seconds.</span></span> <span data-ttu-id="113fe-127">Natürlich sollte es kleiner als die Hälfte der Länge Lease um versehentlichen Ablauf zu verhindern.</span><span class="sxs-lookup"><span data-stu-id="113fe-127">Obviously it should be less than half of the lease length, to prevent accidental expiration.</span></span>
  syntax:
    content: 'leaseRenewInterval: number'
    return:
      type:
      - number
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.leaseStoreExists'
  name: leaseStoreExists()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="113fe-128">Existiert der Lease-Store?</span><span class="sxs-lookup"><span data-stu-id="113fe-128">Does the lease store exist?</span></span>
  syntax:
    content: function leaseStoreExists()
    parameters: []
    return:
      type:
      - Promise<boolean>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.releaseLease'
  name: releaseLease(CompleteLease)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="113fe-129">Geben Sie auf eine Lease, die derzeit von diesem Host aufrecht erhalten.</span><span class="sxs-lookup"><span data-stu-id="113fe-129">Give up a lease currently held by this host.</span></span>

    <span data-ttu-id="113fe-130">Wenn die Lease, abgelaufen sind oder gestohlen wurden, freigegeben wurde, ist nicht erforderlich, und schlägt fehl, wenn versucht.</span><span class="sxs-lookup"><span data-stu-id="113fe-130">If the lease has been stolen, or expired, releasing it is unnecessary, and will fail if attempted.</span></span>
  syntax:
    content: 'function releaseLease(lease: CompleteLease)'
    parameters:
    - id: lease
      type:
      - '@azure/event-processor-host.CompleteLease'
      description: <span data-ttu-id="113fe-131">Lease-Informationen für die gewünschte Partition aus als zuvor abgerufene `getLease()`.</span><span class="sxs-lookup"><span data-stu-id="113fe-131">Lease info for the desired partition as previously obtained from `getLease()`.</span></span>
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.renewLease'
  name: renewLease(CompleteLease)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="113fe-132">Erneuern einer Leases, die derzeit von diesem Host aufrecht erhalten.</span><span class="sxs-lookup"><span data-stu-id="113fe-132">Renew a lease currently held by this host.</span></span>

    <span data-ttu-id="113fe-133">Wenn die Lease erstellt, die durch eine andere Hostinstanz (gestohlene oder nach dem Ablauf) oder explizit aufgehoben wurde, muss die RenewLease "false" zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="113fe-133">If the lease has been taken by another host instance (either stolen or after expiration) or explicitly released, renewLease must return false.</span></span> <span data-ttu-id="113fe-134">Mit der Azure Storage-basierten Implementierung, es ist möglich, eine abgelaufene Lease zu verlängern, die nicht von einem anderen Host ausgeführt wurden, sodass Ihre Implementierung, die oder nicht, kann je nachdem, was praktisch ist.</span><span class="sxs-lookup"><span data-stu-id="113fe-134">With the Azure Storage-based implementation, it IS possible to renew an expired lease that has not been taken by another host, so your implementation can allow that or not, whichever is convenient.</span></span> <span data-ttu-id="113fe-135">Wenn dies nicht der Fall ist, sollte die RenewLease "false" zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="113fe-135">If it does not, renewLease should return false.</span></span>
  syntax:
    content: 'function renewLease(lease: CompleteLease)'
    parameters:
    - id: lease
      type:
      - '@azure/event-processor-host.CompleteLease'
      description: <span data-ttu-id="113fe-136">die Lease erneuert werden soll.</span><span class="sxs-lookup"><span data-stu-id="113fe-136">lease to be renewed.</span></span>
    return:
      type:
      - Promise<boolean>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.updateLease'
  name: updateLease(CompleteLease)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="113fe-137">Aktualisieren Sie den Store mit den Informationen in die angegebene Lease an.</span><span class="sxs-lookup"><span data-stu-id="113fe-137">Update the store with the information in the provided lease.</span></span>

    <span data-ttu-id="113fe-138">Es ist notwendig, eine Lease aktuell zu halten, um diese zu aktualisieren.</span><span class="sxs-lookup"><span data-stu-id="113fe-138">It is necessary to currently hold a lease in order to update it.</span></span> <span data-ttu-id="113fe-139">Wenn die Lease gestohlen oder ist abgelaufen oder wurde freigegeben, können sie nicht aktualisiert werden.</span><span class="sxs-lookup"><span data-stu-id="113fe-139">If the lease has been stolen, or expired, or released, it cannot be updated.</span></span> <span data-ttu-id="113fe-140">Lease-Manager-Implementierungen sollten die Lease erneuern, ehe Sie das Update, um den Ablauf der Lease während des Prozesses zu vermeiden.</span><span class="sxs-lookup"><span data-stu-id="113fe-140">Lease manager implementations should renew the lease before performing the update to avoid lease expiration during the process.</span></span>
  syntax:
    content: 'function updateLease(lease: CompleteLease)'
    parameters:
    - id: lease
      type:
      - '@azure/event-processor-host.CompleteLease'
      description: <span data-ttu-id="113fe-141">Neue Leaseinformationen gespeichert werden.</span><span class="sxs-lookup"><span data-stu-id="113fe-141">New lease information to be stored.</span></span>
    return:
      type:
      - Promise<boolean>
  package: '@azure/event-processor-host'
references:
- uid: '@azure/event-processor-host.CompleteLease'
  name: CompleteLease
  spec.typeScript:
  - name: CompleteLease
    fullName: CompleteLease
    uid: '@azure/event-processor-host.CompleteLease'
- uid: Promise<@azure/event-processor-host.BaseLease[]>
  name: BaseLease[]>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: BaseLease
    fullName: BaseLease
    uid: '@azure/event-processor-host.BaseLease'
  - name: '[]>'
    fullName: '[]>'
- uid: Promise<@azure/event-processor-host.CompleteLease | undefined>
  name: CompleteLease | undefined>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: CompleteLease
    fullName: CompleteLease
    uid: '@azure/event-processor-host.CompleteLease'
  - name: " | undefined>"
    fullName: " | undefined>"
