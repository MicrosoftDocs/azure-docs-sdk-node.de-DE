### YamlMime:UniversalReference
ms.openlocfilehash: a00377b11a0a4f5c6d2453d40f079b28cb2f6aff
ms.sourcegitcommit: efa2d98deffe8a0d41a8d63f9f07aa720862e6ab
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 12/13/2018
ms.locfileid: "52121117"
items:
- uid: '@azure/event-processor-host.CheckpointManager'
  name: CheckpointManager
  fullName: CheckpointManager
  children:
  - '@azure/event-processor-host.CheckpointManager.checkpointStoreExists'
  - '@azure/event-processor-host.CheckpointManager.createAllCheckpointsIfNotExists'
  - '@azure/event-processor-host.CheckpointManager.createCheckpointStoreIfNotExists'
  - '@azure/event-processor-host.CheckpointManager.deleteCheckpoint'
  - '@azure/event-processor-host.CheckpointManager.deleteCheckpointStore'
  - '@azure/event-processor-host.CheckpointManager.getCheckpoint'
  - '@azure/event-processor-host.CheckpointManager.updateCheckpoint'
  langs:
  - typeScript
  type: interface
  summary: ''
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.CheckpointManager.checkpointStoreExists'
  name: checkpointStoreExists()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="3a739-101">Existiert die Prüfpunkt-Store?</span><span class="sxs-lookup"><span data-stu-id="3a739-101">Does the checkpoint store exist?</span></span>
  syntax:
    content: function checkpointStoreExists()
    parameters: []
    return:
      type:
      - Promise<boolean>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.CheckpointManager.createAllCheckpointsIfNotExists'
  name: createAllCheckpointsIfNotExists(string[])
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="3a739-102">Erstellt die Prüfpunkt-Platzhalter für die angegebenen Partitionen.</span><span class="sxs-lookup"><span data-stu-id="3a739-102">Creates the checkpoint HOLDERs for the given partitions.</span></span> <span data-ttu-id="3a739-103">Führt keine Aktion für alle Prüfpunkte werden, die bereits vorhanden.</span><span class="sxs-lookup"><span data-stu-id="3a739-103">Does nothing for any checkpoint HOLDERs that already exist.</span></span>

    <span data-ttu-id="3a739-104">Die Semantik dieser sind kompliziert, da es möglich ist, verwenden den gleichen Speicher für Leases und Prüfpunkte (die Azure Storage-Implementierung erfolgt), und es ist erforderlich, um eine Lease für jede Partition zu erhalten, aber es ist nicht erforderlich, um einen Prüfpunkt für eine Partition zu erhalten.</span><span class="sxs-lookup"><span data-stu-id="3a739-104">The semantics of this are complicated because it is possible to use the same store for both leases and checkpoints (the Azure Storage implementation does so) and it is required to have a lease for every partition but it is not required to have a checkpoint for a partition.</span></span>

    <span data-ttu-id="3a739-105">Es ist ein gültiges Szenario zum Prüfpunkte überhaupt niemals verwendet, daher es wichtig, für den Speicher ist zu unterscheiden, erstellen die Structure(s), die einen Prüfpunkt enthält, oder Erstellen eines Prüfpunkts (Speichern ein paar Offset/Sequenz, in der Struktur).</span><span class="sxs-lookup"><span data-stu-id="3a739-105">It is a valid scenario to never use checkpoints at all, so it is important for the store to distinguish between creating the structure(s) that will hold a checkpoint and actually creating a checkpoint (storing an offset/sequence number pair in the structure).</span></span>
  syntax:
    content: 'function createAllCheckpointsIfNotExists(partitionIds: string[])'
    parameters:
    - id: partitionIds
      type:
      - string[]
      description: <span data-ttu-id="3a739-106">Liste der Prüfpunkt-Platzhalter für die zu erstellenden Partitionen.</span><span class="sxs-lookup"><span data-stu-id="3a739-106">List of partitions to create checkpoint HOLDERs for.</span></span>
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.CheckpointManager.createCheckpointStoreIfNotExists'
  name: createCheckpointStoreIfNotExists()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="3a739-107">Erstellen Sie den Prüfpunkt-Speicher aus, wenn er nicht vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="3a739-107">Create the checkpoint store if it doesn't exist.</span></span> <span data-ttu-id="3a739-108">Hat keine Auswirkung, wenn es vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="3a739-108">Does nothing if it exists.</span></span>
  syntax:
    content: function createCheckpointStoreIfNotExists()
    parameters: []
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.CheckpointManager.deleteCheckpoint'
  name: deleteCheckpoint(string)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="3a739-109">Löschen Sie die gespeicherten Prüfpunkt für die angegebene Partition.</span><span class="sxs-lookup"><span data-stu-id="3a739-109">Delete the stored checkpoint for the given partition.</span></span> <span data-ttu-id="3a739-110">Wenn keine gespeicherten Prüfpunkt für die angegebene Partition vorhanden ist, wird, die als erfolgreich behandelt.</span><span class="sxs-lookup"><span data-stu-id="3a739-110">If there is no stored checkpoint for the given partition, that is treated as success.</span></span> <span data-ttu-id="3a739-111">Löschen den Prüfpunkt Inhaber ist zulässig, aber nicht erforderlich; die Implementierung kann je besser geeignet ist.</span><span class="sxs-lookup"><span data-stu-id="3a739-111">Deleting the checkpoint HOLDER is allowed but not required; your implementation is free to do whichever is more convenient.</span></span>
  syntax:
    content: 'function deleteCheckpoint(partitionId: string)'
    parameters:
    - id: partitionId
      type:
      - string
      description: <span data-ttu-id="3a739-112">Die PartitionId den Prüfpunkt aus dem Speicher gelöscht werden soll.</span><span class="sxs-lookup"><span data-stu-id="3a739-112">The partitionId to delete the checkpoint from the store.</span></span>
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.CheckpointManager.deleteCheckpointStore'
  name: deleteCheckpointStore()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="3a739-113">Löscht den Prüfpunkt-Speicher.</span><span class="sxs-lookup"><span data-stu-id="3a739-113">Deletes the checkpoint store.</span></span>
  syntax:
    content: function deleteCheckpointStore()
    parameters: []
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.CheckpointManager.getCheckpoint'
  name: getCheckpoint(string)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="3a739-114">Ruft die Prüfpunktinformationen zu einem der angegebenen Partition zugeordnet.</span><span class="sxs-lookup"><span data-stu-id="3a739-114">Gets the checkpoint info associated with the given partition.</span></span> <span data-ttu-id="3a739-115">Kann nicht definiert zurückgeben, wenn kein Prüfpunkt für die Partition erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="3a739-115">Could return undefined if no checkpoint has been created for that partition.</span></span>
  syntax:
    content: 'function getCheckpoint(partitionId: string)'
    parameters:
    - id: partitionId
      type:
      - string
      description: <span data-ttu-id="3a739-116">Die PartitionId, für die Prüfpunktinformationen zu erhalten.</span><span class="sxs-lookup"><span data-stu-id="3a739-116">The partitionId to get the checkpoint info for.</span></span>
    return:
      type:
      - Promise<@azure/event-processor-host.CheckpointInfo | undefined>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.CheckpointManager.updateCheckpoint'
  name: updateCheckpoint(CompleteLease, CheckpointInfo)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="3a739-117">Aktualisieren Sie den Prüfpunkt im Speicher, mit der Offset/SequenceNumber im bereitgestellten Prüfpunkt.</span><span class="sxs-lookup"><span data-stu-id="3a739-117">Update the checkpoint in the store with the offset/sequenceNumber in the provided checkpoint.</span></span>
  syntax:
    content: 'function updateCheckpoint(lease: CompleteLease, checkpoint: CheckpointInfo)'
    parameters:
    - id: lease
      type:
      - '@azure/event-processor-host.CompleteLease'
      description: <span data-ttu-id="3a739-118">Partitionsinformationen für die Durchführung ein Prüfpunkts.</span><span class="sxs-lookup"><span data-stu-id="3a739-118">Partition information against which to perform a checkpoint.</span></span>
    - id: checkpoint
      type:
      - '@azure/event-processor-host.CheckpointInfo'
      description: <span data-ttu-id="3a739-119">Offset/SequeceNumber zum Aktualisieren des Speichers mit</span><span class="sxs-lookup"><span data-stu-id="3a739-119">offset/sequeceNumber to update the store with</span></span>
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
references:
- uid: Promise<@azure/event-processor-host.CheckpointInfo | undefined>
  name: CheckpointInfo | undefined>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: CheckpointInfo
    fullName: CheckpointInfo
    uid: '@azure/event-processor-host.CheckpointInfo'
  - name: " | undefined>"
    fullName: " | undefined>"
- uid: '@azure/event-processor-host.CompleteLease'
  name: CompleteLease
  spec.typeScript:
  - name: CompleteLease
    fullName: CompleteLease
    uid: '@azure/event-processor-host.CompleteLease'
- uid: '@azure/event-processor-host.CheckpointInfo'
  name: CheckpointInfo
  spec.typeScript:
  - name: CheckpointInfo
    fullName: CheckpointInfo
    uid: '@azure/event-processor-host.CheckpointInfo'
