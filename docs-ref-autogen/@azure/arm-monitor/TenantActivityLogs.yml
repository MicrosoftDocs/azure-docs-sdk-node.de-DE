### YamlMime:UniversalReference
items:
  - uid: '@azure/arm-monitor.TenantActivityLogs'
    name: TenantActivityLogs
    fullName: TenantActivityLogs
    children:
      - '@azure/arm-monitor.TenantActivityLogs.list'
      - '@azure/arm-monitor.TenantActivityLogs.list_1'
      - '@azure/arm-monitor.TenantActivityLogs.list_2'
      - '@azure/arm-monitor.TenantActivityLogs.listNext'
      - '@azure/arm-monitor.TenantActivityLogs.listNext_2'
      - '@azure/arm-monitor.TenantActivityLogs.listNext_1'
      - '@azure/arm-monitor.TenantActivityLogs.constructor'
    langs:
      - typeScript
    type: class
    summary: 'Klasse, die eine TenantActivityLogs darstellt.'
    package: '@azure/arm-monitor'
  - uid: '@azure/arm-monitor.TenantActivityLogs.list'
    name: list(Models.TenantActivityLogsListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Ruft die Aktivitätsprotokolle für den Mandanten ab.<br>Alle Elemente, die für die API zum Abrufen der Aktivitätsprotokolle für das Abonnement gilt gilt für diese API (die Parameter, $filter usw.) zur Verfügung.<br>Eine Sache hier hingewiesen, dass diese API ist *nicht* Abrufen der Protokolle auf den einzelnen Abonnements des Mandanten aber nur die Flächen die Protokolle, die auf Mandantenebene generiert wurden.'
    syntax:
      content: 'function list(options?: Models.TenantActivityLogsListOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.TenantActivityLogsListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.TenantActivityLogsListResponse>
    package: '@azure/arm-monitor'
  - uid: '@azure/arm-monitor.TenantActivityLogs.list_1'
    name: list(ServiceCallback<EventDataCollection>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function list(callback: ServiceCallback<EventDataCollection>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/arm-monitor.EventDataCollection>
          description: |
            Der Rückruf
      return:
        type:
          - Promise<Models.TenantActivityLogsListResponse>
    package: '@azure/arm-monitor'
  - uid: '@azure/arm-monitor.TenantActivityLogs.list_2'
    name: 'list(TenantActivityLogsListOptionalParams, ServiceCallback<EventDataCollection>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function list(options: TenantActivityLogsListOptionalParams, callback: ServiceCallback<EventDataCollection>)'
      parameters:
        - id: options
          type:
            - '@azure/arm-monitor.TenantActivityLogsListOptionalParams'
          description: Die optionalen Parameter
        - id: callback
          type:
            - ServiceCallback<@azure/arm-monitor.EventDataCollection>
          description: |
            Der Rückruf
      return:
        type:
          - Promise<Models.TenantActivityLogsListResponse>
    package: '@azure/arm-monitor'
  - uid: '@azure/arm-monitor.TenantActivityLogs.listNext'
    name: 'listNext(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Ruft die Aktivitätsprotokolle für den Mandanten ab.<br>Alle Elemente, die für die API zum Abrufen der Aktivitätsprotokolle für das Abonnement gilt gilt für diese API (die Parameter, $filter usw.) zur Verfügung.<br>Eine Sache hier hingewiesen, dass diese API ist *nicht* Abrufen der Protokolle auf den einzelnen Abonnements des Mandanten aber nur die Flächen die Protokolle, die auf Mandantenebene generiert wurden.'
    syntax:
      content: 'function listNext(nextPageLink: string, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: nextPageLink
          type:
            - string
          description: Der NextLink aus dem vorherigen erfolgreichen Aufruf von List-Vorgang.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.TenantActivityLogsListNextResponse>
    package: '@azure/arm-monitor'
  - uid: '@azure/arm-monitor.TenantActivityLogs.listNext_2'
    name: 'listNext(string, RequestOptionsBase, ServiceCallback<EventDataCollection>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function listNext(nextPageLink: string, options: RequestOptionsBase, callback: ServiceCallback<EventDataCollection>)'
      parameters:
        - id: nextPageLink
          type:
            - string
          description: Der NextLink aus dem vorherigen erfolgreichen Aufruf von List-Vorgang.
        - id: options
          type:
            - RequestOptionsBase
          description: Die optionalen Parameter
        - id: callback
          type:
            - ServiceCallback<@azure/arm-monitor.EventDataCollection>
          description: |
            Der Rückruf
      return:
        type:
          - Promise<Models.TenantActivityLogsListNextResponse>
    package: '@azure/arm-monitor'
  - uid: '@azure/arm-monitor.TenantActivityLogs.listNext_1'
    name: 'listNext(string, ServiceCallback<EventDataCollection>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function listNext(nextPageLink: string, callback: ServiceCallback<EventDataCollection>)'
      parameters:
        - id: nextPageLink
          type:
            - string
          description: Der NextLink aus dem vorherigen erfolgreichen Aufruf von List-Vorgang.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-monitor.EventDataCollection>
          description: |
            Der Rückruf
      return:
        type:
          - Promise<Models.TenantActivityLogsListNextResponse>
    package: '@azure/arm-monitor'
  - uid: '@azure/arm-monitor.TenantActivityLogs.constructor'
    name: TenantActivityLogs(MonitorManagementClientContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Erstellen Sie eine TenantActivityLogs.
    syntax:
      content: 'new TenantActivityLogs(client: MonitorManagementClientContext)'
      parameters:
        - id: client
          type:
            - '@azure/arm-monitor.MonitorManagementClientContext'
          description: |
            Verweis auf den Dienstclient.
    package: '@azure/arm-monitor'
references:
  - uid: '@azure/arm-monitor.MonitorManagementClientContext'
    name: MonitorManagementClientContext
    spec.typeScript:
      - name: MonitorManagementClientContext
        fullName: MonitorManagementClientContext
        uid: '@azure/arm-monitor.MonitorManagementClientContext'
  - uid: ServiceCallback<@azure/arm-monitor.EventDataCollection>
    name: EventDataCollection>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: EventDataCollection
        fullName: EventDataCollection
        uid: '@azure/arm-monitor.EventDataCollection'
      - name: '>'
        fullName: '>'
  - uid: '@azure/arm-monitor.TenantActivityLogsListOptionalParams'
    name: TenantActivityLogsListOptionalParams
    spec.typeScript:
      - name: TenantActivityLogsListOptionalParams
        fullName: TenantActivityLogsListOptionalParams
        uid: '@azure/arm-monitor.TenantActivityLogsListOptionalParams'