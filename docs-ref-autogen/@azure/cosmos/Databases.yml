### YamlMime:UniversalReference
ms.openlocfilehash: 56789ebeca7ab18b9af71b968096cbb2061fddb9
ms.sourcegitcommit: 286f52ea38c9eff2ec9d4f8cabeb86f62fd9c406
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 08/22/2018
ms.locfileid: "41691159"
items:
- uid: '@azure/cosmos.Databases'
  name: Databases
  fullName: Databases
  children:
  - '@azure/cosmos.Databases.create'
  - '@azure/cosmos.Databases.createIfNotExists'
  - '@azure/cosmos.Databases.constructor'
  - '@azure/cosmos.Databases.query'
  - '@azure/cosmos.Databases.readAll'
  langs:
  - typeScript
  type: class
  summary: Vorgänge zum Erstellen neuer Datenbanken und Lesen/Abfragen für alle Datenbanken
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.create'
  name: create
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    Sendet eine Anforderung zum Erstellen einer Datenbank.

    Eine Datenbank verwaltet die Benutzer, Berechtigungen und eine Gruppe von Containern.

    Jedes Azure Cosmos DB-Datenbankkonto kann mehrere unabhängige benannte Datenbanken, mit der Datenbank wird der logische Container für Daten zu unterstützen.


    Jede Datenbank besteht aus einem oder mehreren Containern, von denen jeder wiederum einen oder mehrere Dokumente enthalten. Da Datenbanken sind eine eine administrative-Ressource, den Service Master Key wird erforderlich sein, um zugreifen und eine Aktion, die mithilfe der APIs für die Benutzer erfolgreich abgeschlossen.
  syntax:
    content: 'function create(body: DatabaseDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.DatabaseDefinition'
      description: Die <xref:DatabaseDefinition> darstellt, die die <xref:Database> erstellt werden.
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: >
        Verwenden Sie Optionen wie Seitengröße der Antwort, Fortsetzungstoken usw. festlegen.
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.DatabaseResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.createIfNotExists'
  name: createIfNotExists
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    Überprüfen Sie, wenn eine Datenbank vorhanden ist und nicht der Fall, erstellt.

    Dies veranlasst einen Lesevorgang auf Grundlage der Id in der `body`, wenn es nicht gefunden wird, einen Create-Vorgang.

    Eine Datenbank verwaltet die Benutzer, Berechtigungen und eine Gruppe von Containern.

    Jedes Azure Cosmos DB-Datenbankkonto kann mehrere unabhängige benannte Datenbanken, mit der Datenbank wird der logische Container für Daten zu unterstützen.


    Jede Datenbank besteht aus einem oder mehreren Containern, von denen jeder wiederum einen oder mehrere Dokumente enthalten. Da Datenbanken sind eine eine administrative-Ressource, den Service Master Key wird erforderlich sein, um zugreifen und eine Aktion, die mithilfe der APIs für die Benutzer erfolgreich abgeschlossen.
  syntax:
    content: 'function createIfNotExists(body: DatabaseDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.DatabaseDefinition'
      description: Die <xref:DatabaseDefinition> darstellt, die die <xref:Database> erstellt werden.
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: "\n"
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.DatabaseResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.constructor'
  name: Databases
  children: []
  type: constructor
  langs:
  - typeScript
  summary: ''
  syntax:
    content: 'new Databases(client: CosmosClient, clientContext: ClientContext)'
    parameters:
    - id: client
      type:
      - '@azure/cosmos.CosmosClient'
      description: ''
    - id: clientContext
      type:
      - ClientContext
      description: ''
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.query'
  name: query
  children: []
  type: method
  langs:
  - typeScript
  summary: Alle Benutzerdatenbanken abgefragt.
  syntax:
    content: 'function query(query: string | SqlQuerySpec, options?: FeedOptions)'
    parameters:
    - id: query
      type:
      - string | @azure/cosmos.SqlQuerySpec
      description: Abfrage-Konfiguration für den Vorgang. Finden Sie unter <xref:SqlQuerySpec> für Weitere Informationen zum Konfigurieren einer Abfrage.
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: Verwenden Sie Optionen wie Seitengröße der Antwort, Fortsetzungstoken usw. festlegen.
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<@azure/cosmos.DatabaseDefinition>'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.readAll'
  name: readAll
  children: []
  type: method
  langs:
  - typeScript
  summary: Liest alle Datenbanken.
  syntax:
    content: 'function readAll(options?: FeedOptions)'
    parameters:
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: Verwenden Sie Optionen wie Seitengröße der Antwort, Fortsetzungstoken usw. festlegen.
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<@azure/cosmos.DatabaseDefinition>'
  package: '@azure/cosmos'
references:
- uid: '@azure/cosmos.CosmosClient'
  spec.typeScript:
  - name: CosmosClient
    fullName: CosmosClient
    uid: '@azure/cosmos.CosmosClient'
- uid: '@azure/cosmos.DatabaseDefinition'
  spec.typeScript:
  - name: DatabaseDefinition
    fullName: DatabaseDefinition
    uid: '@azure/cosmos.DatabaseDefinition'
- uid: '@azure/cosmos.RequestOptions'
  spec.typeScript:
  - name: RequestOptions
    fullName: RequestOptions
    uid: '@azure/cosmos.RequestOptions'
- uid: Promise<@azure/cosmos.DatabaseResponse>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: DatabaseResponse
    fullName: DatabaseResponse
    uid: '@azure/cosmos.DatabaseResponse'
  - name: '>'
    fullName: '>'
- uid: string | @azure/cosmos.SqlQuerySpec
  spec.typeScript:
  - name: 'string | '
    fullName: 'string | '
  - name: SqlQuerySpec
    fullName: SqlQuerySpec
    uid: '@azure/cosmos.SqlQuerySpec'
- uid: '@azure/cosmos.FeedOptions'
  spec.typeScript:
  - name: FeedOptions
    fullName: FeedOptions
    uid: '@azure/cosmos.FeedOptions'
- uid: '@azure/cosmos.QueryIterator<@azure/cosmos.DatabaseDefinition>'
  spec.typeScript:
  - name: QueryIterator
    fullName: QueryIterator
    uid: '@azure/cosmos.QueryIterator'
  - name: <
    fullName: <
  - name: DatabaseDefinition
    fullName: DatabaseDefinition
    uid: '@azure/cosmos.DatabaseDefinition'
  - name: '>'
    fullName: '>'
