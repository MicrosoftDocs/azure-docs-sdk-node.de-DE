### YamlMime:UniversalReference
ms.openlocfilehash: 191cfc4fa4e9d81715994e7d0270373adb0a73b0
ms.sourcegitcommit: 286f52ea38c9eff2ec9d4f8cabeb86f62fd9c406
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 08/22/2018
ms.locfileid: "41701698"
items:
- uid: '@azure/cosmos.QueryIterator'
  name: QueryIterator
  fullName: QueryIterator<T>
  children:
  - '@azure/cosmos.QueryIterator.current'
  - '@azure/cosmos.QueryIterator.executeNext'
  - '@azure/cosmos.QueryIterator.forEach'
  - '@azure/cosmos.QueryIterator.getAsyncIterator'
  - '@azure/cosmos.QueryIterator.hasMoreResults'
  - '@azure/cosmos.QueryIterator.nextItem'
  - '@azure/cosmos.QueryIterator.reset'
  - '@azure/cosmos.QueryIterator.toArray'
  langs:
  - typeScript
  type: class
  summary: <span data-ttu-id="e7043-101">Stellt eine QueryIterator-Objekt, ein Implmenetation Feed oder -Abfrage-Antwort, die durchlaufen und die Antwort in der Azure Cosmos DB-Datenbankdienst durchlaufen ermöglicht.</span><span class="sxs-lookup"><span data-stu-id="e7043-101">Represents a QueryIterator Object, an implmenetation of feed or query response that enables traversal and iterating over the response in the Azure Cosmos DB database service.</span></span>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.current'
  name: current
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e7043-102">Abgerufen Sie das aktuelle Element auf der QueryIterator werden.</span><span class="sxs-lookup"><span data-stu-id="e7043-102">Retrieve the current element on the QueryIterator.</span></span>
  syntax:
    content: function current()
    parameters: []
    return:
      type:
      - Promise<@azure/cosmos.Response<T>>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.executeNext'
  name: executeNext
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e7043-103">Abgerufen Sie der nächste Stapel des Feeds und übergeben sie als ein Array an eine Funktion</span><span class="sxs-lookup"><span data-stu-id="e7043-103">Retrieve the next batch of the feed and pass them as an array to a function</span></span>
  syntax:
    content: function executeNext()
    parameters: []
    return:
      type:
      - Promise<@azure/cosmos.Response<T>>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.forEach'
  name: forEach
  children: []
  type: method
  langs:
  - typeScript
  summary: >-
    <span data-ttu-id="e7043-104">Ruft einen angegebenen Rückruf für die einzelnen Elemente, die von der Abfrage zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="e7043-104">Calls a specified callback for each item returned from the query.</span></span>

    <span data-ttu-id="e7043-105">Wird seriell ausgeführt; jeder Rückruf wird die nächste blockiert.</span><span class="sxs-lookup"><span data-stu-id="e7043-105">Runs serially; each callback blocks the next.</span></span>
  syntax:
    content: 'function forEach(callback: (result: T, headers?: IHeaders, index?: number) => boolean | void)'
    parameters:
    - id: callback
      type:
      - '(result: T, headers?: IHeaders, index?: number) => boolean | void'
      description: >
        <span data-ttu-id="e7043-106">Angegebene Rückruf.</span><span class="sxs-lookup"><span data-stu-id="e7043-106">Specified callback.</span></span>

        <span data-ttu-id="e7043-107">Erste Parameter ist das Ergebnis, zweiten Parameter (optional) ist, der aktuelle Zustand des Header-Objekt, dritte Parameter (optional) ist aktueller Index vorhanden.</span><span class="sxs-lookup"><span data-stu-id="e7043-107">First param is the result, second param (optional) is the current headers object state, third param (optional) is current index.</span></span>

        <span data-ttu-id="e7043-108">Nie wieder Callbacks werden aufgerufen, wenn eines davon "false" ergibt.</span><span class="sxs-lookup"><span data-stu-id="e7043-108">No more callbacks will be called if one of them results false.</span></span>
    return:
      type:
      - Promise<void>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.getAsyncIterator'
  name: getAsyncIterator
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="e7043-109">Ruft einen Async-Iterator, der bis zur Fertigstellung Ergebnisse erzielt werden.</span><span class="sxs-lookup"><span data-stu-id="e7043-109">Gets an async iterator that will yield results until completion.</span></span>

    <span data-ttu-id="e7043-110">Hinweis: AsyncIterators sind eine sehr neue Funktion, und müssen möglicherweise Polyfils usw. zu verwenden, um sie in Ihrem Code verwenden.</span><span class="sxs-lookup"><span data-stu-id="e7043-110">NOTE: AsyncIterators are a very new feature and you might need to use polyfils/etc. in order to use them in your code.</span></span>


    <span data-ttu-id="e7043-111">Wenn Sie TypeScript verwenden, Sie können die folgenden Polyfill so lange, wie Sie Ziel ES6 oder höher und auf Knoten 6 oder höher ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="e7043-111">If you're using TypeScript, you can use the following polyfill as long as you target ES6 or higher and are running on Node 6 or higher.</span></span>


    ```typescript

    if (!Symbol || !Symbol.asyncIterator) {
      (Symbol as any).asyncIterator = Symbol.for("Symbol.asyncIterator");
    }

    ```
  syntax:
    content: function getAsyncIterator()
    parameters: []
    return:
      type:
      - AsyncIterable<@azure/cosmos.Response<T>>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.hasMoreResults'
  name: hasMoreResults
  children: []
  type: method
  langs:
  - typeScript
  summary: ''
  syntax:
    content: function hasMoreResults()
    parameters: []
    return:
      type:
      - boolean
  package: '@azure/cosmos'
  deprecated:
    content: >-
      Instead check if nextItem() or current() returns undefined.


      Determine if there are still remaining resources to processs based on the value of the continuation token or the\

      elements remaining on the current batch in the QueryIterator.
- uid: '@azure/cosmos.QueryIterator.nextItem'
  name: nextItem
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e7043-112">Führen Sie eine angegebene Funktion auf das nächste Element in der QueryIterator an.</span><span class="sxs-lookup"><span data-stu-id="e7043-112">Execute a provided function on the next element in the QueryIterator.</span></span>
  syntax:
    content: function nextItem()
    parameters: []
    return:
      type:
      - Promise<@azure/cosmos.Response<T>>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.reset'
  name: reset
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e7043-113">Auf den Anfang der QueryIterator zurückgesetzt und alle darin enthaltenen Ressourcen löschen</span><span class="sxs-lookup"><span data-stu-id="e7043-113">Reset the QueryIterator to the beginning and clear all the resources inside it</span></span>
  syntax:
    content: function reset()
    parameters: []
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.toArray'
  name: toArray
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e7043-114">Rufen Sie alle Elemente des Feeds, und übergeben sie als ein Array an eine Funktion</span><span class="sxs-lookup"><span data-stu-id="e7043-114">Retrieve all the elements of the feed and pass them as an array to a function</span></span>
  syntax:
    content: function toArray()
    parameters: []
    return:
      type:
      - Promise<@azure/cosmos.Response<T[]>>
  package: '@azure/cosmos'
references:
- uid: Promise<@azure/cosmos.Response<T>>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: Response
    fullName: Response
    uid: '@azure/cosmos.Response'
  - name: <T>>
    fullName: <T>>
- uid: AsyncIterable<@azure/cosmos.Response<T>>
  spec.typeScript:
  - name: AsyncIterable<
    fullName: AsyncIterable<
  - name: Response
    fullName: Response
    uid: '@azure/cosmos.Response'
  - name: <T>>
    fullName: <T>>
- uid: Promise<@azure/cosmos.Response<T[]>>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: Response
    fullName: Response
    uid: '@azure/cosmos.Response'
  - name: <T[]>>
    fullName: <T[]>>
