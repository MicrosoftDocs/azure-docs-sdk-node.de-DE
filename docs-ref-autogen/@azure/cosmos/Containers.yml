### YamlMime:UniversalReference
ms.openlocfilehash: 1aa6f8d573fc6248e534db33c9d88b9d44b294c6
ms.sourcegitcommit: 286f52ea38c9eff2ec9d4f8cabeb86f62fd9c406
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 08/22/2018
ms.locfileid: "41702349"
items:
- uid: '@azure/cosmos.Containers'
  name: Containers
  fullName: Containers
  children:
  - '@azure/cosmos.Containers.constructor'
  - '@azure/cosmos.Containers.create'
  - '@azure/cosmos.Containers.createIfNotExists'
  - '@azure/cosmos.Containers.database'
  - '@azure/cosmos.Containers.query'
  - '@azure/cosmos.Containers.readAll'
  langs:
  - typeScript
  type: class
  summary: Vorgänge für den neuen Container erstellen, und Lesen/Abfragen von allen Containern
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.constructor'
  name: Containers
  children: []
  type: constructor
  langs:
  - typeScript
  summary: ''
  syntax:
    content: 'new Containers(database: Database, clientContext: ClientContext)'
    parameters:
    - id: database
      type:
      - '@azure/cosmos.Database'
      description: ''
    - id: clientContext
      type:
      - ClientContext
      description: ''
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.create'
  name: create
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    Erstellt einen Container.

    Ein Container ist ein benannter logischer Container für Elemente.


    Eine Datenbank kann NULL oder mehr benannte Container enthalten, und jeder Container besteht aus null oder mehr JSON-Elemente.


    Schemafreie wird, die Elemente in einem Container müssen nicht, eine Struktur oder ein Felder freizugeben.



    Da Container Anwendungsressourcen sind, können sie mit dem Hauptschlüssel oder Ressourcenschlüssel autorisiert werden.
  syntax:
    content: 'function create(body: ContainerDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.ContainerDefinition'
      description: Stellt den Text des Containers dar.
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: >
        Verwenden Sie Optionen wie Seitengröße der Antwort, Fortsetzungstoken usw. festlegen.
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ContainerResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.createIfNotExists'
  name: createIfNotExists
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    Prüft, ob ein Container vorhanden ist, ist dies nicht der Fall, wird er erstellt.

    Dies veranlasst einen Lesevorgang auf Grundlage der Id in der `body`, wenn es nicht gefunden wird, einen Create-Vorgang.

    Sie sollten sicherstellen, dass die Ausgabe den Text übereinstimmt, den Sie für nicht-Standardeigenschaften (z. B. Indizierung Richtlinie usw.) übergeben Ein Container ist ein benannter logischer Container für Elemente.


    Eine Datenbank kann NULL oder mehr benannte Container enthalten, und jeder Container besteht aus null oder mehr JSON-Elemente.


    Schemafreie wird, die Elemente in einem Container müssen nicht, eine Struktur oder ein Felder freizugeben.



    Da Container Anwendungsressourcen sind, können sie mit dem Hauptschlüssel oder Ressourcenschlüssel autorisiert werden.
  syntax:
    content: 'function createIfNotExists(body: ContainerDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.ContainerDefinition'
      description: Stellt den Text des Containers dar.
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: >
        Verwenden Sie Optionen wie Seitengröße der Antwort, Fortsetzungstoken usw. festlegen.
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ContainerResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.database'
  name: database
  fullName: database
  children: []
  langs:
  - typeScript
  type: property
  summary: ''
  syntax:
    content: 'database: Database'
    return:
      type:
      - '@azure/cosmos.Database'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.query'
  name: query
  children: []
  type: method
  langs:
  - typeScript
  summary: Fragt alle Container.
  syntax:
    content: 'function query(query: SqlQuerySpec, options?: FeedOptions)'
    parameters:
    - id: query
      type:
      - '@azure/cosmos.SqlQuerySpec'
      description: Abfrage-Konfiguration für den Vorgang. Finden Sie unter <xref:SqlQuerySpec> für Weitere Informationen zum Konfigurieren einer Abfrage.
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: Verwenden Sie Optionen wie Seitengröße der Antwort, Fortsetzungstoken usw. festlegen.
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<@azure/cosmos.ContainerDefinition>'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.readAll'
  name: readAll
  children: []
  type: method
  langs:
  - typeScript
  summary: Lesen Sie alle Container.
  syntax:
    content: 'function readAll(options?: FeedOptions)'
    parameters:
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: Verwenden Sie Optionen wie Seitengröße der Antwort, Fortsetzungstoken usw. festlegen.
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<@azure/cosmos.ContainerDefinition>'
  package: '@azure/cosmos'
references:
- uid: '@azure/cosmos.Database'
  spec.typeScript:
  - name: Database
    fullName: Database
    uid: '@azure/cosmos.Database'
- uid: '@azure/cosmos.ContainerDefinition'
  spec.typeScript:
  - name: ContainerDefinition
    fullName: ContainerDefinition
    uid: '@azure/cosmos.ContainerDefinition'
- uid: '@azure/cosmos.RequestOptions'
  spec.typeScript:
  - name: RequestOptions
    fullName: RequestOptions
    uid: '@azure/cosmos.RequestOptions'
- uid: Promise<@azure/cosmos.ContainerResponse>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: ContainerResponse
    fullName: ContainerResponse
    uid: '@azure/cosmos.ContainerResponse'
  - name: '>'
    fullName: '>'
- uid: '@azure/cosmos.SqlQuerySpec'
  spec.typeScript:
  - name: SqlQuerySpec
    fullName: SqlQuerySpec
    uid: '@azure/cosmos.SqlQuerySpec'
- uid: '@azure/cosmos.FeedOptions'
  spec.typeScript:
  - name: FeedOptions
    fullName: FeedOptions
    uid: '@azure/cosmos.FeedOptions'
- uid: '@azure/cosmos.QueryIterator<@azure/cosmos.ContainerDefinition>'
  spec.typeScript:
  - name: QueryIterator
    fullName: QueryIterator
    uid: '@azure/cosmos.QueryIterator'
  - name: <
    fullName: <
  - name: ContainerDefinition
    fullName: ContainerDefinition
    uid: '@azure/cosmos.ContainerDefinition'
  - name: '>'
    fullName: '>'
