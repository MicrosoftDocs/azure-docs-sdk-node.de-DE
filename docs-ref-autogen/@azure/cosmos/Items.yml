### YamlMime:UniversalReference
ms.openlocfilehash: e03cf2dd3e5568e032b681af3e7c2ed68f5694e7
ms.sourcegitcommit: 286f52ea38c9eff2ec9d4f8cabeb86f62fd9c406
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 08/22/2018
ms.locfileid: "41685339"
items:
- uid: '@azure/cosmos.Items'
  name: Items
  fullName: Items
  children:
  - '@azure/cosmos.Items.container'
  - '@azure/cosmos.Items.create'
  - '@azure/cosmos.Items.create_1'
  - '@azure/cosmos.Items.query'
  - '@azure/cosmos.Items.query_1'
  - '@azure/cosmos.Items.readAll'
  - '@azure/cosmos.Items.readAll_1'
  - '@azure/cosmos.Items.upsert'
  - '@azure/cosmos.Items.upsert_1'
  langs:
  - typeScript
  type: class
  summary: Vorgänge zum Erstellen von neuen Elementen und Lesen/Abfragen aller Elemente
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Items.container'
  name: container
  fullName: container
  children: []
  langs:
  - typeScript
  type: property
  summary: ''
  syntax:
    content: 'container: Container'
    return:
      type:
      - '@azure/cosmos.Container'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Items.create'
  name: create
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    Erstellen Sie ein Element an.

    Es gibt keine Set-Schema für JSON-Elemente. Sie können eine beliebige Anzahl von benutzerdefinierten Eigenschaften enthalten...
  syntax:
    content: 'function create(body: any, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - any
      description: Stellt den Textkörper des Elements dar. Kann eine beliebige Anzahl von benutzerdefinierten Eigenschaften enthalten.
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: >
        Zum Ändern der Anforderungs verwendet (z. B. das Angeben des partitionsschlüssels).
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ItemResponse<@azure/cosmos.ItemDefinition>>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Items.create_1'
  name: create
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    Erstellen Sie ein Element an.

    Alle bereitgestellten Typ T, nicht notwendigerweise vom SDK erzwungen wird.

    Erhalten Sie möglicherweise mehr oder weniger Eigenschaften, und es liegt an die Logik, um es zu erzwingen.


    Es gibt keine Set-Schema für JSON-Elemente. Sie können eine beliebige Anzahl von benutzerdefinierten Eigenschaften enthalten.
  syntax:
    content: 'function create<T>(body: T, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - T
      description: Stellt den Textkörper des Elements dar. Kann eine beliebige Anzahl von benutzerdefinierten Eigenschaften enthalten.
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: >
        Zum Ändern der Anforderungs verwendet (z. B. das Angeben des partitionsschlüssels).
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ItemResponse<T>>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Items.query'
  name: query
  children: []
  type: method
  langs:
  - typeScript
  summary: Fragt alle Elemente an.
  syntax:
    content: 'function query(query: string | SqlQuerySpec, options?: FeedOptions)'
    parameters:
    - id: query
      type:
      - string | @azure/cosmos.SqlQuerySpec
      description: Abfrage-Konfiguration für den Vorgang. Finden Sie unter <xref:SqlQuerySpec> für Weitere Informationen zum Konfigurieren einer Abfrage.
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: Zum Ändern der Anforderungs verwendet (z. B. das Angeben des partitionsschlüssels).
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<@azure/cosmos.ItemDefinition>'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Items.query_1'
  name: query
  children: []
  type: method
  langs:
  - typeScript
  summary: Fragt alle Elemente an.
  syntax:
    content: 'function query<T>(query: string | SqlQuerySpec, options?: FeedOptions)'
    parameters:
    - id: query
      type:
      - string | @azure/cosmos.SqlQuerySpec
      description: Abfrage-Konfiguration für den Vorgang. Finden Sie unter <xref:SqlQuerySpec> für Weitere Informationen zum Konfigurieren einer Abfrage.
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: Zum Ändern der Anforderungs verwendet (z. B. das Angeben des partitionsschlüssels).
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<T>'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Items.readAll'
  name: readAll
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    Lesen Sie alle Elemente an.

    Es gibt keine Set-Schema für JSON-Elemente. Sie können eine beliebige Anzahl von benutzerdefinierten Eigenschaften enthalten.
  syntax:
    content: 'function readAll(options?: FeedOptions)'
    parameters:
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: Zum Ändern der Anforderungs verwendet (z. B. das Angeben des partitionsschlüssels).
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<@azure/cosmos.ItemDefinition>'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Items.readAll_1'
  name: readAll
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    Lesen Sie alle Elemente an.

    Alle bereitgestellten Typ T, nicht notwendigerweise vom SDK erzwungen wird.

    Erhalten Sie möglicherweise mehr oder weniger Eigenschaften, und es liegt an die Logik, um es zu erzwingen.


    Es gibt keine Set-Schema für JSON-Elemente. Sie können eine beliebige Anzahl von benutzerdefinierten Eigenschaften enthalten.
  syntax:
    content: 'function readAll<T>(options?: FeedOptions)'
    parameters:
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: Zum Ändern der Anforderungs verwendet (z. B. das Angeben des partitionsschlüssels).
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<T>'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Items.upsert'
  name: upsert
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    Ein Element "Upsert".

    Es gibt keine Set-Schema für JSON-Elemente. Sie können eine beliebige Anzahl von benutzerdefinierten Eigenschaften enthalten.
  syntax:
    content: 'function upsert(body: any, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - any
      description: Stellt den Textkörper des Elements dar. Kann eine beliebige Anzahl von benutzerdefinierten Eigenschaften enthalten.
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: >
        Zum Ändern der Anforderungs verwendet (z. B. das Angeben des partitionsschlüssels).
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ItemResponse<@azure/cosmos.ItemDefinition>>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Items.upsert_1'
  name: upsert
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    Ein Element "Upsert".

    Alle bereitgestellten Typ T, nicht notwendigerweise vom SDK erzwungen wird.

    Erhalten Sie möglicherweise mehr oder weniger Eigenschaften, und es liegt an die Logik, um es zu erzwingen.


    Es gibt keine Set-Schema für JSON-Elemente. Sie können eine beliebige Anzahl von benutzerdefinierten Eigenschaften enthalten.
  syntax:
    content: 'function upsert<T>(body: T, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - T
      description: Stellt den Textkörper des Elements dar. Kann eine beliebige Anzahl von benutzerdefinierten Eigenschaften enthalten.
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: >
        Zum Ändern der Anforderungs verwendet (z. B. das Angeben des partitionsschlüssels).
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ItemResponse<T>>
  package: '@azure/cosmos'
references:
- uid: '@azure/cosmos.Container'
  spec.typeScript:
  - name: Container
    fullName: Container
    uid: '@azure/cosmos.Container'
- uid: '@azure/cosmos.RequestOptions'
  spec.typeScript:
  - name: RequestOptions
    fullName: RequestOptions
    uid: '@azure/cosmos.RequestOptions'
- uid: Promise<@azure/cosmos.ItemResponse<@azure/cosmos.ItemDefinition>>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: ItemResponse
    fullName: ItemResponse
    uid: '@azure/cosmos.ItemResponse'
  - name: <
    fullName: <
  - name: ItemDefinition
    fullName: ItemDefinition
    uid: '@azure/cosmos.ItemDefinition'
  - name: '>>'
    fullName: '>>'
- uid: Promise<@azure/cosmos.ItemResponse<T>>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: ItemResponse
    fullName: ItemResponse
    uid: '@azure/cosmos.ItemResponse'
  - name: <T>>
    fullName: <T>>
- uid: string | @azure/cosmos.SqlQuerySpec
  spec.typeScript:
  - name: 'string | '
    fullName: 'string | '
  - name: SqlQuerySpec
    fullName: SqlQuerySpec
    uid: '@azure/cosmos.SqlQuerySpec'
- uid: '@azure/cosmos.FeedOptions'
  spec.typeScript:
  - name: FeedOptions
    fullName: FeedOptions
    uid: '@azure/cosmos.FeedOptions'
- uid: '@azure/cosmos.QueryIterator<@azure/cosmos.ItemDefinition>'
  spec.typeScript:
  - name: QueryIterator
    fullName: QueryIterator
    uid: '@azure/cosmos.QueryIterator'
  - name: <
    fullName: <
  - name: ItemDefinition
    fullName: ItemDefinition
    uid: '@azure/cosmos.ItemDefinition'
  - name: '>'
    fullName: '>'
- uid: '@azure/cosmos.QueryIterator<T>'
  spec.typeScript:
  - name: QueryIterator
    fullName: QueryIterator
    uid: '@azure/cosmos.QueryIterator'
  - name: <T>
    fullName: <T>
