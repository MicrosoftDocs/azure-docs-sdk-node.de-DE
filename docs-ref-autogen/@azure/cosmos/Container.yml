### YamlMime:UniversalReference
ms.openlocfilehash: f8106145cc2f1591901b57d76a3dcdbd0f179424
ms.sourcegitcommit: 286f52ea38c9eff2ec9d4f8cabeb86f62fd9c406
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 08/22/2018
ms.locfileid: "41702668"
items:
- uid: '@azure/cosmos.Container'
  name: Container
  fullName: Container
  children:
  - '@azure/cosmos.Container.conflict'
  - '@azure/cosmos.Container.database'
  - '@azure/cosmos.Container.delete'
  - '@azure/cosmos.Container.extractPartitionKey'
  - '@azure/cosmos.Container.id'
  - '@azure/cosmos.Container.item'
  - '@azure/cosmos.Container.items'
  - '@azure/cosmos.Container.read'
  - '@azure/cosmos.Container.replace'
  - '@azure/cosmos.Container.storedProcedure'
  - '@azure/cosmos.Container.storedProcedures'
  - '@azure/cosmos.Container.trigger'
  - '@azure/cosmos.Container.triggers'
  - '@azure/cosmos.Container.url'
  - '@azure/cosmos.Container.userDefinedFunction'
  - '@azure/cosmos.Container.userDefinedFunctions'
  langs:
  - typeScript
  type: class
  summary: Vorgänge zum Lesen, ersetzen oder Löschen einen bestimmten, vorhandenen Container nach Id.
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.conflict'
  name: conflict
  children: []
  type: method
  langs:
  - typeScript
  summary: Zum Lesen, ersetzen oder löschen eine bestimmte vorhandene <xref:Conflict> nach Id. Verwendung `.conflicts` für neue verursacht einen Konflikt oder zu erstellen, Abfragen oder Lesen von alle Konflikte.
  syntax:
    content: 'function conflict(id: string)'
    parameters:
    - id: id
      type:
      - string
      description: >
        Die Id des dem <xref:Conflict>.
    return:
      type:
      - '@azure/cosmos.Conflict'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.database'
  name: database
  fullName: database
  children: []
  langs:
  - typeScript
  type: property
  summary: ''
  syntax:
    content: 'database: Database'
    return:
      type:
      - '@azure/cosmos.Database'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.delete'
  name: delete
  children: []
  type: method
  langs:
  - typeScript
  summary: Löschen des Containers
  syntax:
    content: 'function delete(options?: RequestOptions)'
    parameters:
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: ''
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ContainerResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.extractPartitionKey'
  name: extractPartitionKey
  children: []
  type: method
  langs:
  - typeScript
  summary: ''
  syntax:
    content: 'function extractPartitionKey(document: any, partitionKeyDefinition: PartitionKeyDefinition)'
    parameters:
    - id: document
      type:
      - any
      description: ''
    - id: partitionKeyDefinition
      type:
      - '@azure/cosmos.PartitionKeyDefinition'
      description: ''
    return:
      type:
      - '@azure/cosmos.PartitionKey[]'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.id'
  name: id
  fullName: id
  children: []
  langs:
  - typeScript
  type: property
  summary: ''
  syntax:
    content: 'id: string'
    return:
      type:
      - string
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.item'
  name: item
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    Zum Lesen, ersetzen oder löschen eine bestimmte vorhandene <xref:Item> nach Id. Verwendung `.items` für das Erstellen von neuen Elementen oder alle Elemente Abfragen oder lesen.
  syntax:
    content: 'function item(id: string, partitionKey?: string)'
    parameters:
    - id: id
      type:
      - string
      description: Die Id des dem <xref:Item>.
    - id: partitionKey
      type:
      - string
      description: Der Partitionsschlüssel der <xref:Item>. (Erforderlich für partitionierte Container).
      optional: true
    return:
      type:
      - '@azure/cosmos.Item'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.items'
  name: items
  fullName: items
  children: []
  langs:
  - typeScript
  type: property
  summary: >
    Verwenden Sie die Vorgänge zum Erstellen von neuen Elementen und Lesen/Abfragen für alle Elemente für das Lesen, ersetzen oder Löschen eines vorhandenen Elements, `.item(id)`.
  syntax:
    content: 'items: Items'
    return:
      type:
      - '@azure/cosmos.Items'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.read'
  name: read
  children: []
  type: method
  langs:
  - typeScript
  summary: Lesen des Containers-definition
  syntax:
    content: 'function read(options?: RequestOptions)'
    parameters:
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: ''
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ContainerResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.replace'
  name: replace
  children: []
  type: method
  langs:
  - typeScript
  summary: Ersetzen Sie den Container-definition
  syntax:
    content: 'function replace(body: ContainerDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.ContainerDefinition'
      description: ''
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: ''
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ContainerResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.storedProcedure'
  name: storedProcedure
  children: []
  type: method
  langs:
  - typeScript
  summary: Zum Lesen, ersetzen oder löschen eine bestimmte vorhandene <xref:StoredProcedure> nach Id. Verwendung `.storedProcedures` für die neue gespeicherte Prozeduren oder zu erstellen, Abfragen oder Lesen von alle gespeicherten Prozeduren.
  syntax:
    content: 'function storedProcedure(id: string)'
    parameters:
    - id: id
      type:
      - string
      description: >
        Die Id des dem <xref:StoredProcedure>.
    return:
      type:
      - '@azure/cosmos.StoredProcedure'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.storedProcedures'
  name: storedProcedures
  fullName: storedProcedures
  children: []
  langs:
  - typeScript
  type: property
  summary: >
    Vorgänge zum Erstellen von neuer gespeicherten Prozeduren und Lesen/Abfragen alle gespeicherte Prozeduren.

    Verwenden Sie für das Lesen, ersetzen oder Löschen einer vorhandenen gespeicherten Prozedur, `.storedProcedure(id)`.
  syntax:
    content: 'storedProcedures: StoredProcedures'
    return:
      type:
      - '@azure/cosmos.StoredProcedures'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.trigger'
  name: trigger
  children: []
  type: method
  langs:
  - typeScript
  summary: Zum Lesen, ersetzen oder löschen eine bestimmte vorhandene <xref:Trigger> nach Id. Verwendung `.triggers` für neue Trigger erstellen, oder alle Trigger Abfragen oder lesen.
  syntax:
    content: 'function trigger(id: string)'
    parameters:
    - id: id
      type:
      - string
      description: >
        Die Id des dem <xref:Trigger>.
    return:
      type:
      - '@azure/cosmos.Trigger'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.triggers'
  name: triggers
  fullName: triggers
  children: []
  langs:
  - typeScript
  type: property
  summary: >
    Vorgänge zum Erstellen neuer Trigger und Lesen/Abfragen alle Trigger.

    Verwenden Sie für das Lesen, ersetzen oder Löschen einen vorhandenen Trigger, `.trigger(id)`.
  syntax:
    content: 'triggers: Triggers'
    return:
      type:
      - '@azure/cosmos.Triggers'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.url'
  name: url
  fullName: url
  children: []
  langs:
  - typeScript
  type: property
  summary: Gibt eine Verweis-URL für die Ressource zurück. Zum Verknüpfen von Berechtigungen verwendet.
  syntax:
    content: 'url: string'
    return:
      type:
      - string
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.userDefinedFunction'
  name: userDefinedFunction
  children: []
  type: method
  langs:
  - typeScript
  summary: Zum Lesen, ersetzen oder löschen eine bestimmte vorhandene <xref:UserDefinedFunction> nach Id. Verwendung `.userDefinedFunctions` für neue benutzerdefinierte Funktionen erstellen oder Abfragen oder Lesen von alle benutzerdefinierten Funktionen.
  syntax:
    content: 'function userDefinedFunction(id: string)'
    parameters:
    - id: id
      type:
      - string
      description: >
        Die Id des dem <xref:UserDefinedFunction>.
    return:
      type:
      - '@azure/cosmos.UserDefinedFunction'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.userDefinedFunctions'
  name: userDefinedFunctions
  fullName: userDefinedFunctions
  children: []
  langs:
  - typeScript
  type: property
  summary: >
    Operationen zur Erstellung neuen Benutzers, benutzerdefinierte Funktionen, und Lesen/Abfragen von allen Benutzern, benutzerdefinierte Funktionen.

    Verwenden Sie für das Lesen, ersetzen oder löschen eine vorhandene benutzerdefinierte Funktion, `.userDefinedFunction(id)`.
  syntax:
    content: 'userDefinedFunctions: UserDefinedFunctions'
    return:
      type:
      - '@azure/cosmos.UserDefinedFunctions'
  package: '@azure/cosmos'
references:
- uid: '@azure/cosmos.Database'
  spec.typeScript:
  - name: Database
    fullName: Database
    uid: '@azure/cosmos.Database'
- uid: '@azure/cosmos.Items'
  spec.typeScript:
  - name: Items
    fullName: Items
    uid: '@azure/cosmos.Items'
- uid: '@azure/cosmos.StoredProcedures'
  spec.typeScript:
  - name: StoredProcedures
    fullName: StoredProcedures
    uid: '@azure/cosmos.StoredProcedures'
- uid: '@azure/cosmos.Triggers'
  spec.typeScript:
  - name: Triggers
    fullName: Triggers
    uid: '@azure/cosmos.Triggers'
- uid: '@azure/cosmos.UserDefinedFunctions'
  spec.typeScript:
  - name: UserDefinedFunctions
    fullName: UserDefinedFunctions
    uid: '@azure/cosmos.UserDefinedFunctions'
- uid: '@azure/cosmos.Conflict'
  spec.typeScript:
  - name: Conflict
    fullName: Conflict
    uid: '@azure/cosmos.Conflict'
- uid: '@azure/cosmos.RequestOptions'
  spec.typeScript:
  - name: RequestOptions
    fullName: RequestOptions
    uid: '@azure/cosmos.RequestOptions'
- uid: Promise<@azure/cosmos.ContainerResponse>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: ContainerResponse
    fullName: ContainerResponse
    uid: '@azure/cosmos.ContainerResponse'
  - name: '>'
    fullName: '>'
- uid: '@azure/cosmos.PartitionKeyDefinition'
  spec.typeScript:
  - name: PartitionKeyDefinition
    fullName: PartitionKeyDefinition
    uid: '@azure/cosmos.PartitionKeyDefinition'
- uid: '@azure/cosmos.PartitionKey[]'
  spec.typeScript:
  - name: PartitionKey
    fullName: PartitionKey
    uid: '@azure/cosmos.PartitionKey'
  - name: '[]'
    fullName: '[]'
- uid: '@azure/cosmos.Item'
  spec.typeScript:
  - name: Item
    fullName: Item
    uid: '@azure/cosmos.Item'
- uid: '@azure/cosmos.ContainerDefinition'
  spec.typeScript:
  - name: ContainerDefinition
    fullName: ContainerDefinition
    uid: '@azure/cosmos.ContainerDefinition'
- uid: '@azure/cosmos.StoredProcedure'
  spec.typeScript:
  - name: StoredProcedure
    fullName: StoredProcedure
    uid: '@azure/cosmos.StoredProcedure'
- uid: '@azure/cosmos.Trigger'
  spec.typeScript:
  - name: Trigger
    fullName: Trigger
    uid: '@azure/cosmos.Trigger'
- uid: '@azure/cosmos.UserDefinedFunction'
  spec.typeScript:
  - name: UserDefinedFunction
    fullName: UserDefinedFunction
    uid: '@azure/cosmos.UserDefinedFunction'
