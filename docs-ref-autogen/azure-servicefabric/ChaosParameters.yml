### YamlMime:UniversalReference
ms.openlocfilehash: ab15ed7cbbeacca663fe05ea36bf237ea7258053
ms.sourcegitcommit: efa2d98deffe8a0d41a8d63f9f07aa720862e6ab
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 12/13/2018
ms.locfileid: "52035485"
items:
- uid: azure-servicefabric.ChaosParameters
  name: ChaosParameters
  fullName: ChaosParameters
  children:
  - azure-servicefabric.ChaosParameters.chaosTargetFilter
  - azure-servicefabric.ChaosParameters.clusterHealthPolicy
  - azure-servicefabric.ChaosParameters.context
  - azure-servicefabric.ChaosParameters.enableMoveReplicaFaults
  - azure-servicefabric.ChaosParameters.maxClusterStabilizationTimeoutInSeconds
  - azure-servicefabric.ChaosParameters.maxConcurrentFaults
  - azure-servicefabric.ChaosParameters.timeToRunInSeconds
  - azure-servicefabric.ChaosParameters.waitTimeBetweenFaultsInSeconds
  - azure-servicefabric.ChaosParameters.waitTimeBetweenIterationsInSeconds
  langs:
  - typeScript
  type: interface
  summary: Definiert alle Parameter zum Konfigurieren einer Chaos-Ausführung.
  package: azure-servicefabric
- uid: azure-servicefabric.ChaosParameters.chaosTargetFilter
  name: chaosTargetFilter
  fullName: chaosTargetFilter
  children: []
  langs:
  - typeScript
  type: property
  summary: >-
    Liste der clusterentitäten für Chaos-Fehler als Ziel.

    Dieser Filter kann verwendet werden, um Chaos-Fehler nur auf bestimmte Knotentypen oder nur auf bestimmte Anwendungsinstanzen. Wenn „ChaosTargetFilter“ nicht verwendet wird, stört Chaos alle Clusterentitäten.

    Wenn „ChaosTargetFilter“ verwendet wird, stört Chaos nur die Entitäten, die der ChaosTargetFilter-Spezifikation entsprechen.
  optional: true
  syntax:
    content: 'chaosTargetFilter?: ChaosTargetFilter'
    return:
      type:
      - azure-servicefabric.ChaosTargetFilter
  package: azure-servicefabric
- uid: azure-servicefabric.ChaosParameters.clusterHealthPolicy
  name: clusterHealthPolicy
  fullName: clusterHealthPolicy
  children: []
  langs:
  - typeScript
  type: property
  summary: Übergebene clusterintegritätsrichtlinie wird verwendet, um die Integrität des Clusters zwischen Iterationen von Chaos zu überprüfen. Wenn die clusterintegrität fehlerhaft ist oder eine unerwartete Ausnahme--auftritt zum Bereitstellen des Clusters mit fehlerausführung--wartet Chaos 30 Minuten vor der nächsten integritätsprüfung.
  optional: true
  syntax:
    content: 'clusterHealthPolicy?: ClusterHealthPolicy'
    return:
      type:
      - azure-servicefabric.ClusterHealthPolicy
  package: azure-servicefabric
- uid: azure-servicefabric.ChaosParameters.context
  name: context
  fullName: context
  children: []
  langs:
  - typeScript
  type: property
  summary: >-
    Beschreibt eine Zuordnung, die eine Auflistung von (String, String) Geben Sie Schlüssel-Wert-Paaren. Die Zuordnung kann verwendet werden, um Informationen zur Ausführung von Chaos aufzuzeichnen. Es kann nicht mehr als 100 solcher Paare geben, und jede Zeichenfolge (Schlüssel oder Wert) darf höchstens 4.095 Zeichen lang sein.

    Diese Zuordnung wird beim Start der Chaos-Ausführung festgelegt, um optional den Kontext der jeweiligen Ausführung zu speichern.
  optional: true
  syntax:
    content: 'context?: ChaosContext'
    return:
      type:
      - azure-servicefabric.ChaosContext
  package: azure-servicefabric
- uid: azure-servicefabric.ChaosParameters.enableMoveReplicaFaults
  name: enableMoveReplicaFaults
  fullName: enableMoveReplicaFaults
  children: []
  langs:
  - typeScript
  type: property
  summary: Aktiviert oder deaktiviert das Verschieben von primären und sekundären Fehlern.
  optional: true
  syntax:
    content: 'enableMoveReplicaFaults?: boolean'
    return:
      type:
      - boolean
  package: azure-servicefabric
- uid: azure-servicefabric.ChaosParameters.maxClusterStabilizationTimeoutInSeconds
  name: maxClusterStabilizationTimeoutInSeconds
  fullName: maxClusterStabilizationTimeoutInSeconds
  children: []
  langs:
  - typeScript
  type: property
  summary: >-
    Die maximale Zeitdauer, die abzuwarten ist, bis alle Clusterentitäten stabil und fehlerfrei sind.

    Chaos wird in Iterationen ausgeführt. Am Anfang jeder Iteration wird die Integrität der Clusterentitäten überprüft.

    Wenn während der Überprüfung eine Clusterentität nicht innerhalb von MaxClusterStabilizationTimeoutInSeconds stabil und fehlerfrei ist, generiert Chaos ein Ereignis für einen Validierungsfehler.
  optional: true
  syntax:
    content: 'maxClusterStabilizationTimeoutInSeconds?: number'
    return:
      type:
      - number
  package: azure-servicefabric
- uid: azure-servicefabric.ChaosParameters.maxConcurrentFaults
  name: maxConcurrentFaults
  fullName: maxConcurrentFaults
  children: []
  langs:
  - typeScript
  type: property
  summary: >-
    MaxConcurrentFaults ist die maximale Anzahl von gleichzeitigen Fehlern, die pro Iteration ausgelöst werden.

    Der Chaostest wird in Iterationen ausgeführt, wobei zwei aufeinanderfolgende Iterationen von einer Überprüfungsphase unterbrochen werden.

    Je höher die Parallelität, desto aggressiver die Einfügung von Fehlern, die zum Auslösen von komplexere Reihe von Zuständen zum Aufdecken von Fehlern führt.

    Es wird empfohlen, mit dem Wert 2 oder 3 zu beginnen und diesen vorsichtig zu erhöhen.
  optional: true
  syntax:
    content: 'maxConcurrentFaults?: number'
    return:
      type:
      - number
  package: azure-servicefabric
- uid: azure-servicefabric.ChaosParameters.timeToRunInSeconds
  name: timeToRunInSeconds
  fullName: timeToRunInSeconds
  children: []
  langs:
  - typeScript
  type: property
  summary: Die Gesamtzeit (in Sekunden), während der der Chaostest ausgeführt wird, bevor er automatisch beendet wird. Der maximal zulässige Wert ist „4.294.967.295“ (System.UInt32.MaxValue).
  optional: true
  syntax:
    content: 'timeToRunInSeconds?: string'
    return:
      type:
      - string
  package: azure-servicefabric
- uid: azure-servicefabric.ChaosParameters.waitTimeBetweenFaultsInSeconds
  name: waitTimeBetweenFaultsInSeconds
  fullName: waitTimeBetweenFaultsInSeconds
  children: []
  langs:
  - typeScript
  type: property
  summary: >-
    Wartezeit (in Sekunden) zwischen aufeinander folgenden Fehlern innerhalb einer einzelnen Iteration.

    Je größer der Wert ist, desto geringer ist die Überlappung zwischen Fehlern und desto einfacher ist auch die Sequenz der Zustandswechsel, die der Cluster durchläuft.

    Es wird empfohlen, mit einem Wert zwischen 1 und 5 zu beginnen und diesen vorsichtig zu erhöhen.
  optional: true
  syntax:
    content: 'waitTimeBetweenFaultsInSeconds?: number'
    return:
      type:
      - number
  package: azure-servicefabric
- uid: azure-servicefabric.ChaosParameters.waitTimeBetweenIterationsInSeconds
  name: waitTimeBetweenIterationsInSeconds
  fullName: waitTimeBetweenIterationsInSeconds
  children: []
  langs:
  - typeScript
  type: property
  summary: >-
    Zeitabstand (in Sekunden) zwischen zwei aufeinander folgenden Iterationen von Chaostests.

    Je höher der Wert ist, desto niedriger ist die durchschnittliche Fault Injection-Rate.
  optional: true
  syntax:
    content: 'waitTimeBetweenIterationsInSeconds?: number'
    return:
      type:
      - number
  package: azure-servicefabric
references:
- uid: azure-servicefabric.ChaosTargetFilter
  name: ChaosTargetFilter
  spec.typeScript:
  - name: ChaosTargetFilter
    fullName: ChaosTargetFilter
    uid: azure-servicefabric.ChaosTargetFilter
- uid: azure-servicefabric.ClusterHealthPolicy
  name: ClusterHealthPolicy
  spec.typeScript:
  - name: ClusterHealthPolicy
    fullName: ClusterHealthPolicy
    uid: azure-servicefabric.ClusterHealthPolicy
- uid: azure-servicefabric.ChaosContext
  name: ChaosContext
  spec.typeScript:
  - name: ChaosContext
    fullName: ChaosContext
    uid: azure-servicefabric.ChaosContext
